"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[12988],{28453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>a});var r=i(96540);const t={},c=r.createContext(t);function s(e){const n=r.useContext(c);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),r.createElement(c.Provider,{value:n},e.children)}},46312:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"rfcs/configured-alias","title":"Buck support to implement configured_alias","description":"Intro","source":"@site/../docs/rfcs/configured-alias.md","sourceDirName":"rfcs","slug":"/rfcs/configured-alias","permalink":"/docs/rfcs/configured-alias","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}}');var t=i(74848),c=i(28453);const s={},a="Buck support to implement configured_alias",l={},d=[{value:"Intro",id:"intro",level:2},{value:"What is <code>configured_alias</code>?",id:"what-is-configured_alias",level:2},{value:"How to implement it in buck v2?",id:"how-to-implement-it-in-buck-v2",level:2},{value:"New rule attribute type: <code>configured_dep</code>",id:"new-rule-attribute-type-configured_dep",level:3},{value:"<code>configured_alias_impl</code> user defined rule",id:"configured_alias_impl-user-defined-rule",level:3},{value:"Finally, <code>configured_alias</code> macro",id:"finally-configured_alias-macro",level:3},{value:"Alternatives",id:"alternatives",level:2},{value:"No <code>configured_alias</code>",id:"no-configured_alias",level:3},{value:"Use <code>@configuration</code> syntax from another RFC.",id:"use-configuration-syntax-from-another-rfc",level:3},{value:"Accept <code>configured_target_label</code> in <code>dep</code> attribute",id:"accept-configured_target_label-in-dep-attribute",level:3}];function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,c.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsxs)(n.h1,{id:"buck-support-to-implement-configured_alias",children:["Buck support to implement ",(0,t.jsx)(n.code,{children:"configured_alias"})]})}),"\n",(0,t.jsx)(n.h2,{id:"intro",children:"Intro"}),"\n",(0,t.jsxs)(n.p,{children:["Currently, Buck 2 lacks ",(0,t.jsx)(n.code,{children:"configured_alias"})," rule support."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"configured_alias"})," is a builtin rule in Buck v1, and it cannot be currently\nimplemented as user defined rule in Buck v2."]}),"\n",(0,t.jsxs)(n.p,{children:["This RFC proposes Buck core support for ",(0,t.jsx)(n.code,{children:"configured_alias"}),"."]}),"\n",(0,t.jsxs)(n.h2,{id:"what-is-configured_alias",children:["What is ",(0,t.jsx)(n.code,{children:"configured_alias"}),"?"]}),"\n",(0,t.jsx)(n.p,{children:"Syntax is this:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'configured_alias(\n    name = "foo-but-linux-release",\n    actual = ":foo",\n    platform = "config//platforms:linux-release",\n)\n'})}),"\n",(0,t.jsx)(n.p,{children:'When this rule is built, it ignores "current" target configuration, and builds\nthe "actual" target with the configuration specified as "platform" argument.'}),"\n",(0,t.jsx)(n.h2,{id:"how-to-implement-it-in-buck-v2",children:"How to implement it in buck v2?"}),"\n",(0,t.jsxs)(n.h3,{id:"new-rule-attribute-type-configured_dep",children:["New rule attribute type: ",(0,t.jsx)(n.code,{children:"configured_dep"})]}),"\n",(0,t.jsx)(n.p,{children:"Currently, we have several dependency attributes:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"attrs.dep"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"attrs.exec_dep"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"attrs.transition_dep"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"attrs.split_transition_dep"})}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"This RFC proposes adding another attribute:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"attrs.configured_dep"})}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"configured_dep"})," is an attribute which accepts a pair of strings: target and\nconfiguration. During analysis, configured attr deps are resolved to providers\nresolved using given configuration."]}),"\n",(0,t.jsxs)(n.h3,{id:"configured_alias_impl-user-defined-rule",children:[(0,t.jsx)(n.code,{children:"configured_alias_impl"})," user defined rule"]}),"\n",(0,t.jsx)(n.p,{children:"The rule implementation is trivial:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'\ndef _configured_alias_impl(ctx):\n    return ctx.attrs.actual.providers\n\nconfigured_alias_impl = rule(\n    impl = _configured_alias_impl,\n    attrs = {\n        "actual": attrs.configured_dep(),\n    }\n)\n'})}),"\n",(0,t.jsxs)(n.h3,{id:"finally-configured_alias-macro",children:["Finally, ",(0,t.jsx)(n.code,{children:"configured_alias"})," macro"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def configured_alias(name, actual, platform):\n    configured_alias_impl(name, actual = (actual, platform))\n"})}),"\n",(0,t.jsx)(n.h2,{id:"alternatives",children:"Alternatives"}),"\n",(0,t.jsxs)(n.h3,{id:"no-configured_alias",children:["No ",(0,t.jsx)(n.code,{children:"configured_alias"})]}),"\n",(0,t.jsxs)(n.p,{children:["Each specific case where ",(0,t.jsx)(n.code,{children:"configured_alias"})," is used, it can be done with\ndefining custom transition, and using custom transition rule."]}),"\n",(0,t.jsxs)(n.p,{children:["But having ",(0,t.jsx)(n.code,{children:"configured_alias"})," is a convenient stopgap to unblock people."]}),"\n",(0,t.jsxs)(n.h3,{id:"use-configuration-syntax-from-another-rfc",children:["Use ",(0,t.jsx)(n.code,{children:"@configuration"})," syntax from ",(0,t.jsx)(n.a,{href:"https://www.internalfb.com/diff/D35136639",children:"another RFC"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Instead of passing ",(0,t.jsx)(n.code,{children:"confiured_target_label(x, y)"})," pass ",(0,t.jsx)(n.code,{children:'x + "@" + y'}),"."]}),"\n",(0,t.jsxs)(n.h3,{id:"accept-configured_target_label-in-dep-attribute",children:["Accept ",(0,t.jsx)(n.code,{children:"configured_target_label"})," in ",(0,t.jsx)(n.code,{children:"dep"})," attribute"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"dep"})," attribute could support all of:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"regular target label as string"}),"\n",(0,t.jsxs)(n.li,{children:["configured target label (as either ",(0,t.jsx)(n.code,{children:"configured_target_label"})," or ",(0,t.jsx)(n.code,{children:"x@y"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"I don't know practical applications for this magic, and unless there are uses\nfor it, better keep API simple and explicit."})]})}function u(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}}}]);