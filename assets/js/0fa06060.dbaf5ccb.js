"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1502],{23693:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>u,frontMatter:()=>d,metadata:()=>s,toc:()=>t});const s=JSON.parse('{"id":"concepts/build_rule","title":"Build Rule","description":"A build rule is a procedure for producing output files from a set of input","source":"@site/../docs/concepts/build_rule.md","sourceDirName":"concepts","slug":"/concepts/build_rule","permalink":"/docs/concepts/build_rule","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"build_rule","title":"Build Rule"},"sidebar":"main","previous":{"title":"Concept Map","permalink":"/docs/concepts/concept_map"},"next":{"title":"Build File","permalink":"/docs/concepts/build_file"}}');var l=i(74848),r=i(28453);const d={id:"build_rule",title:"Build Rule"},c="Build Rule",a={},t=[{value:"Buck2&#39;s collection of build rules",id:"buck2s-collection-of-build-rules",level:2},{value:"Source files as inputs to build rules",id:"source-files-as-inputs-to-build-rules",level:2},{value:"Package Boundaries and Source File Access",id:"package-boundaries-and-source-file-access",level:3},{value:"Package Access Rules",id:"package-access-rules",level:4},{value:"Using Symlinks (Not Recommended)",id:"using-symlinks-not-recommended",level:4},{value:"Dependencies: Output from One Rule as Input to Another Rule",id:"dependencies-output-from-one-rule-as-input-to-another-rule",level:2},{value:"How to specify dependencies",id:"how-to-specify-dependencies",level:3},{value:"Examples:",id:"examples",level:3},{value:"Required dependencies are always built first",id:"required-dependencies-are-always-built-first",level:3},{value:"Visibility",id:"visibility",level:3},{value:"Dependencies define a graph",id:"dependencies-define-a-graph",level:3},{value:"How to handle special cases: genrules and macros",id:"how-to-handle-special-cases-genrules-and-macros",level:2},{value:"Multiple output files with genrules",id:"multiple-output-files-with-genrules",level:3},{value:"Macros",id:"macros",level:3},{value:"String parameter macros",id:"string-parameter-macros",level:2}];function o(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"build-rule",children:"Build Rule"})}),"\n",(0,l.jsxs)(n.p,{children:["A ",(0,l.jsx)(n.em,{children:"build rule"})," is a procedure for producing output files from a set of input\nfiles in the context of a specified build configuration. Build rules are\nspecified in ",(0,l.jsx)(n.a,{href:"/docs/concepts/build_file",children:"build files"}),"\u2014typically named BUCK."]}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Note:"})," A build rule must explicitly specify, in its arguments, all of its\nrequired inputs in order for Buck2 to be able to build the rule's output in a\nway that is deterministic and reproducible."]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"buck2s-collection-of-build-rules",children:"Buck2's collection of build rules"}),"\n",(0,l.jsx)(n.p,{children:"Buck2 comes with a collection of built-in build rules for many common build\nprocedures. For example:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Compiling Java code against the Android SDK is a common procedure, so Buck2\nprovides the ",(0,l.jsx)(n.a,{href:"../../prelude/rules/android/android_library",children:(0,l.jsx)(n.code,{children:"android_library"})}),"\nbuild rule"]}),"\n",(0,l.jsxs)(n.li,{children:["The final product of most Android development is an APK, so you can use the\n",(0,l.jsx)(n.a,{href:"../../prelude/rules/android/android_binary",children:(0,l.jsx)(n.code,{children:"android_binary"})})," build rule to\ncreate an APK"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"source-files-as-inputs-to-build-rules",children:"Source files as inputs to build rules"}),"\n",(0,l.jsxs)(n.p,{children:["Most build rules specify source files as inputs. For example, a\n",(0,l.jsx)(n.a,{href:"../../prelude/rules/cxx/cxx_library",children:(0,l.jsx)(n.code,{children:"cxx_library"})})," rule would specify ",(0,l.jsx)(n.code,{children:".cpp"}),"\nfiles as inputs."]}),"\n",(0,l.jsx)(n.p,{children:"To support specifying these files:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["A ",(0,l.jsx)(n.code,{children:"cxx_library"})," rule provides the ",(0,l.jsx)(n.code,{children:"srcs"})," argument for source files"]}),"\n",(0,l.jsxs)(n.li,{children:["For header files (such as in C++), ",(0,l.jsx)(n.code,{children:"cxx_library"})," provides a ",(0,l.jsx)(n.code,{children:"headers"})," argument"]}),"\n",(0,l.jsxs)(n.li,{children:["Some rules provide platform-specific variants like ",(0,l.jsx)(n.code,{children:"platform_srcs"})," and\n",(0,l.jsx)(n.code,{children:"platform_headers"}),", which support groups of source files that should be used\nas inputs only when building for specific platforms"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"package-boundaries-and-source-file-access",children:"Package Boundaries and Source File Access"}),"\n",(0,l.jsxs)(n.p,{children:["In Buck2, source files are organized within ",(0,l.jsx)(n.em,{children:"packages"}),":"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["A ",(0,l.jsx)(n.strong,{children:"package"})," is defined by a BUCK file and includes:","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"The directory containing that BUCK file"}),"\n",(0,l.jsx)(n.li,{children:"All subdirectories that don't themselves contain BUCK files"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["For more details on packages, see the ",(0,l.jsx)(n.a,{href:"/docs/concepts/key_concepts",children:"Key Concepts"})," topic"]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"package-access-rules",children:"Package Access Rules"}),"\n",(0,l.jsx)(n.p,{children:"Buck2 enforces these rules regarding source file access:"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Basic Rule"}),": A build rule can only use source files from its own package"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"A rule in a BUCK file cannot specify source files from outside its package"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Header File Exception"}),": A rule can access header files from another\npackage if:"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["The other package explicitly ",(0,l.jsx)(n.em,{children:"exports"})," those header files"]}),"\n",(0,l.jsxs)(n.li,{children:["This is done using the ",(0,l.jsx)(n.code,{children:"exported_headers"})," argument"]}),"\n",(0,l.jsxs)(n.li,{children:["See the ",(0,l.jsx)(n.a,{href:"../../prelude/rules/cxx/cxx_library",children:(0,l.jsx)(n.code,{children:"cxx_library"})})," documentation\nfor details"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Accessing Functionality"}),": To use code from other packages:"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Use the artifacts produced by build rules in those packages"}),"\n",(0,l.jsxs)(n.li,{children:["Specify those build rules as ",(0,l.jsx)(n.em,{children:"dependencies"})]}),"\n",(0,l.jsxs)(n.li,{children:["Example: A ",(0,l.jsx)(n.a,{href:"../../prelude/rules/cxx/cxx_binary",children:(0,l.jsx)(n.code,{children:"cxx_binary"})})," can use a\n",(0,l.jsx)(n.code,{children:"cxx_library"})," from another package by taking it as a dependency"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"using-symlinks-not-recommended",children:"Using Symlinks (Not Recommended)"}),"\n",(0,l.jsxs)(n.p,{children:["Symlinks are file system shortcuts that point to other files or directories (for\nexample, a symlink in ",(0,l.jsx)(n.code,{children:"/project/src"})," might point to a file in\n",(0,l.jsx)(n.code,{children:"/shared/common/lib"}),")."]}),"\n",(0,l.jsxs)(n.p,{children:["We recommend ",(0,l.jsx)(n.strong,{children:"against"})," using symlinks (absolute or relative) to specify input\nfiles to build rules. While symlinks sometimes work in this context, they often\nlead to unexpected behavior and errors."]}),"\n",(0,l.jsx)(n.h2,{id:"dependencies-output-from-one-rule-as-input-to-another-rule",children:"Dependencies: Output from One Rule as Input to Another Rule"}),"\n",(0,l.jsxs)(n.p,{children:["A build rule can use the output from another build rule as one of its inputs by\nspecifying that rule as a ",(0,l.jsx)(n.em,{children:"dependency"}),"."]}),"\n",(0,l.jsx)(n.h3,{id:"how-to-specify-dependencies",children:"How to specify dependencies"}),"\n",(0,l.jsx)(n.p,{children:"Dependencies are specified in several ways:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Primary Method"}),": Most build rules use the ",(0,l.jsx)(n.code,{children:"deps"})," argument to list\n",(0,l.jsx)(n.a,{href:"/docs/concepts/build_target",children:"build target"}),"s they depend on"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Other Arguments"}),": Some rules allow dependencies to be specified in other\narguments:","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["In ",(0,l.jsx)(n.code,{children:"srcs"}),": When a build target (rather than a file path) is listed in ",(0,l.jsx)(n.code,{children:"srcs"})]}),"\n",(0,l.jsxs)(n.li,{children:["In rule-specific arguments: Some rules have special dependency arguments\n(like ",(0,l.jsx)(n.code,{children:"runtime_deps"}),")"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"examples",children:"Examples:"}),"\n",(0,l.jsxs)(n.p,{children:["The output of a ",(0,l.jsx)(n.a,{href:"../../prelude/rules/java/java_library",children:(0,l.jsx)(n.code,{children:"java_library"})})," rule is\na JAR file. If a ",(0,l.jsx)(n.code,{children:"java_library"})," rule specifies another ",(0,l.jsx)(n.code,{children:"java_library"})," rule as a\ndependency, the JAR file produced by the specified rule is added to the\nclasspath for the ",(0,l.jsx)(n.code,{children:"java_library"})," that depends on it."]}),"\n",(0,l.jsxs)(n.p,{children:["If a ",(0,l.jsx)(n.a,{href:"../../prelude/rules/java/java_binary",children:(0,l.jsx)(n.code,{children:"java_binary"})})," rule specifies a\n",(0,l.jsx)(n.code,{children:"java_library"})," rule as a dependency, the JAR file for the specified\n",(0,l.jsx)(n.code,{children:"java_library"})," is available on the classpath for the ",(0,l.jsx)(n.code,{children:"java_binary"}),"."]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["In addition, the JAR files for any dependencies of the ",(0,l.jsx)(n.code,{children:"java_library"})," rule\n",(0,l.jsx)(n.em,{children:"are also"})," made available to the ",(0,l.jsx)(n.code,{children:"java_binary"})," rule"]}),"\n",(0,l.jsx)(n.li,{children:"If those dependencies have dependencies of their own, they are added as well"}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["This exhaustive cascade of dependencies is referred to as the rule's ",(0,l.jsx)(n.em,{children:"transitive\nclosure"}),"."]}),"\n",(0,l.jsx)(n.h3,{id:"required-dependencies-are-always-built-first",children:"Required dependencies are always built first"}),"\n",(0,l.jsxs)(n.p,{children:["Buck2 guarantees that any dependencies that a rule lists that are required to\nbuild that rule are built successfully ",(0,l.jsx)(n.em,{children:"before"})," Buck2 builds the rule itself."]}),"\n",(0,l.jsxs)(n.p,{children:["Note that there can be special cases\u2014such as\n",(0,l.jsx)(n.a,{href:"../../prelude/rules/apple/apple_bundle",children:(0,l.jsx)(n.code,{children:"apple_bundle"})}),"\u2014where a rule's listed\ndependencies do not actually need to be built before the rule."]}),"\n",(0,l.jsx)(n.h3,{id:"visibility",children:"Visibility"}),"\n",(0,l.jsxs)(n.p,{children:["In order for a build rule to take a dependency on another build rule, the build\nrule on which the dependency is taken must be ",(0,l.jsx)(n.em,{children:"visible"})," to the build rule taking\nthe dependency."]}),"\n",(0,l.jsxs)(n.p,{children:["A build rule's ",(0,l.jsx)(n.code,{children:"visibility"})," argument is a list of\n",(0,l.jsx)(n.a,{href:"/docs/concepts/target_pattern",children:"build target pattern"}),"s that specify the rules that can take\nthat rule as a dependency. For more information about the concept of visibility\nin Buck2, see the ",(0,l.jsx)(n.a,{href:"/docs/concepts/visibility",children:"Visibility"})," topic."]}),"\n",(0,l.jsx)(n.h3,{id:"dependencies-define-a-graph",children:"Dependencies define a graph"}),"\n",(0,l.jsx)(n.p,{children:"Build rules and their dependencies define a directed acyclic graph (DAG). Buck2\nrequires this graph to be acyclic to make it possible to build independent\nsubgraphs in parallel."}),"\n",(0,l.jsx)(n.h2,{id:"how-to-handle-special-cases-genrules-and-macros",children:"How to handle special cases: genrules and macros"}),"\n",(0,l.jsxs)(n.p,{children:['Although Buck2 provides a rich set of built-in build rules for developers, it is\nnot able to address all possible needs. As an "escape hatch," Buck2 provides a\ncategory of generic build rules called ',(0,l.jsx)(n.em,{children:"genrules"}),"."]}),"\n",(0,l.jsx)(n.p,{children:"With genrules, you can perform arbitrary operations using shell scripts. The\ngenrules supported by Buck2 are:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"../../prelude/rules/core/genrule",children:(0,l.jsx)(n.code,{children:"genrule"})})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"../../prelude/rules/android/apk_genrule",children:(0,l.jsx)(n.code,{children:"apk_genrule"})})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"../../prelude/rules/cxx/cxx_genrule",children:(0,l.jsx)(n.code,{children:"cxx_genrule"})})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"../../prelude/rules/java/jar_genrule",children:(0,l.jsx)(n.code,{children:"jar_genrule"})})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"../../prelude/rules/js/js_bundle_genrule",children:(0,l.jsx)(n.code,{children:"js_bundle_genrule"})})}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"multiple-output-files-with-genrules",children:"Multiple output files with genrules"}),"\n",(0,l.jsxs)(n.p,{children:["In most cases, a build rule produces exactly one output file. However, with\ngenrules, you can specify an output ",(0,l.jsx)(n.em,{children:"directory"})," and write arbitrary files to\nthat directory."]}),"\n",(0,l.jsx)(n.h3,{id:"macros",children:"Macros"}),"\n",(0,l.jsx)(n.p,{children:"You can define functions that generate build rules. In general, this should not\nbe something that you need to do, but taking advantage of this option might help\nyou add needed functionality to Buck2 without editing its source code."}),"\n",(0,l.jsx)(n.h2,{id:"string-parameter-macros",children:"String parameter macros"}),"\n",(0,l.jsxs)(n.p,{children:["It is also possible to expand references to other rules within the ",(0,l.jsx)(n.code,{children:"cmd"}),", using\nthe builtin\n",(0,l.jsx)(n.a,{href:"../../rule_authors/string_parameter_macros",children:(0,l.jsx)(n.code,{children:"string parameter macros"})}),". All\nbuild rules expanded in the command are automatically considered to be\ndependencies of the ",(0,l.jsx)(n.code,{children:"genrule()"}),"."]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(o,{...e})}):o(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>d,x:()=>c});var s=i(96540);const l={},r=s.createContext(l);function d(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:d(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);