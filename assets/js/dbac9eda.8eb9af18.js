"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[48866],{28453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>d});var s=n(96540);const i={},r=s.createContext(i);function l(e){const t=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(r.Provider,{value:t},e.children)}},39493:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"prelude/rules/core/http_archive","title":"http_archive","description":"An http_archive() rule is used to download and extract archives from the Internet to be used as dependencies for other rules. These rules are downloaded by running fetch, or can be downloaded as part of build by setting .buckconfig","source":"@site/../docs/prelude/rules/core/http_archive.md","sourceDirName":"prelude/rules/core","slug":"/prelude/rules/core/http_archive","permalink":"/docs/prelude/rules/core/http_archive","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"ruleSidebar","previous":{"title":"genrule","permalink":"/docs/prelude/rules/core/genrule"},"next":{"title":"http_file","permalink":"/docs/prelude/rules/core/http_file"}}');var i=n(74848),r=n(28453);n(56289);const l={},d="http_archive",c={},a=[{value:"Function Signature",id:"function-signature",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Examples",id:"examples",level:3}];function o(e){const t={a:"a",code:"code",h1:"h1",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"http_archive",children:"http_archive"})}),"\n",(0,i.jsxs)(t.p,{children:["An ",(0,i.jsx)(t.code,{children:"http_archive()"})," rule is used to download and extract archives from the Internet to be used as dependencies for other rules. These rules are downloaded by running ",(0,i.jsx)(t.code,{children:"fetch"}),", or can be downloaded as part of ",(0,i.jsx)(t.code,{children:"build"})," by setting ",(0,i.jsx)(t.code,{children:".buckconfig"})]}),"\n",(0,i.jsx)(t.h3,{id:"function-signature",children:"Function Signature"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'def http_archive(\n    *,\n    name: str,\n    default_target_platform: None | str = None,\n    target_compatible_with: list[str] = [],\n    compatible_with: list[str] = [],\n    exec_compatible_with: list[str] = [],\n    visibility: list[str] = [],\n    within_view: list[str] = ["PUBLIC"],\n    metadata: OpaqueMetadata = {},\n    tests: list[str] = [],\n    modifiers: OpaqueMetadata = [],\n    _apple_platforms: dict[str, str] = {},\n    contacts: list[str] = [],\n    default_host_platform: None | str = None,\n    excludes: list[str] = [],\n    exec_deps: str = "prelude//http_archive/tools:exec_deps",\n    labels: list[str] = [],\n    licenses: list[str] = [],\n    out: None | str = None,\n    sha1: None | str = None,\n    sha256: None | str = None,\n    size_bytes: None | int = None,\n    strip_prefix: None | str = None,\n    sub_targets: list[str] | dict[str, list[str]] = [],\n    type: None | str = None,\n    urls: list[str] = [],\n    vpnless_urls: list[str] = [],\n) -> None\n'})}),"\n",(0,i.jsx)(t.h3,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"name"}),": (required)"]}),"\n",(0,i.jsx)(t.p,{children:"name of the target"}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"default_target_platform"}),": (defaults to: ",(0,i.jsx)(t.code,{children:"None"}),")"]}),"\n",(0,i.jsx)(t.p,{children:"specifies the default target platform, used when no platforms are specified on the command line"}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"target_compatible_with"}),": (defaults to: ",(0,i.jsx)(t.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(t.p,{children:"a list of constraints that are required to be satisfied for this target to be compatible with a configuration"}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"compatible_with"}),": (defaults to: ",(0,i.jsx)(t.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(t.p,{children:"a list of constraints that are required to be satisfied for this target to be compatible with a configuration"}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"exec_compatible_with"}),": (defaults to: ",(0,i.jsx)(t.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(t.p,{children:"a list of constraints that are required to be satisfied for this target to be compatible with an execution platform"}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"visibility"}),": (defaults to: ",(0,i.jsx)(t.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(t.p,{children:"a list of visibility patterns restricting what targets can depend on this one"}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"within_view"}),": (defaults to: ",(0,i.jsx)(t.code,{children:'["PUBLIC"]'}),")"]}),"\n",(0,i.jsx)(t.p,{children:"a list of visibility patterns restricting what this target can depend on"}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"metadata"}),": (defaults to: ",(0,i.jsx)(t.code,{children:"{}"}),")"]}),"\n",(0,i.jsx)(t.p,{children:"a key-value map of metadata associated with this target"}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"tests"}),": (defaults to: ",(0,i.jsx)(t.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(t.p,{children:"a list of targets that provide tests for this one"}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"modifiers"}),": (defaults to: ",(0,i.jsx)(t.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(t.p,{children:"an array of modifiers associated with this target"}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"contacts"}),": (defaults to: ",(0,i.jsx)(t.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(t.p,{children:"A list of organizational contacts for this rule. These could be individuals who you would contact in the event of a failure or other issue with the rule."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"contacts = [ 'Joe Sixpack', 'Erika Mustermann' ]\n"})}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"excludes"}),": (defaults to: ",(0,i.jsx)(t.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(t.p,{children:"An optional list of regex patterns. All file paths in the extracted archive which match any of the given patterns will be omitted."}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"exec_deps"}),": (defaults to: ",(0,i.jsx)(t.code,{children:'"prelude//http_archive/tools:exec_deps"'}),")"]}),"\n",(0,i.jsx)(t.p,{children:"When using http_archive as an anon target, the rule invoking the anon target needs to mirror this attribute into its own attributes, and forward the provider into the anon target invocation."}),"\n",(0,i.jsx)(t.p,{children:"When using http_archive normally not as an anon target, the\ndefault value is always fine."}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"labels"}),": (defaults to: ",(0,i.jsx)(t.code,{children:"[]"}),")"]}),"\n",(0,i.jsxs)(t.p,{children:["Set of arbitrary strings which allow you to annotate a ",(0,i.jsx)(t.a,{href:"https://buck2.build/docs/concepts/build_rule/",children:"build rule"})," with tags that can be searched for over an entire dependency tree using ",(0,i.jsx)(t.code,{children:"buck query()"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"licenses"}),": (defaults to: ",(0,i.jsx)(t.code,{children:"[]"}),")"]}),"\n",(0,i.jsxs)(t.p,{children:["Set of license files for this library. To get the list of license files for a given build rule and all of its dependencies, you can use ",(0,i.jsx)(t.a,{href:"https://buck2.build/docs/users/commands/query/",children:"buck query"})]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"out"}),": (defaults to: ",(0,i.jsx)(t.code,{children:"None"}),")"]}),"\n",(0,i.jsxs)(t.p,{children:["An optional name to call the directory that the downloaded artifact is extracted into. Buck will generate a default name if one is not provided that uses the ",(0,i.jsx)(t.code,{children:"name"})," of the rule."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"sha256"}),": (defaults to: ",(0,i.jsx)(t.code,{children:"None"}),")"]}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.a,{href:"//wikipedia.org/wiki/SHA-2",children:(0,i.jsx)(t.code,{children:"SHA-256"})})," hash of the downloaded artifact. Buck verifies this is correct and fails the fetch command if it doesn't match in order to guarantee repeatable builds."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"strip_prefix"}),": (defaults to: ",(0,i.jsx)(t.code,{children:"None"}),")"]}),"\n",(0,i.jsx)(t.p,{children:"If set, files under this path will be extracted to the root of the output directory. Siblings or cousins to this prefix will not be extracted at all."}),"\n",(0,i.jsx)(t.p,{children:"For example, if a tarball has the layout:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"foo/bar/bar-0.1.2/data.dat"}),"\n",(0,i.jsx)(t.li,{children:"foo/baz/baz-0.2.3"}),"\n",(0,i.jsx)(t.li,{children:"foo_prime/bar-0.1.2"}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["Only ",(0,i.jsx)(t.code,{children:"data.dat"})," will be extracted, and it will be extracted into the output\ndirectory specified in ",(0,i.jsx)(t.code,{children:"out"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"sub_targets"}),": (defaults to: ",(0,i.jsx)(t.code,{children:"[]"}),")"]}),"\n",(0,i.jsxs)(t.p,{children:["A list of filepaths within the archive to be made accessible as sub-targets. For example if we have an http_archive with ",(0,i.jsx)(t.code,{children:'name = "archive"'})," and ",(0,i.jsx)(t.code,{children:'sub_targets = ["src/lib.rs"]'}),", then other targets would be able to refer to that file as ",(0,i.jsx)(t.code,{children:'":archive[src/lib.rs]"'}),"."]}),"\n",(0,i.jsx)(t.p,{children:"Or, a dict of sub_target name to list of files to be in that subtarget.\nFor example, with"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:'http_archive(\n    name = "archive",\n    ...\n    sub_targets = {\n        "group_1": ["a.txt", "b.txt"],\n        "a.txt": ["a.txt"]\n    },\n)\n'})}),"\n",(0,i.jsxs)(t.p,{children:["... you get two sub targets: ",(0,i.jsx)(t.code,{children:":archive[group_1]"})," consisting of two files, and\n",(0,i.jsx)(t.code,{children:":archive[a.txt]"})," consisting of one file."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"type"}),": (defaults to: ",(0,i.jsx)(t.code,{children:"None"}),")"]}),"\n",(0,i.jsxs)(t.p,{children:["Normally, archive type is determined by the file's extension. If ",(0,i.jsx)(t.code,{children:"type"})," is set, then autodetection is overridden, and the specified type is used instead."]}),"\n",(0,i.jsxs)(t.p,{children:["Supported values are: ",(0,i.jsx)(t.code,{children:"zip"}),", ",(0,i.jsx)(t.code,{children:"tar"}),", ",(0,i.jsx)(t.code,{children:"tar.gz"}),",\n",(0,i.jsx)(t.code,{children:"tar.bz2"}),", ",(0,i.jsx)(t.code,{children:"tar.xz"}),", and ",(0,i.jsx)(t.code,{children:"tar.zst"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"urls"}),": (defaults to: ",(0,i.jsx)(t.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(t.p,{children:'A list of urls to attempt to download from. They are tried in order, and subsequent ones are only tried if the download fails. If validation fails, a new URL is not used. Supported protocols are "http", "https", and "mvn".'}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"vpnless_urls"}),": (defaults to: ",(0,i.jsx)(t.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(t.p,{children:"Additional URLs from which this resource can be downloaded when off VPN. Meta-internal only."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"examples",children:"Examples"}),"\n",(0,i.jsxs)(t.p,{children:["Using ",(0,i.jsx)(t.code,{children:"http_archive()"}),", third party packages can be downloaded from\nan ",(0,i.jsx)(t.code,{children:"https"})," URL and used in other library types."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"\nhttp_archive(\n  name = 'thrift-archive',\n  urls = [\n    'https://internal-mirror.example.com/bin/thrift-compiler-0.1.tar.gz.badextension',\n  ],\n  sha256 = '7baa80df284117e5b945b19b98d367a85ea7b7801bd358ff657946c3bd1b6596',\n  type='tar.gz',\n  strip_prefix='thrift-compiler-0.1'\n)\n\ngenrule(\n  name = 'thrift-compiler-bin',\n  out = 'thrift',\n  cmd = 'cp $(location :thrift-archive)/bin/thrift $OUT',\n  executable = True,\n)\n\ngenrule(\n  name=\"my-thrift-lib-cpp2\",\n  cmd=\"$(exe :thrift-compiler-bin) --gen cpp2 -o $OUT $(location //:thrift-file)\",\n  out=\"gen-cpp2\",\n)\n\n"})})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}}}]);