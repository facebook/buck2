"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[61050],{28453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>c});var t=s(96540);const i={},r=t.createContext(i);function l(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),t.createElement(r.Provider,{value:n},e.children)}},81629:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"prelude/rules/cxx/cxx_genrule","title":"cxx_genrule","description":"A cxxgenrule() enables you to run shell commands as part of the Buck build process. A cxxgenrule() exposes - through a set of string parameter macros and variables - information about the tools and configuration options used by the Buck environment, specifically those related to the C/C++ toolchain.","source":"@site/../docs/prelude/rules/cxx/cxx_genrule.md","sourceDirName":"prelude/rules/cxx","slug":"/prelude/rules/cxx/cxx_genrule","permalink":"/docs/prelude/rules/cxx/cxx_genrule","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"ruleSidebar","previous":{"title":"cxx_binary","permalink":"/docs/prelude/rules/cxx/cxx_binary"},"next":{"title":"cxx_library","permalink":"/docs/prelude/rules/cxx/cxx_library"}}');var i=s(74848),r=s(28453);s(56289);const l={},c="cxx_genrule",o={},a=[{value:"Details",id:"details",level:3},{value:"Function Signature",id:"function-signature",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Macros",id:"macros",level:4},{value:"Parameterized Macros",id:"parameterized-macros",level:4},{value:"Variables",id:"variables",level:4}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"cxx_genrule",children:"cxx_genrule"})}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.code,{children:"cxx_genrule()"})," enables you to run shell commands as part of the Buck build process. A ",(0,i.jsx)(n.code,{children:"cxx_genrule()"})," exposes - through a set of string parameter macros and variables - information about the tools and configuration options used by the Buck environment, specifically those related to the C/C++ toolchain."]}),"\n",(0,i.jsx)(n.h3,{id:"details",children:"Details"}),"\n",(0,i.jsxs)(n.p,{children:["The information exposed through these tools and configuration options is a reflection of:\nBuck's built-in settings,\nthe settings in ",(0,i.jsx)(n.code,{children:".buckconfig"}),"\nand ",(0,i.jsx)(n.code,{children:".buckconfig.local"}),",\nand the result of various command-line overrides specified through\nthe ",(0,i.jsx)(n.code,{children:"common_parameters"})," command-line option."]}),"\n",(0,i.jsxs)(n.p,{children:["This information is available only\nto the shell commands specified in the ",(0,i.jsx)(n.code,{children:"cxx_genrule"}),".\nThe information is not available to other arguments of the rule."]}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.code,{children:"cxx_genrule()"})," can be an input to\nanother ",(0,i.jsx)(n.code,{children:"cxx_genrule()"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Note that if you specify the ",(0,i.jsx)(n.code,{children:"cxx_genrule"})," as a command-line\ntarget to ",(0,i.jsx)(n.code,{children:"buck build"}),", you must include a platform flavor.\nFor example:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"buck build :cxx_gr_name#iphonesimulator-x86_64\n"})}),"\n",(0,i.jsx)(n.p,{children:"You could also just specify the default platform flavor explicitly:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"buck build :cxx_gr_name#default\n"})}),"\n",(0,i.jsx)(n.h3,{id:"function-signature",children:"Function Signature"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'def cxx_genrule(\n    *,\n    name: str,\n    default_target_platform: None | str = None,\n    target_compatible_with: list[str] = [],\n    compatible_with: list[str] = [],\n    exec_compatible_with: list[str] = [],\n    visibility: list[str] = [],\n    within_view: list[str] = ["PUBLIC"],\n    metadata: OpaqueMetadata = {},\n    tests: list[str] = [],\n    modifiers: OpaqueMetadata = [],\n    _apple_platforms: dict[str, str] = {},\n    _build_only_native_code: bool = select({"prelude//android/constraints:build_only_native_code": True, "DEFAULT": False}),\n    _cxx_toolchain: str = "gh_facebook_buck2_shims_meta//:cxx",\n    _exec_os_type: str = "prelude//os_lookup/targets:os_lookup",\n    _genrule_toolchain: str = "gh_facebook_buck2_shims_meta//:genrule",\n    always_print_stderr: bool = False,\n    bash: None | str = None,\n    cacheable: None | bool = None,\n    cmd: None | str = None,\n    cmd_exe: None | str = None,\n    contacts: list[str] = [],\n    default_host_platform: None | str = None,\n    default_outs: None | list[str] = None,\n    enable_sandbox: None | bool = None,\n    env: dict[str, str] = {},\n    environment_expansion_separator: None | str = None,\n    labels: list[str] = [],\n    licenses: list[str] = [],\n    metadata_env_var: None | str = None,\n    metadata_path: None | str = None,\n    need_android_tools: bool = False,\n    no_outputs_cleanup: bool = False,\n    out: None | str = None,\n    outs: None | dict[str, list[str]] = None,\n    remote: None | bool = None,\n    remote_execution_dependencies: list[dict[str, str]] = [],\n    srcs: list[str] | dict[str, str] = [],\n    type: None | str = None,\n    uses_experimental_content_based_path_hashing: bool = False,\n    weight: None | int = None,\n) -> None\n'})}),"\n",(0,i.jsx)(n.h3,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"name"}),": (required)"]}),"\n",(0,i.jsx)(n.p,{children:"name of the target"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"default_target_platform"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"None"}),")"]}),"\n",(0,i.jsx)(n.p,{children:"specifies the default target platform, used when no platforms are specified on the command line"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"target_compatible_with"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(n.p,{children:"a list of constraints that are required to be satisfied for this target to be compatible with a configuration"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"compatible_with"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(n.p,{children:"a list of constraints that are required to be satisfied for this target to be compatible with a configuration"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"exec_compatible_with"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(n.p,{children:"a list of constraints that are required to be satisfied for this target to be compatible with an execution platform"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"visibility"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(n.p,{children:"a list of visibility patterns restricting what targets can depend on this one"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"within_view"}),": (defaults to: ",(0,i.jsx)(n.code,{children:'["PUBLIC"]'}),")"]}),"\n",(0,i.jsx)(n.p,{children:"a list of visibility patterns restricting what this target can depend on"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"metadata"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"{}"}),")"]}),"\n",(0,i.jsx)(n.p,{children:"a key-value map of metadata associated with this target"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"tests"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(n.p,{children:"a list of targets that provide tests for this one"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"modifiers"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(n.p,{children:"an array of modifiers associated with this target"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"bash"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"None"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:["A platform-specific version of the shell command parameter ",(0,i.jsx)(n.code,{children:"cmd"}),". It runs on Linux and UNIX systems\u2014including OSX\u2014on which ",(0,i.jsx)(n.code,{children:"bash"})," is installed. It has a higher priority than ",(0,i.jsx)(n.code,{children:"cmd"}),". The ",(0,i.jsx)(n.code,{children:"bash"})," argument is run with ",(0,i.jsx)(n.code,{children:"/usr/bin/env bash -c"}),". It has access to the same set of macros and variables as the ",(0,i.jsx)(n.code,{children:"cmd"})," argument."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"cmd"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"None"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:["The shell command to run to generate the output file. It is the fallback of ",(0,i.jsx)(n.code,{children:"bash"})," and ",(0,i.jsx)(n.code,{children:"cmd_exe"}),". The shell command can access information about the buck build environment through a set of ",(0,i.jsx)(n.em,{children:"macros"}),", ",(0,i.jsx)(n.em,{children:"parameterized macros"}),", and ",(0,i.jsx)(n.em,{children:"variables"}),"."]}),"\n",(0,i.jsx)(n.h4,{id:"macros",children:"Macros"}),"\n",(0,i.jsx)(n.p,{children:"The following macros are available to the shell command and are\naccessed using the following syntax."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"$(<macro>)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"$(cc)\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"$(cc)"}),"\nPath to the C compiler."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"$(cxx)"}),"\nPath to the C++ compiler."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"$(cflags)"}),"\nFlags passed to the C compiler."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"$(cppflags)"}),"\nFlags passed to the C preprocessor."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"$(cxxflags)"}),"\nFlags passed to the C++ compiler."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"$(cxxppflags)"}),"\nFlags to pass to the C++ preprocessor."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"$(ld)"}),"\nPath to the linker."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"$(ldflags-pic)"}),"\nFlags passed to the linker for binaries that use\nposition-independent code (PIC)."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"$(ldflags-pic-filter <pattern>)"}),"\nFlags passed to the linker for binaries that use position-independent code (PIC).\nUse the ",(0,i.jsx)(n.em,{children:"pattern"})," parameter to specify a regular expression that matches the build targets that use these flags."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"$(ldflags-shared)"}),"\nFlags passed to the linker for shared libraries, such as dynamic-link libraries (DLLs)."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"$(ldflags-shared-filter <pattern>)"}),"\nFlags passed to the linker for shared libraries, such as dynamic-link libraries (DLLs).\nUse the ",(0,i.jsx)(n.em,{children:"pattern"})," parameter to specify a regular expression that matches the build targets that use these flags."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"$(ldflags-static)"}),"\nFlags passed to the linker for statically-linked libraries."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"$(ldflags-static-filter <pattern>)"}),"\nFlags passed to the linker for statically-linked libraries.\nUse the ",(0,i.jsx)(n.em,{children:"pattern"})," parameter to specify a regular expression that matches the build targets that use these flags."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"$(platform-name)"}),"\nThe platform flavor with which this ",(0,i.jsx)(n.code,{children:"cxx_genrule"})," was specified."]}),"\n",(0,i.jsx)(n.h4,{id:"parameterized-macros",children:"Parameterized Macros"}),"\n",(0,i.jsxs)(n.p,{children:["It is also possible to expand references to other rules within the\nshell command, using the following subset of the\nbuiltin ",(0,i.jsx)(n.code,{children:"string parameter macros"}),"\n.\nNote that all build rules expanded in the command are automatically\nconsidered to be dependencies of the ",(0,i.jsx)(n.code,{children:"genrule()"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Note that the paths returned by these macros are ",(0,i.jsx)(n.em,{children:"absolute"})," paths. You should convert these paths to be relative paths before\nembedding them in, for example, a shell script or batch file. Using\nrelative paths ensures that your builds are ",(0,i.jsx)(n.em,{children:"hermetic"}),", that\nis, they are reproducible across different machine environments."]}),"\n",(0,i.jsxs)(n.p,{children:["Additionally, if you embed these paths in a shell script, you should\nexecute that script using the ",(0,i.jsx)(n.code,{children:"sh_binary()"})," rule and include\nthe targets for these paths in the ",(0,i.jsx)(n.code,{children:"resources"})," argument of\nthat ",(0,i.jsx)(n.code,{children:"sh_binary"})," rule. These are the same targets that you\npass to the string parameter macros."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"$(exe //path/to:target)"}),"\nExpands to the commands necessary to run the executable\ngenerated by the specified build rule. For a C++ executable, this\nwill typically just be the name of the output executable itself,\nsuch as ",(0,i.jsx)(n.code,{children:"main"}),". If the specified build rule does not generate an\nexecutable output, an exception will be thrown and the build will\nfail."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"$(location //path/to:target)"}),"\nExpands to the path of the output of the build rule. This\nmeans that you can refer to these without needing to be aware of\nhow Buck is storing data on the disk mid-build."]}),"\n",(0,i.jsx)(n.h4,{id:"variables",children:"Variables"}),"\n",(0,i.jsx)(n.p,{children:"Finally, Buck adds the following variables to the environment in\nwhich the shell command runs. They are accessed using the following syntax.\nNote the use of braces rather than parentheses."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"${<variable>}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"${SRCS}\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"${SRCS}"}),"\nA string expansion of the ",(0,i.jsx)(n.code,{children:"srcs"})," argument delimited by\nthe ",(0,i.jsx)(n.code,{children:"environment_expansion_separator"})," argument where each element\nof ",(0,i.jsx)(n.code,{children:"srcs"})," will be translated into an absolute path."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"${SRCDIR}"}),"\nThe absolute path to the to which sources are copied\nprior to running the command."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"${OUT}"}),"\nThe output file for the ",(0,i.jsx)(n.code,{children:"genrule()"}),". The file\nspecified by this variable must always be written by this\ncommand. If not, the execution of this rule will be considered a\nfailure, halting the build process."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"${TMP}"}),"\nA temporary directory which can be used for intermediate results and will not be\nbundled into the output."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"cmd_exe"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"None"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:["A platform-specific version of the shell command parameter ",(0,i.jsx)(n.code,{children:"cmd"}),". It runs on Windows and has a higher priority than ",(0,i.jsx)(n.code,{children:"cmd"}),". The ",(0,i.jsx)(n.code,{children:"cmd_exe"})," argument is run with ",(0,i.jsx)(n.code,{children:"cmd.exe /v:off /c"}),". It has access to the same set of macros and variables as the ",(0,i.jsx)(n.code,{children:"cmd"})," argument."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"contacts"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(n.p,{children:"A list of organizational contacts for this rule. These could be individuals who you would contact in the event of a failure or other issue with the rule."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"contacts = [ 'Joe Sixpack', 'Erika Mustermann' ]\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"enable_sandbox"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"None"}),")"]}),"\n",(0,i.jsx)(n.p,{children:"Whether this target should be executed in a sandbox or not."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"env"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"{}"}),")"]}),"\n",(0,i.jsx)(n.p,{children:"A map of variables to be set in the environment where the shell command is run."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"environment_expansion_separator"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"None"}),")"]}),"\n",(0,i.jsx)(n.p,{children:"The delimiter between paths in environment variables, such as SRCS, that can contain multiple paths. It can be useful to specify this parameter if the paths could contain spaces."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"labels"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:["Set of arbitrary strings which allow you to annotate a ",(0,i.jsx)(n.a,{href:"https://buck2.build/docs/concepts/build_rule/",children:"build rule"})," with tags that can be searched for over an entire dependency tree using ",(0,i.jsx)(n.code,{children:"buck query()"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"licenses"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:["Set of license files for this library. To get the list of license files for a given build rule and all of its dependencies, you can use ",(0,i.jsx)(n.a,{href:"https://buck2.build/docs/users/commands/query/",children:"buck query"})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"out"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"None"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:["The name of the output file or directory. The complete path to this argument is provided to the shell command through the ",(0,i.jsx)(n.code,{children:"OUT"})," environment variable."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"srcs"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:["Either a list or a map of the source files which Buck makes available to the shell command at the path in the ",(0,i.jsx)(n.code,{children:"SRCDIR"})," environment variable. If you specify a list, the source files are the names in the list. If you specify a map, the source files are made available as the names in the keys of the map, where the values of the map are the original source file names."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"type"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"None"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:["Specifies the ",(0,i.jsx)(n.em,{children:"type"}),' of this genrule. This is used for logging and is particularly useful for grouping genrules that share an underlying logical "type".']}),"\n",(0,i.jsxs)(n.p,{children:["For example, if you have the following ",(0,i.jsx)(n.code,{children:"cxx_genrule"})," defined\nin the root directory of your Buck project"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"cxx_genrule(\n  name = 'cxx_gen',\n  type = 'epilog',\n  cmd  = 'touch finish.txt; cp finish.txt $OUT',\n  out  = 'finish.txt'\n)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["then the following ",(0,i.jsx)(n.code,{children:"buck query"})," command"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"buck query \"attrfilter( type, 'epilog', '//...' )\"\n"})}),"\n",(0,i.jsx)(n.p,{children:"returns"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"//:cxx_gen\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"weight"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"None"}),")"]}),"\n",(0,i.jsx)(n.p,{children:"How many local slots these genrule should take when executing locally."}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);