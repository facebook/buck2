"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[50294],{28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>a});var s=n(96540);const i={},o=s.createContext(i);function r(e){const t=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(o.Provider,{value:t},e.children)}},35479:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"users/how_tos/modifiers_target","title":"Add configuration modifiers to a specific target","description":"Modifiers can be added to individual targets via the modifiers attribute which","source":"@site/../docs/users/how_tos/modifiers_target.md","sourceDirName":"users/how_tos","slug":"/users/how_tos/modifiers_target","permalink":"/docs/users/how_tos/modifiers_target","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"modifiers_target","title":"Add configuration modifiers to a specific target"},"sidebar":"main","previous":{"title":"Add configuration modifiers to entire directories","permalink":"/docs/users/how_tos/modifiers_package"},"next":{"title":"Specify configuration modifiers from the CLI","permalink":"/docs/users/how_tos/modifiers_cli"}}');var i=n(74848),o=n(28453);const r={id:"modifiers_target",title:"Add configuration modifiers to a specific target"},a=void 0,d={},c=[];function l(e){const t={a:"a",code:"code",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.p,{children:["Modifiers can be added to individual targets via the ",(0,i.jsx)(t.code,{children:"modifiers"})," attribute which\nis exposed by all rules (this is handled by Buck2 itself, so rule authors do not\nhave to add it themselves)."]}),"\n",(0,i.jsxs)(t.p,{children:["For example, lets assume that we have a ",(0,i.jsx)(t.code,{children:"release_package"})," rule that references\nvarious ",(0,i.jsx)(t.code,{children:"dep"}),"s and packages them, and that our\n",(0,i.jsxs)(t.a,{href:"/docs/users/how_tos/modifiers_package",children:[(0,i.jsx)(t.code,{children:"PACKAGE"})," file defaults our build mode to debug"]}),". We\ncould add the ",(0,i.jsx)(t.code,{children:"release"})," modifier to our artifact target to build all\ndependencies in release mode rather than debug:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'release_package(\n    name = "my_package",\n    binaries = [\n        ":my_cxx_bin",\n        ":my_rust_bin",\n    ],\n    modifiers = [\n        "//constraints:release",\n    ],\n)\n'})}),"\n",(0,i.jsx)(t.p,{children:"As another example, imagine that we have a constraint that controls whether we\nuse real or simulated IO:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'constraint_setting(name = "io_mode")\n\nconstraint_value(\n    name = "real_io",\n    constraint_setting = ":io_mode",\n)\n\nconstraint_value(\n    name = "simulated_io",\n    constraint_setting = ":io_mode",\n)\n'})}),"\n",(0,i.jsxs)(t.p,{children:["The default IO mode would be ",(0,i.jsx)(t.code,{children:"real_io"}),", but we would like to override it for a\nspecific test:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'go_test(\n    name = "simulated_io_test",\n    srcs = ["test.go"],\n    modifiers = ["//constraints:simulated_io"],\n)\n'})})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}}}]);