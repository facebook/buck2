# Copyright (c) Meta Platforms, Inc. and affiliates.
#
# This source code is licensed under both the MIT license found in the
# LICENSE-MIT file in the root directory of this source tree and the Apache
# License, Version 2.0 found in the LICENSE-APACHE file in the root directory
# of this source tree.

load("@prelude//cfg/modifier:conditional_modifier.bzl", _get_modifier_info = "get_modifier_info")
load("@prelude//cfg/modifier:types.bzl", "ConditionalModifierInfo", "Modifier", "ModifierInfo")
load("@prelude//configurations:util.bzl", "util")

_TARGETS = [
    "ovr_config//cpu/constraints:cpu",
    "ovr_config//cpu:x86_64",
    "ovr_config//cpu/constraints:x86_64",
    "ovr_config//cpu/constraints:arm64",
    "ovr_config//os/constraints:os",
    "ovr_config//os:linux",
    "ovr_config//os/constraints:linux",
    "ovr_config//os/constraints:macos",
    "ovr_config//os/constraints:windows",
    "ovr_config//build_mode/constraints:san",
    "ovr_config//build_mode/constraints:no-san",
    "ovr_config//build_mode/constraints:asan",
    "ovr_config//build_mode/constraints:asan-ubsan",
    "ovr_config//build_mode/constraints:hwasan",
    "ovr_config//build_mode/constraints:tsan",
    # TODO: This will probably get broken by updates to clang constraints.
    # Figure out how to handle this.
    "ovr_config//toolchain/clang/constraints:15",
    "ovr_config//toolchain/clang/constraints:17",
]

ALIASES = struct(
    # OS
    linux = "ovr_config//os:linux",
    macos = "ovr_config//os:macos",
    windows = "ovr_config//os:windows",
    # CPU
    x86_64 = "ovr_config//cpu:x86_64",
    arm64 = "ovr_config//cpu:arm64",
    # Multiple modifiers
    linux_x86_64 = [
        "ovr_config//os:linux",
        "ovr_config//cpu:x86_64",
    ],
)

TestRefs = record(
    _refs = dict[str, ProviderCollection],
    get = field(typing.Callable),
    make_cfg = field(typing.Callable),
    get_modifier_info = field(typing.Callable),
)

def _get_providers(ctx: bxl.Context, targets: list[str]) -> dict[str, ProviderCollection]:
    analysis_result = ctx.analysis(targets)
    return {str(target.raw_target()): v.providers() for target, v in analysis_result.items()}

def get_test_refs(ctx: bxl.Context) -> TestRefs:
    def get(target: str) -> ProviderCollection:
        return self._refs[target]

    def make_cfg(targets: list[str]) -> ConfigurationInfo:
        return util.configuration_info_union([self._refs[target][ConfigurationInfo] for target in targets])

    def get_modifier_info(modifier: Modifier) -> ModifierInfo:
        key_to_provider = {
            target: providers[ConfigurationInfo]
            for target, providers in self._refs.items()
            if ConfigurationInfo in providers
        }
        value_to_provider = {
            target: providers[ConditionalModifierInfo]
            for target, providers in self._refs.items()
            if ConditionalModifierInfo in providers
        }
        conditional_modifier_info = _get_modifier_info(
            modifier,
            key_to_provider,
            value_to_provider,
        )
        return conditional_modifier_info.inner

    self = TestRefs(
        _refs = _get_providers(ctx, _TARGETS),
        get = get,
        make_cfg = make_cfg,
        get_modifier_info = get_modifier_info,
    )
    return self
