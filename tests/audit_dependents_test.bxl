# Copyright (c) Meta Platforms, Inc. and affiliates.
#
# This source code is licensed under both the MIT license found in the
# LICENSE-MIT file in the root directory of this source tree and the Apache
# License, Version 2.0 found in the LICENSE-APACHE file in the root directory
# of this source tree.

load("@prelude//utils:set.bzl", "set")
load(":dependencies_test_util.bzl", "rule_list_regex")

def _audit_dependents_test(ctx: BxlContext, source_target: TargetLabel, target: TargetLabel, allowlist_patterns: list[str]):
    """Checks dependents of a given target in a dependency graph of a source target.

       Test passes if only targets that match allowlist_patterns have direct dependency on target (in source_target's target universe).
       The logic for non-bxl version: https://fburl.com/code/b7sbezop
    """

    cquery = ctx.cquery()
    reverse_deps = cquery.eval(
        "rdeps({}, {}, 1) - set({} {})".format(source_target, target, source_target, target),
        target_universe = [str(source_target)],
    )
    allowlist_regex = rule_list_regex(allowlist_patterns)
    blocklisted = filter(lambda target: not regex_match(allowlist_regex, str(target.label.raw_target())), reverse_deps)
    if len(blocklisted) > 0:
        res = set([str(target.label.raw_target()) for target in blocklisted])
        fail("Disallowed rules were found between {} and {}: {}!".format(source_target, target, res.list()))

def _impl_audit_dependents_test(ctx: BxlContext):
    _audit_dependents_test(ctx, ctx.cli_args.source_target, ctx.cli_args.target, ctx.cli_args.allowlist_patterns)

test = bxl_main(
    cli_args = {
        "allowlist_patterns": cli_args.list(cli_args.string()),
        "source_target": cli_args.target_label(),
        "target": cli_args.target_label(),
    },
    impl = _impl_audit_dependents_test,
)
