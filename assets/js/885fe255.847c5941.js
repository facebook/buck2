"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6405],{28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>l});var s=t(96540);const i={},r=s.createContext(i);function o(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:n},e.children)}},31286:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"prelude/rules/android/robolectric_test","title":"robolectric_test","description":"A robolectrictest() rule is used to define a set of .java files that contain tests to run via JUnit with Robolectric test runner. It extends from javatest() rule.","source":"@site/../docs/prelude/rules/android/robolectric_test.md","sourceDirName":"prelude/rules/android","slug":"/prelude/rules/android/robolectric_test","permalink":"/docs/prelude/rules/android/robolectric_test","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"ruleSidebar","previous":{"title":"prebuilt_native_library","permalink":"/docs/prelude/rules/android/prebuilt_native_library"},"next":{"title":"supermodule_target_graph","permalink":"/docs/prelude/rules/android/supermodule_target_graph"}}');var i=t(74848),r=t(28453);t(56289);const o={},l="robolectric_test",c={},a=[{value:"Function Signature",id:"function-signature",level:3},{value:"Parameters",id:"parameters",level:3}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"robolectric_test",children:"robolectric_test"})}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.code,{children:"robolectric_test()"})," rule is used to define a set of ",(0,i.jsx)(n.code,{children:".java"})," files that contain tests to run via JUnit with Robolectric test runner. It extends from ",(0,i.jsx)(n.code,{children:"java_test()"})," rule."]}),"\n",(0,i.jsx)(n.h3,{id:"function-signature",children:"Function Signature"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'def robolectric_test(\n    *,\n    name: str,\n    default_target_platform: None | str = None,\n    target_compatible_with: list[str] = [],\n    compatible_with: list[str] = [],\n    exec_compatible_with: list[str] = [],\n    visibility: list[str] = [],\n    within_view: list[str] = ["PUBLIC"],\n    metadata: OpaqueMetadata = {},\n    tests: list[str] = [],\n    modifiers: OpaqueMetadata = [],\n    _android_toolchain: str = "gh_facebook_buck2_shims_meta//:android",\n    _apple_platforms: dict[str, str] = {},\n    _build_only_native_code: bool = select({"prelude//android/constraints:build_only_native_code": True, "DEFAULT": False}),\n    _exec_os_type: str = "prelude//os_lookup/targets:os_lookup",\n    _inject_test_env: str = "prelude//test/tools:inject_test_env",\n    _is_building_android_binary: bool = False,\n    _java_test_toolchain: str = "gh_facebook_buck2_shims_meta//:java_test",\n    _java_toolchain: str = "gh_facebook_buck2_shims_meta//:java_for_host_test",\n    _kotlin_toolchain: str = "gh_facebook_buck2_shims_meta//:kotlin",\n    _remote_test_execution_toolchain: str = "gh_facebook_buck2_shims_meta//:remote_test_execution",\n    _test_toolchain: str = "gh_facebook_buck2_shims_meta//:test",\n    abi_generation_mode: None | str = None,\n    android_optional_jars: None | list[str] = None,\n    annotation_processing_tool: None | str = None,\n    annotation_processor_deps: list[str] = [],\n    annotation_processor_params: list[str] = [],\n    annotation_processors: list[str] = [],\n    compiled_resource_apks: list[str] = [],\n    contacts: list[str] = [],\n    cxx_library_allowlist: list[str] = [],\n    default_cxx_platform: None | str = None,\n    default_host_platform: None | str = None,\n    deps: list[str] = [],\n    enable_used_classes: bool = True,\n    env: dict[str, str] = {},\n    exported_deps: list[str] = [],\n    exported_provided_deps: list[str] = [],\n    extra_arguments: list[str] = [],\n    extra_kotlinc_arguments: list[str] = [],\n    fork_mode: str = "none",\n    friend_paths: list[str] = [],\n    incremental: bool = True,\n    jar_postprocessor: None | str = None,\n    java: None | str = None,\n    java_agents: list[str] = [],\n    java_version: None | str = None,\n    javac: None | str = None,\n    k2: bool = False,\n    kotlin_compiler_plugins: list[(str, dict[str, str])] = [],\n    labels: list[str] = [],\n    language: None | str = None,\n    licenses: list[str] = [],\n    locales_for_binary_resources: list[str] = [],\n    manifest: None | str = None,\n    manifest_entries: dict[str, typing.Any] = {},\n    manifest_file: None | str = None,\n    manifest_skeleton: None | str = None,\n    maven_coords: None | str = None,\n    never_mark_as_unused_dependency: None | bool = None,\n    non_exec_dep_plugins_deprecated: list[str | (str, list[str])] = [],\n    on_unused_dependencies: None | str = None,\n    plugins: list[str | (str, list[str])] = [],\n    preferred_density_for_binary_resources: None | str = None,\n    proguard_config: None | str = None,\n    provided_deps: list[str] = [],\n    provided_deps_query: None | str = None,\n    remote_execution: None | str | dict[str, None | bool | int | str | list[dict[str, str]] | dict[str, str | list[str]]] = None,\n    remove_classes: list[str] = [],\n    required_for_source_only_abi: bool = False,\n    resource_stable_ids: None | str = None,\n    resource_union_package: None | str = None,\n    resources: list[str] = [],\n    resources_root: None | str = None,\n    robolectric_runtime_dependencies: list[str] = [],\n    robolectric_runtime_dependency: None | str = None,\n    run_test_separately: bool = False,\n    runtime_deps: list[str] = [],\n    source: None | str = None,\n    source_abi_verification_mode: None | str = None,\n    source_only_abi_deps: list[str] = [],\n    srcs: list[str] = [],\n    std_err_log_level: None | int | str = None,\n    std_out_log_level: None | int | str = None,\n    target: None | str = None,\n    test_case_timeout_ms: None | int = None,\n    test_class_names_file: None | str = None,\n    test_rule_timeout_ms: None | int = None,\n    test_type: None | str = None,\n    unbundled_resources_root: None | str = None,\n    use_cxx_libraries: None | bool = None,\n    use_dependency_order_classpath: None | bool = None,\n    use_jvm_abi_gen: None | bool = None,\n    used_as_dependency_deprecated_do_not_use: bool = False,\n    uses_content_based_paths_for_classic_java: bool = select({"DEFAULT": False}),\n    uses_content_based_paths_for_kotlincd: bool = select({"DEFAULT": False}),\n    vm_args: list[str] = [],\n) -> None\n'})}),"\n",(0,i.jsx)(n.h3,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"name"}),": (required)"]}),"\n",(0,i.jsx)(n.p,{children:"name of the target"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"default_target_platform"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"None"}),")"]}),"\n",(0,i.jsx)(n.p,{children:"specifies the default target platform, used when no platforms are specified on the command line"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"target_compatible_with"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(n.p,{children:"a list of constraints that are required to be satisfied for this target to be compatible with a configuration"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"compatible_with"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(n.p,{children:"a list of constraints that are required to be satisfied for this target to be compatible with a configuration"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"exec_compatible_with"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(n.p,{children:"a list of constraints that are required to be satisfied for this target to be compatible with an execution platform"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"visibility"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(n.p,{children:"a list of visibility patterns restricting what targets can depend on this one"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"within_view"}),": (defaults to: ",(0,i.jsx)(n.code,{children:'["PUBLIC"]'}),")"]}),"\n",(0,i.jsx)(n.p,{children:"a list of visibility patterns restricting what this target can depend on"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"metadata"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"{}"}),")"]}),"\n",(0,i.jsx)(n.p,{children:"a key-value map of metadata associated with this target"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"tests"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(n.p,{children:"a list of targets that provide tests for this one"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"modifiers"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(n.p,{children:"an array of modifiers associated with this target"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"contacts"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(n.p,{children:"A list of organizational contacts for this rule. These could be individuals who you would contact in the event of a failure or other issue with the rule."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"contacts = [ 'Joe Sixpack', 'Erika Mustermann' ]\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"cxx_library_allowlist"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(n.p,{children:"List of cxx_library targets to build, if use_cxx_libraries is true. This can be useful if some dependencies are Android-only and won't build for the test host platform."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"enable_used_classes"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"True"}),")"]}),"\n",(0,i.jsx)(n.p,{children:"Deprecated: for an experiment only, will be removed"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"extra_kotlinc_arguments"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(n.p,{children:"List of additional arguments to pass into the Kotlin compiler."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"incremental"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"True"}),")"]}),"\n",(0,i.jsx)(n.p,{children:"Enables Kotlin incremental compilation."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"javac"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"None"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:["Specifies the Java compiler program to use for this rule. The value is a source path or an execution dep (e.g., //foo/bar",":bar",'). Overrides the value in "javac" in the "tools" section of ',(0,i.jsx)(n.code,{children:".buckconfig"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"k2"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"False"}),")"]}),"\n",(0,i.jsx)(n.p,{children:"Enables the Kotlin K2 compiler."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"kotlin_compiler_plugins"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:["Use this to specify ",(0,i.jsx)(n.a,{href:"https://kotlinlang.org/docs/reference/compiler-plugins.html",children:"Kotlin compiler plugins"})," to use when compiling this library. This takes a map, with each entry specify one plugin. Entry's key is plugin source path, and value is a map of plugin option key value pair. Unlike ",(0,i.jsx)(n.code,{children:"extra_kotlinc_arguments"}),", these can be ",(0,i.jsx)(n.em,{children:"source paths"}),", not just strings."]}),"\n",(0,i.jsxs)(n.p,{children:["A special option value is\n",(0,i.jsx)(n.code,{children:"__codegen_dir__"}),", in which case Buck will provide a default codegen folder's path as\noption value instead.\nE.g."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'fbcode/buck2/prelude/decls/jvm_common.bzl\nkotlin_compiler_plugins = {\n    "somePluginSourcePath": {\n        "plugin:somePluginId:somePluginOptionKey": "somePluginOptionValue",\n        "plugin:somePluginId:someDirectoryRelatedOptionKey": "__codegen_dir__",\n    },\n},\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Each plugin source path will be prefixed with ",(0,i.jsx)(n.code,{children:"-Xplugin="})," and passed as extra\narguments to the compiler. Plugin options will be appended after its plugin with ",(0,i.jsx)(n.code,{children:"-P"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["A specific example is, if you want to use ",(0,i.jsx)(n.a,{href:"https://github.com/Kotlin/kotlinx.serialization",children:"kotlinx.serialization"}),"\nwith ",(0,i.jsx)(n.code,{children:"kotlin_library()"}),", you need to specify ",(0,i.jsx)(n.code,{children:"kotlinx-serialization-compiler-plugin.jar"})," under ",(0,i.jsx)(n.code,{children:"kotlin_compiler_plugins"})," and ",(0,i.jsx)(n.code,{children:"kotlinx-serialization-runtime.jar"})," (which you may have to fetch from Maven) in your ",(0,i.jsx)(n.code,{children:"deps"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'kotlin_library(\n    name = "example",\n    srcs = glob(["*.kt"]),\n    deps = [\n        ":kotlinx-serialization-runtime",\n    ],\n    kotlin_compiler_plugins = {\n        # Likely copied from your $KOTLIN_HOME directory.\n        "kotlinx-serialization-compiler-plugin.jar": {},\n    },\n)\n\nprebuilt_jar(\n    name = "kotlinx-serialization-runtime",\n    binary_jar = ":kotlinx-serialization-runtime-0.10.0",\n)\n\n# Note you probably want to set\n# maven_repo=http://jcenter.bintray.com/ in your .buckconfig until\n# https://github.com/Kotlin/kotlinx.serialization/issues/64\n# is closed.\nremote_file(\n    name = "kotlinx-serialization-runtime-0.10.0",\n    out = "kotlinx-serialization-runtime-0.10.0.jar",\n    url = "mvn:org.jetbrains.kotlinx:kotlinx-serialization-runtime:jar:0.10.0",\n    sha1 = "23d777a5282c1957c7ce35946374fff0adab114c"\n)\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"labels"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:["Set of arbitrary strings which allow you to annotate a ",(0,i.jsx)(n.a,{href:"https://buck2.build/docs/concepts/build_rule/",children:"build rule"})," with tags that can be searched for over an entire dependency tree using ",(0,i.jsx)(n.code,{children:"buck query()"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"licenses"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:["Set of license files for this library. To get the list of license files for a given build rule and all of its dependencies, you can use ",(0,i.jsx)(n.a,{href:"https://buck2.build/docs/users/commands/query/",children:"buck query"})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"manifest"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"None"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:["An optional ",(0,i.jsx)(n.a,{href:"http://developer.android.com/guide/topics/manifest/manifest-intro.html",children:"Android Manifest"})," for the to declare any permissions or intents it may need or want to handle. May either be a file or an ",(0,i.jsx)(n.code,{children:"android_manifest()"})," target."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"non_exec_dep_plugins_deprecated"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:["Plugins that do not use the execution platform. This exists for historical reasons, and should not be used. Use ",(0,i.jsx)(n.code,{children:"plugins"})," instead - plugins should be configured for the execution platform since that is where they are used."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"plugins"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(n.p,{children:"List of plugins that should be run during compilation of the target. A list of strings may additionally be provided in order to pass additional arguments to the plugin."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"robolectric_runtime_dependency"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"None"}),")"]}),"\n",(0,i.jsx)(n.p,{children:"Robolectric only runs in offline mode with buck. Specify the relative directory containing all the jars Robolectric uses at runtime."}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);