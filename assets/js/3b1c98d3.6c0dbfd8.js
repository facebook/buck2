"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[83716],{28453:(e,t,a)=>{a.d(t,{R:()=>i,x:()=>l});var n=a(96540);const s={},r=n.createContext(s);function i(e){const t=n.useContext(r);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),n.createElement(r.Provider,{value:t},e.children)}},60331:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"concepts/target_pattern","title":"Target Pattern","description":"A target pattern is a string that resolves to a set of","source":"@site/../docs/concepts/target_pattern.md","sourceDirName":"concepts","slug":"/concepts/target_pattern","permalink":"/docs/concepts/target_pattern","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"target_pattern","title":"Target Pattern"},"sidebar":"main","previous":{"title":"Build Target","permalink":"/docs/concepts/build_target"},"next":{"title":"buck-out","permalink":"/docs/concepts/buck_out"}}');var s=a(74848),r=a(28453);const i={id:"target_pattern",title:"Target Pattern"},l=void 0,p={},c=[{value:"Build target patterns are not allowed in the deps argument",id:"build-target-patterns-are-not-allowed-in-the-deps-argument",level:3},{value:"Target aliases",id:"target-aliases",level:3}];function o(e){const t={a:"a",code:"code",em:"em",h3:"h3",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:["A ",(0,s.jsx)(t.em,{children:"target pattern"})," is a string that resolves to a set of\n",(0,s.jsx)(t.a,{href:"/docs/concepts/glossary#target",children:"targets"}),". A target pattern can be used as arguments to\ncommands, such as ",(0,s.jsx)(t.code,{children:"buck2 build"})," and ",(0,s.jsx)(t.code,{children:"buck uquery"}),". You can also use build target\npatterns in the ",(0,s.jsx)(t.a,{href:"/docs/concepts/glossary#visibility",children:"visibility"})," argument of your build\n",(0,s.jsx)(t.a,{href:"/docs/concepts/glossary#rule",children:"rules"}),"."]}),"\n",(0,s.jsx)(t.p,{children:"The simplest build target pattern matches the build target of the same name:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"#\n# Matches //apps/myapp:app\n#\n//apps/myapp:app\n"})}),"\n",(0,s.jsx)(t.p,{children:"A build target pattern that ends with a colon matches all build targets in the\nbuild file at the preceding directory path. For example, suppose that the build\nfile:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sh",children:"apps/myapp/BUCK\n"})}),"\n",(0,s.jsxs)(t.p,{children:["defines the rules: ",(0,s.jsx)(t.code,{children:"app_v1"})," and ",(0,s.jsx)(t.code,{children:"app_v2"}),", then the following build target\npattern would match both of those rules:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"#\n# Matches //apps/myapp:app_v1 and //apps/myapp:app_v2\n#\n//apps/myapp:\n"})}),"\n",(0,s.jsxs)(t.p,{children:["A build target pattern that ends with an ellipsis (",(0,s.jsx)(t.code,{children:"/..."}),") matches all build\ntargets in the build file in the directory that precedes the ellipsis and also\n",(0,s.jsx)(t.em,{children:"all build targets in build files in subdirectories"}),". For example, suppose that\nyou have the following build files:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"apps/BUCK\napps/myapp/BUCK\n"})}),"\n",(0,s.jsx)(t.p,{children:"then the following pattern would match all build targets in both of those files:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"#\n# Matches (for example) //apps:common and //apps/myapp:app\n#\n//apps/...\n"})}),"\n",(0,s.jsxs)(t.p,{children:["A target pattern that does not include a ",(0,s.jsx)(t.code,{children:":"})," separator matches the target with\nthe same name as the last element of the path:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"#\n# Matches //apps/myapp:myapp\n#\n//apps/myapp\n"})}),"\n",(0,s.jsx)(t.p,{children:"Finally, target patterns can be relative to your current directory. For example:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"#\n# If your current working directory is `apps`, matches //apps/myapp:myapp\n#\nmyapp:myapp\n"})}),"\n",(0,s.jsx)(t.h3,{id:"build-target-patterns-are-not-allowed-in-the-deps-argument",children:"Build target patterns are not allowed in the deps argument"}),"\n",(0,s.jsxs)(t.p,{children:["Build target patterns cannot be used with the ",(0,s.jsx)(t.code,{children:"deps"})," argument of a build rule.\nBuck requires that you specify all dependencies explicitly as either\nfully-qualified or relative build targets."]}),"\n",(0,s.jsx)(t.h3,{id:"target-aliases",children:"Target aliases"}),"\n",(0,s.jsxs)(t.p,{children:["Buck supports the ability to define ",(0,s.jsx)(t.em,{children:"aliases"})," for build targets; using aliases\ncan improve brevity when specifying targets on the Buck command line."]}),"\n",(0,s.jsxs)(t.p,{children:["To see which aliases exist, use ",(0,s.jsx)(t.code,{children:"buck2 audit config alias"}),"."]})]})}function d(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}}}]);