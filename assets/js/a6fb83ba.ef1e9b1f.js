"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[92722],{28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>c});var i=t(96540);const s={},r=i.createContext(s);function l(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(r.Provider,{value:n},e.children)}},45488:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"prelude/rules/cxx/llvm_link_bitcode","title":"llvm_link_bitcode","description":"A llvm\\\\link\\\\bitcode() rule builds a LLVM bitcode object from a given set LLVM bitcode inputs.","source":"@site/../docs/prelude/rules/cxx/llvm_link_bitcode.md","sourceDirName":"prelude/rules/cxx","slug":"/prelude/rules/cxx/llvm_link_bitcode","permalink":"/docs/prelude/rules/cxx/llvm_link_bitcode","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"ruleSidebar","previous":{"title":"cxx_toolchain","permalink":"/docs/prelude/rules/cxx/cxx_toolchain"},"next":{"title":"prebuilt_cxx_library","permalink":"/docs/prelude/rules/cxx/prebuilt_cxx_library"}}');var s=t(74848),r=t(28453);t(56289);const l={},c="llvm_link_bitcode",o={},d=[{value:"Function Signature",id:"function-signature",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Examples",id:"examples",level:3}];function a(e){const n={a:"a",code:"code",h1:"h1",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"llvm_link_bitcode",children:"llvm_link_bitcode"})}),"\n",(0,s.jsx)(n.p,{children:"A llvm_link_bitcode() rule builds a LLVM bitcode object from a given set LLVM bitcode inputs."}),"\n",(0,s.jsx)(n.h3,{id:"function-signature",children:"Function Signature"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'def llvm_link_bitcode(\n    *,\n    name: str,\n    default_target_platform: None | str = None,\n    target_compatible_with: list[str] = [],\n    compatible_with: list[str] = [],\n    exec_compatible_with: list[str] = [],\n    visibility: list[str] = [],\n    within_view: list[str] = ["PUBLIC"],\n    metadata: OpaqueMetadata = {},\n    tests: list[str] = [],\n    modifiers: OpaqueMetadata = [],\n    _apple_platforms: dict[str, str] = {},\n    _cxx_toolchain: str = "gh_facebook_buck2_shims_meta//:cxx",\n    deps: list[str] = [],\n    deps_query: None | str = None,\n    srcs: list[str | (str, list[str])] = [],\n) -> None\n'})}),"\n",(0,s.jsx)(n.h3,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"name"}),": (required)"]}),"\n",(0,s.jsx)(n.p,{children:"name of the target"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"default_target_platform"}),": (defaults to: ",(0,s.jsx)(n.code,{children:"None"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"specifies the default target platform, used when no platforms are specified on the command line"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"target_compatible_with"}),": (defaults to: ",(0,s.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"a list of constraints that are required to be satisfied for this target to be compatible with a configuration"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"compatible_with"}),": (defaults to: ",(0,s.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"a list of constraints that are required to be satisfied for this target to be compatible with a configuration"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"exec_compatible_with"}),": (defaults to: ",(0,s.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"a list of constraints that are required to be satisfied for this target to be compatible with an execution platform"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"visibility"}),": (defaults to: ",(0,s.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"a list of visibility patterns restricting what targets can depend on this one"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"within_view"}),": (defaults to: ",(0,s.jsx)(n.code,{children:'["PUBLIC"]'}),")"]}),"\n",(0,s.jsx)(n.p,{children:"a list of visibility patterns restricting what this target can depend on"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"metadata"}),": (defaults to: ",(0,s.jsx)(n.code,{children:"{}"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"a key-value map of metadata associated with this target"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"tests"}),": (defaults to: ",(0,s.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"a list of targets that provide tests for this one"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"modifiers"}),": (defaults to: ",(0,s.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"an array of modifiers associated with this target"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"deps_query"}),": (defaults to: ",(0,s.jsx)(n.code,{children:"None"}),")"]}),"\n",(0,s.jsxs)(n.p,{children:["Status: ",(0,s.jsx)(n.strong,{children:"experimental/unstable"}),". The deps query takes a query string that accepts the following query functions, and appends the output of the query to the declared deps:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"attrfilter"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"deps"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"except"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"intersect"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"filter"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"kind"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"set"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"union"})}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Some example queries:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"  \"filter({name_regex}, deps('//foo:foo'))\".format(name_regex='//.*')\n  \"attrfilter(annotation_processors, com.foo.Processor, deps('//foo:foo'))\"\n  \"deps('//foo:foo', 1)\"\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"srcs"}),": (defaults to: ",(0,s.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,s.jsxs)(n.p,{children:["The set of C, C++, Objective-C, Objective-C++, or assembly source files to be preprocessed, compiled, and assembled by this rule. We determine which stages to run on each input source based on its file extension. See the ",(0,s.jsx)(n.a,{href:"https://gcc.gnu.org/onlinedocs/gcc/Overall-Options.html",children:"GCC documentation"})," for more detail on how file extensions are interpreted. Each element can be either a string specifying a source file (e.g. ",(0,s.jsx)(n.code,{children:"''"}),") or a tuple of a string specifying a source file and a list of compilation flags (e.g. ",(0,s.jsx)(n.code,{children:"('', ['-Wall', '-Werror'])"})," ). In the latter case the specified flags will be used in addition to the rule's other flags when preprocessing and compiling that file (if applicable)."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"\n# A rule that builds and runs C/C++ test using gtest.\nllvm_link_bitcode(\n  name = 'echo_test',\n  srcs = [\n    'echo_test.o',  // Where this is a LLVM bitcode object.\n    'echo_other.o', // And this is another LLVM bitcode object.\n  ],\n)\n\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}}}]);