"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[65988],{27144:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"prelude/rules/python/python_test","title":"python_test","description":"A python_test() rule defines a set of .py files that contain tests to run via the Python unit testing framework.","source":"@site/../docs/prelude/rules/python/python_test.md","sourceDirName":"prelude/rules/python","slug":"/prelude/rules/python/python_test","permalink":"/docs/prelude/rules/python/python_test","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"ruleSidebar","previous":{"title":"python_runtime_bundle","permalink":"/docs/prelude/rules/python/python_runtime_bundle"},"next":{"title":"python_test_runner","permalink":"/docs/prelude/rules/python/python_test_runner"}}');var i=s(74848),r=s(28453);s(56289);const l={},o="python_test",d={},a=[{value:"Details",id:"details",level:3},{value:"Function Signature",id:"function-signature",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Examples",id:"examples",level:3}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"python_test",children:"python_test"})}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.code,{children:"python_test()"})," rule defines a set of ",(0,i.jsx)(n.code,{children:".py"})," files that contain tests to run via the ",(0,i.jsx)(n.a,{href:"https://docs.python.org/library/unittest.html",children:"Python unit testing framework"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"details",children:"Details"}),"\n",(0,i.jsxs)(n.p,{children:["If your test requires static files you should specify these in\nthe ",(0,i.jsx)(n.strong,{children:"resources"})," or ",(0,i.jsx)(n.strong,{children:"platform_resources"})," arguments.\nIf you do not specify these files, they won't be available when your\ntest runs."]}),"\n",(0,i.jsx)(n.h3,{id:"function-signature",children:"Function Signature"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'def python_test(\n    *,\n    name: str,\n    default_target_platform: None | str = None,\n    target_compatible_with: list[str] = [],\n    compatible_with: list[str] = [],\n    exec_compatible_with: list[str] = [],\n    visibility: list[str] = [],\n    within_view: list[str] = ["PUBLIC"],\n    metadata: OpaqueMetadata = {},\n    tests: list[str] = [],\n    modifiers: OpaqueMetadata = [],\n    _apple_platforms: dict[str, str] = {},\n    _build_info: dict[str, typing.Any] = {},\n    _create_manifest_for_source_dir: str = "prelude//python/tools:create_manifest_for_source_dir",\n    _cxx_hacks: str = "prelude//cxx/tools:cxx_hacks",\n    _cxx_toolchain: str = "gh_facebook_buck2_shims_meta//:cxx",\n    _exec_os_type: str = "prelude//os_lookup/targets:os_lookup",\n    _inject_test_env: str = "prelude//test/tools:inject_test_env",\n    _python_internal_tools: str = "prelude//python/tools:python_internal_tools",\n    _python_toolchain: str = "gh_facebook_buck2_shims_meta//:python",\n    _remote_test_execution_toolchain: str = "gh_facebook_buck2_shims_meta//:remote_test_execution",\n    _target_os_type: str = "prelude//os_lookup/targets:os_lookup",\n    _test_main: str = "prelude//python/tools:__test_main__.py",\n    _test_toolchain: str = "gh_facebook_buck2_shims_meta//:test",\n    additional_coverage_targets: list[str] = [],\n    allow_cache_upload: None | bool = None,\n    anonymous_link_groups: bool = False,\n    auto_link_groups: bool = False,\n    base_module: None | str = None,\n    binary_linker_flags: list[str] = [],\n    bolt_flags: list[str] = [],\n    bolt_profile: None | str = None,\n    build_args: list[str] = [],\n    compile: None | bool = None,\n    compiler_flags: list[str] = [],\n    constraint_overrides: list[None | str] = [],\n    contacts: list[str] = [],\n    coverage_instrumentation_compiler_flags: list[str] = [],\n    cuda_compile_style: str = "mono",\n    cxx_main: str = "prelude//python/tools:embedded_main.cpp",\n    cxx_runtime_type: None | str = None,\n    deduplicate_merged_link_roots: bool = True,\n    default_host_platform: None | str = None,\n    default_platform: None | str = None,\n    defaults: dict[str, str] = {},\n    deps: list[str] = [],\n    deps_query: None | str = None,\n    devirt_enabled: bool = False,\n    distributed_thinlto_partial_split_dwarf: bool = False,\n    dummy_omnibus: None | str = None,\n    enable_distributed_thinlto: bool = False,\n    env: dict[str, str] = {},\n    exclude_deps_from_merged_linking: bool = False,\n    exe_allow_cache_upload: bool = False,\n    executable_deps: list[str] = [],\n    executable_name: None | str = None,\n    exported_needs_coverage_instrumentation: bool = False,\n    extension: None | str = None,\n    extra_dwp_flags: list[str] = [],\n    fat_lto: bool = False,\n    focused_list_target: None | str = None,\n    frameworks: list[str] = [],\n    header_namespace: None | str = None,\n    headers: list[str] | dict[str, str] = [],\n    headers_as_raw_headers_mode: None | str = None,\n    implicit_test_library: None | str = None,\n    include_directories: list[str] = [],\n    inplace_build_args: list[str] = [],\n    labels: list[str] = [],\n    lang_compiler_flags: dict[str, list[str]] = {},\n    lang_platform_compiler_flags: dict[str, list[(str, list[str])]] = {},\n    lang_platform_preprocessor_flags: dict[str, list[(str, list[str])]] = {},\n    lang_preprocessor_flags: dict[str, list[str]] = {},\n    lazy_imports_analyzer: None | str = None,\n    libraries: list[str] = [],\n    licenses: list[str] = [],\n    link_deps_query_whole: bool = False,\n    link_execution_preference: None | str = None,\n    link_group: None | str = None,\n    link_group_deps: list[str] = [],\n    link_group_map: None | str | list[(str, list[(None | str | list[None | str], str, None | str | list[str], None | str)], None | dict[str, typing.Any])] = None,\n    link_group_min_binary_node_count: None | int = None,\n    link_group_public_deps_label: None | str = None,\n    link_ordering: None | str = None,\n    link_style: str = "static",\n    link_whole: bool = False,\n    linker_extra_outputs: list[str] = [],\n    linker_flags: list[str] = [],\n    main_function: None | str = None,\n    main_module: None | str = None,\n    make_py_package: None | str = None,\n    manifest_module_entries: None | dict[str, list[str] | dict[str, typing.Any]] = None,\n    native_link_strategy: None | str = None,\n    needed_coverage: list[(int, str, None | str)] = [],\n    opt_by_default_enabled: bool = False,\n    optimize_for_action_throughput: bool = False,\n    package_split_dwarf_dwp: bool = False,\n    package_style: None | str = None,\n    par_style: None | str = None,\n    platform_compiler_flags: list[(str, list[str])] = [],\n    platform_deps: list[(str, list[str])] = [],\n    platform_headers: list[(str, list[str] | dict[str, str])] = [],\n    platform_linker_flags: list[(str, list[str])] = [],\n    platform_override: None | str = None,\n    platform_preload_deps: list[(str, list[str])] = [],\n    platform_preprocessor_flags: list[(str, list[str])] = [],\n    platform_resources: list[(str, list[str] | dict[str, str])] = [],\n    platform_srcs: list[(str, list[str] | dict[str, str])] = [],\n    post_linker_flags: list[str] = [],\n    post_platform_linker_flags: list[(str, list[str])] = [],\n    precompiled_header: None | str = None,\n    prefer_stripped_native_objects: bool = False,\n    prefer_stripped_objects: bool = False,\n    prefix_header: None | str = None,\n    preload_deps: list[str] = [],\n    preprocessor_flags: list[str] = [],\n    py_version_for_type_checking: None | str = None,\n    raw_headers: list[str] = [],\n    raw_headers_as_headers_mode: None | str = None,\n    remote_execution: None | str | dict[str, None | bool | int | str | list[dict[str, str]] | dict[str, str | list[str]]] = None,\n    repl_main: None | str = None,\n    repl_only_deps: list[str] = [],\n    resources: list[str] | dict[str, str] = [],\n    run_with_inplace: bool = False,\n    runner: None | str = None,\n    runtime_bundle: None | str = None,\n    runtime_bundle_full: bool = False,\n    runtime_dependency_handling: None | str = None,\n    runtime_env: None | dict[str, str] = None,\n    safer_lazy_imports: bool = False,\n    separate_debug_info: bool = False,\n    shard_typing: None | bool = None,\n    specs: None | str = None,\n    srcs: list[str] | dict[str, str] = [],\n    standalone_build_args: list[str] = [],\n    static_extension_finder: str = "prelude//python/tools:static_extension_finder.py",\n    static_extension_utils: str = "prelude//python/tools:static_extension_utils.cpp",\n    strip_libpar: str = "none",\n    strip_stapsdt: bool = False,\n    test_rule_timeout_ms: None | int = None,\n    thin_lto: bool = False,\n    transformation_spec: None | str = None,\n    typing: bool = False,\n    use_anon_target_for_analysis: bool = False,\n    use_content_based_paths: bool = True,\n    use_fbcc_rust_wrapper: bool = False,\n    use_header_units: bool = False,\n    use_oss_python: bool = False,\n    use_rust_make_par: bool = False,\n    use_rust_make_par_incremental: bool = False,\n    version_selections: dict[str, str] = {},\n    version_universe: None | str = None,\n    versioned_resources: None | list[(dict[str, str], list[str] | dict[str, str])] = None,\n    versioned_srcs: None | list[(dict[str, str], list[str] | dict[str, str])] = None,\n    weak_framework_names: list[str] = [],\n    zip_safe: None | bool = None,\n) -> None\n'})}),"\n",(0,i.jsx)(n.h3,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"name"}),": (required)"]}),"\n",(0,i.jsx)(n.p,{children:"name of the target"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"default_target_platform"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"None"}),")"]}),"\n",(0,i.jsx)(n.p,{children:"specifies the default target platform, used when no platforms are specified on the command line"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"target_compatible_with"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(n.p,{children:"a list of constraints that are required to be satisfied for this target to be compatible with a configuration"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"compatible_with"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(n.p,{children:"a list of constraints that are required to be satisfied for this target to be compatible with a configuration"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"exec_compatible_with"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(n.p,{children:"a list of constraints that are required to be satisfied for this target to be compatible with an execution platform"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"visibility"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(n.p,{children:"a list of visibility patterns restricting what targets can depend on this one"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"within_view"}),": (defaults to: ",(0,i.jsx)(n.code,{children:'["PUBLIC"]'}),")"]}),"\n",(0,i.jsx)(n.p,{children:"a list of visibility patterns restricting what this target can depend on"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"metadata"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"{}"}),")"]}),"\n",(0,i.jsx)(n.p,{children:"a key-value map of metadata associated with this target"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"tests"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(n.p,{children:"a list of targets that provide tests for this one"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"modifiers"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(n.p,{children:"an array of modifiers associated with this target"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"_build_info"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"{}"}),")"]}),"\n",(0,i.jsx)(n.p,{children:"Build info that is passed along here will be late-stamped into a fb_build_info section on the output binary"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"base_module"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"None"}),")"]}),"\n",(0,i.jsx)(n.p,{children:"The package in which the specified source files and resources should reside in their final location in the top-level binary. If unset, Buck uses the project-relative directory that contains the BUCK file."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"contacts"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(n.p,{children:"A list of organizational contacts for this rule. These could be individuals who you would contact in the event of a failure or other issue with the rule."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"contacts = [ 'Joe Sixpack', 'Erika Mustermann' ]\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"deduplicate_merged_link_roots"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"True"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:["When linking multiple top-level binaries with the ",(0,i.jsx)(n.code,{children:"merged"})," ",(0,i.jsx)(n.code,{children:".buckconfig"}),", coalesce root link rules which are identical across independent merged links."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"deps"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:["A list of ",(0,i.jsx)(n.code,{children:"python_library()"})," rules that specify Python modules to include in the binary \u2014 including all transitive dependencies of these rules."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"env"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"{}"}),")"]}),"\n",(0,i.jsx)(n.p,{children:"A map of environment names and values to set when running the test."}),"\n",(0,i.jsxs)(n.p,{children:["It is also possible to expand references to other rules within the ",(0,i.jsx)(n.strong,{children:"values"})," of\nthese environment variables, using builtin ",(0,i.jsx)(n.code,{children:"string parameter macros"}),"\n:"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"$(location //path/to:target)"}),"\nExpands to the location of the output of the build rule. This\nmeans that you can refer to these without needing to be aware of how\nBuck is storing data on the disk mid-build."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"exclude_deps_from_merged_linking"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"False"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:["When linking the top-level binary with a ",(0,i.jsx)(n.code,{children:"merged"})," ",(0,i.jsx)(n.code,{children:".buckconfig"}),", do not merge or re-link any native transitive deps of this library. This is useful if this library wraps prebuilt native extensions which cannot be re-linked as part of library merging."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"exe_allow_cache_upload"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"False"}),")"]}),"\n",(0,i.jsx)(n.p,{children:"Allow uploading native executable for caching. Only meaningful for native link strategy."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"labels"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:["Set of arbitrary strings which allow you to annotate a ",(0,i.jsx)(n.a,{href:"https://buck2.build/docs/concepts/build_rule/",children:"build rule"})," with tags that can be searched for over an entire dependency tree using ",(0,i.jsx)(n.code,{children:"buck query()"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"licenses"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:["Set of license files for this library. To get the list of license files for a given build rule and all of its dependencies, you can use ",(0,i.jsx)(n.a,{href:"https://buck2.build/docs/users/commands/query/",children:"buck query"})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"link_group_deps"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(n.p,{children:"Additional targets to traverse when building link groups, but which should not be direct dependencies of the main executable."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"link_group_public_deps_label"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"None"}),")"]}),"\n",(0,i.jsx)(n.p,{children:'Surface nodes with this label as "public" nodes in the main executable when linking with with link groups.'}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"linker_flags"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:["Additional linker flags that should be applied to any linking which is specific to this rule. Note that whether these flags are used is dependent on the native link strategy selected in ",(0,i.jsx)(n.code,{children:".buckconfig"})," and currently applies only to the merged ",(0,i.jsx)(n.code,{children:".buckconfig"}),"; the ",(0,i.jsx)(n.code,{children:"separate"})," link strategy pulls in shared libraries that are linked in the context of the rules that own them, such as ",(0,i.jsx)(n.code,{children:"cxx_library()"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"main_function"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"None"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:["Name of a Python function that will serve as the main entry point of the binary. The name is either a fully qualified name like ",(0,i.jsx)(n.code,{children:"foo.bar.baz"})," or it starts with a ",(0,i.jsx)(n.code,{children:"."})," like ",(0,i.jsx)(n.code,{children:".bar.baz"}),", in which case it is relative to the package containing the target. This should usually be a function defined within one of the dependencies of this target. This attribute should be preferred over ",(0,i.jsx)(n.code,{children:"main_module"})," or ",(0,i.jsx)(n.code,{children:"main"}),", and it is an error to specify more than one of these."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"main_module"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"None"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:["The main module used to run the tests. This parameter is normally not needed, as Buck will provide a default main module that runs all tests. However, you can override this with your own module to perform custom initialization or command line processing. Your custom module can import the standard Buck test main as ",(0,i.jsx)(n.code,{children:"__test_main__"}),", and can invoke it's normal main function as ",(0,i.jsx)(n.code,{children:"__test_main__.main(sys.argv)"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"manifest_module_entries"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"None"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:["If present, it should be a ",(0,i.jsx)(n.code,{children:"string"})," -> ",(0,i.jsx)(n.code,{children:"entry"})," mapping that gets generated into a ",(0,i.jsx)(n.code,{children:"__manifest__"})," module in the executable. Top level string keys will be the names of variables in this module (so they must be valid Python identifiers). An ",(0,i.jsx)(n.code,{children:"entry"})," can be a list of ",(0,i.jsx)(n.code,{children:"string"}),"s, or a further ",(0,i.jsx)(n.code,{children:"string"}),"-keyed dictionary."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"package_style"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"None"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:["Used to override the global packaging style that is set in ",(0,i.jsx)(n.code,{children:"["}),".buckconfig",(0,i.jsx)(n.code,{children:" ]"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"platform_resources"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:["Python-platform-specific resource files. These should be specified as a list of pairs where the first element in each pair is an un-anchored regex against which the platform name is matched, and the second element is a list of resource files. The regex should use ",(0,i.jsx)(n.code,{children:"java.util.regex.Pattern"})," syntax. The platform name is a Python platform ",(0,i.jsx)(n.em,{children:"flavor"})," defined in the buckconfig#",(0,i.jsx)(n.code,{children:"python "}),"section of ",(0,i.jsx)(n.code,{children:".buckconfig"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"platform_srcs"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:["Python-platform-specific source files. These should be specified as a list of pairs where the first element in each pair is an un-anchored regex against which the platform name is matched, and the second element is a list of source files. The regex should use ",(0,i.jsx)(n.code,{children:"java.util.regex.Pattern"})," syntax. The platform name is a Python platform ",(0,i.jsx)(n.em,{children:"flavor"})," defined in the buckconfig#",(0,i.jsx)(n.code,{children:"python"})," section of ",(0,i.jsx)(n.code,{children:".buckconfig"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"preload_deps"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:["A list of C/C++ library dependencies that need to be loaded before any other libraries when the PEX starts up. This requires dynamic loader support, such as ",(0,i.jsx)(n.code,{children:"LD_PRELOAD"}),", found on most systems. This list is order- sensitive and the preload libraries listed here are passed down to the dynamic linker in the same order."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"py_version_for_type_checking"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"None"}),")"]}),"\n",(0,i.jsx)(n.p,{children:"This option will force the type checker to perform checking under a specific version of Python interpreter."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"shard_typing"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"None"}),")"]}),"\n",(0,i.jsx)(n.p,{children:"Determines if sharding should be enabled on a given target."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"srcs"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:["The set of Python (",(0,i.jsx)(n.code,{children:".py"}),") files to include in this library."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"test_rule_timeout_ms"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"None"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:["If set specifies the maximum amount of time (in milliseconds) in which all of the tests in this rule should complete. This overrides the default ",(0,i.jsx)(n.code,{children:"rule_timeout"})," if any has been specified in ",(0,i.jsx)(n.code,{children:".buckconfig"})," ."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"transformation_spec"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"None"}),")"]}),"\n",(0,i.jsx)(n.p,{children:"Dependency to a transformation spec that will selectively change parts of dependency graph"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"typing"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"False"}),")"]}),"\n",(0,i.jsx)(n.p,{children:"Determines whether to perform type checking on the given target. Default is False."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"version_selections"}),": (defaults to: ",(0,i.jsx)(n.code,{children:"{}"}),")"]}),"\n",(0,i.jsx)(n.p,{children:"A mapping from library name to desired version. Versioned dependencies from the entire dependency tree with the given name will be used at the specified version, if available. Versioned libraries that are unspecified will be used at their respective default version."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"\n# A rule that includes a single .py file containing tests.\npython_test(\n  name = 'fileutil_test',\n  srcs = ['fileutil_tests.py'],\n  deps = [\n    ':fileutil',\n  ],\n)\n\n# A rule that uses glob() to include all sources in the directory which the\n# rule is defined.  It also lists a resource file that gets packaged with\n# the sources in this rule.\npython_library(\n  name = 'fileutil',\n  srcs = glob(['fileutil/**/*.py']),\n  resources = [\n    'testdata.dat',\n  ],\n)\n\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>o});var t=s(96540);const i={},r=t.createContext(i);function l(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);