"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[88386],{28453:(e,s,t)=>{t.d(s,{R:()=>l,x:()=>o});var r=t(96540);const i={},n=r.createContext(i);function l(e){const s=r.useContext(n);return r.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),r.createElement(n.Provider,{value:s},e.children)}},31904:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"prelude/rules/apple/apple_library","title":"apple_library","description":"An applelibrary() rule represents a set of Objective-C/C++/Swift source files and is similar to a cxxlibrary() rule with which it shares many attributes. In addition to those common attributes, applelibrary() has a some additional attributes that are specific to binaries intended to be built using the Apple toolchain. Note, however, that applelibrary() and cxxlibrary() differ in the way that they import header files, in order to better accommodate existing conventions. See the sections for the headers and exportedheaders attributes for more details.","source":"@site/../docs/prelude/rules/apple/apple_library.md","sourceDirName":"prelude/rules/apple","slug":"/prelude/rules/apple/apple_library","permalink":"/docs/prelude/rules/apple/apple_library","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"ruleSidebar","previous":{"title":"apple_ipa_package","permalink":"/docs/prelude/rules/apple/apple_ipa_package"},"next":{"title":"apple_library_for_distribution","permalink":"/docs/prelude/rules/apple/apple_library_for_distribution"}}');var i=t(74848),n=t(28453);t(56289);const l={},o="apple_library",a={},d=[{value:"Details",id:"details",level:3},{value:"Function Signature",id:"function-signature",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Examples",id:"examples",level:3}];function c(e){const s={a:"a",code:"code",h1:"h1",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,n.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"apple_library",children:"apple_library"})}),"\n",(0,i.jsxs)(s.p,{children:["An ",(0,i.jsx)(s.code,{children:"apple_library()"})," rule represents a set of Objective-C/C++/Swift source files and is similar to a ",(0,i.jsx)(s.code,{children:"cxx_library()"})," rule with which it shares many attributes. In addition to those common attributes, ",(0,i.jsx)(s.code,{children:"apple_library()"})," has a some additional attributes that are specific to binaries intended to be built using the Apple toolchain. Note, however, that ",(0,i.jsx)(s.code,{children:"apple_library()"})," and ",(0,i.jsx)(s.code,{children:"cxx_library()"})," differ in the way that they import header files, in order to better accommodate existing conventions. See the sections for the ",(0,i.jsx)(s.code,{children:"headers"})," and ",(0,i.jsx)(s.code,{children:"exported_headers"})," attributes for more details."]}),"\n",(0,i.jsx)(s.h3,{id:"details",children:"Details"}),"\n",(0,i.jsxs)(s.p,{children:["Buck enables you to override components of the Apple toolchain with\nalternate tools, either from the Xcode search paths or from directories\nthat you specify.\nSee ",(0,i.jsx)(s.code,{children:".buckconfig"}),"\nand ",(0,i.jsx)(s.code,{children:".buckconfig"}),"\nfor more information."]}),"\n",(0,i.jsx)(s.h3,{id:"function-signature",children:"Function Signature"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:'def apple_library(\n    *,\n    name: str,\n    default_target_platform: None | str = None,\n    target_compatible_with: list[str] = [],\n    compatible_with: list[str] = [],\n    exec_compatible_with: list[str] = [],\n    visibility: list[str] = [],\n    within_view: list[str] = ["PUBLIC"],\n    metadata: OpaqueMetadata = {},\n    tests: list[str] = [],\n    modifiers: OpaqueMetadata = [],\n    _apple_platforms: dict[str, str] = {},\n    _apple_toolchain: str = "gh_facebook_buck2_shims_meta//:apple-default",\n    _apple_tools: str = "prelude//apple/tools:apple-tools",\n    _apple_xctoolchain: str = "gh_facebook_buck2_shims_meta//:apple-xctoolchain",\n    _apple_xctoolchain_bundle_id: str = "gh_facebook_buck2_shims_meta//:apple-xctoolchain-bundle-id",\n    _archive_objects_locally_override: None | bool = None,\n    _dsymutil_extra_flags: list[str],\n    _dsymutil_verify_dwarf: str,\n    _enable_library_evolution: bool = select({"prelude//features/apple:swift_library_evolution_enabled": True, "DEFAULT": False}),\n    _meta_apple_library_validation_enabled: bool = False,\n    _skip_swift_incremental_outputs: bool = False,\n    _stripped_default: bool = False,\n    _swift_enable_testing: bool = select({"prelude//features/apple:swift_enable_testing_enabled": True, "DEFAULT": False}),\n    allow_cache_upload: None | bool = None,\n    attrs_validators: None | list[str] = None,\n    bridging_header: None | str = None,\n    can_be_asset: None | bool = None,\n    compiler_flags: list[str] = [],\n    contacts: list[str] = [],\n    cxx_runtime_type: None | str = None,\n    default_host_platform: None | str = None,\n    default_platform: None | str = None,\n    defaults: dict[str, str] = {},\n    deps: list[str] = [],\n    devirt_enabled: bool = False,\n    diagnostics: dict[str, str] = {},\n    dist_thin_lto_codegen_flags: list[str] = [],\n    dsym_uses_parallel_linker: bool = select({"prelude//features/apple:dsym_uses_parallel_linker_enabled": True, "DEFAULT": False}),\n    enable_cxx_interop: bool = False,\n    enable_distributed_thinlto: bool = select({"prelude//build_mode/constraints:distributed-thin-lto-enabled": True, "DEFAULT": False}),\n    enable_library_evolution: None | bool = None,\n    executable_name: None | str = None,\n    exported_deps: list[str] = [],\n    exported_header_style: str = "local",\n    exported_headers: list[str] | dict[str, str] = [],\n    exported_lang_platform_preprocessor_flags: dict[str, list[(str, list[str])]] = {},\n    exported_lang_preprocessor_flags: dict[str, list[str]] = {},\n    exported_linker_flags: list[str] = [],\n    exported_platform_deps: list[(str, list[str])] = [],\n    exported_platform_headers: list[(str, list[str] | dict[str, str])] = [],\n    exported_platform_linker_flags: list[(str, list[str])] = [],\n    exported_platform_preprocessor_flags: list[(str, list[str])] = [],\n    exported_post_linker_flags: list[str] = [],\n    exported_post_platform_linker_flags: list[(str, list[str])] = [],\n    exported_preprocessor_flags: list[str] = [],\n    extra_xcode_files: list[str] = [],\n    extra_xcode_sources: list[str] = [],\n    fat_lto: bool = False,\n    focused_list_target: None | str = None,\n    force_static: None | bool = None,\n    frameworks: list[str] = [],\n    header_mode: None | str = None,\n    header_namespace: None | str = None,\n    header_path_prefix: None | str = None,\n    headers: list[str] | dict[str, str] = [],\n    headers_as_raw_headers_mode: None | str = None,\n    include_directories: list[str] = [],\n    incremental_remote_outputs: bool = False,\n    info_plist: None | str = None,\n    info_plist_substitutions: dict[str, str] = {},\n    labels: list[str] = [],\n    lang_compiler_flags: dict[str, list[str]] = {},\n    lang_platform_compiler_flags: dict[str, list[(str, list[str])]] = {},\n    lang_platform_preprocessor_flags: dict[str, list[(str, list[str])]] = {},\n    lang_preprocessor_flags: dict[str, list[str]] = {},\n    libraries: list[str] = [],\n    licenses: list[str] = [],\n    link_execution_preference: None | str = None,\n    link_group: None | str = None,\n    link_group_map: None | str | list[(str, list[(None | str | list[None | str], str, None | str | list[str], None | str)], None | dict[str, typing.Any])] = None,\n    link_ordering: None | str = None,\n    link_style: None | str = None,\n    link_whole: None | bool = None,\n    linker_extra_outputs: list[str] = [],\n    linker_flags: list[str] = [],\n    modular: bool = False,\n    module_name: None | str = None,\n    module_requires_cxx: bool = False,\n    platform_compiler_flags: list[(str, list[str])] = [],\n    platform_deps: list[(str, list[str])] = [],\n    platform_headers: list[(str, list[str] | dict[str, str])] = [],\n    platform_linker_flags: list[(str, list[str])] = [],\n    platform_preprocessor_flags: list[(str, list[str])] = [],\n    platform_srcs: list[(str, list[str | (str, list[str])])] = [],\n    post_linker_flags: list[str] = [],\n    post_platform_linker_flags: list[(str, list[str])] = [],\n    precompiled_header: None | str = None,\n    preferred_linkage: str = "any",\n    prefix_header: None | str = None,\n    preprocessor_flags: list[str] = [],\n    propagated_target_sdk_version: None | str = None,\n    public_framework_headers: list[str] | dict[str, str] = [],\n    public_include_directories: list[str] = [],\n    public_system_include_directories: list[str] = [],\n    raw_headers: list[str] = [],\n    raw_headers_as_headers_mode: None | str = None,\n    reexport_all_header_dependencies: None | bool = None,\n    sdk_modules: list[str] = [],\n    serialize_debugging_options: None | bool = None,\n    shared_library_macho_file_type: str = "dylib",\n    soname: None | str = None,\n    srcs: list[str | (str, list[str])] = [],\n    static_library_basename: None | str = None,\n    stripped: None | bool = None,\n    supported_platforms_regex: None | str = None,\n    supports_header_symlink_subtarget: bool = False,\n    supports_merged_linking: None | bool = None,\n    supports_shlib_interfaces: bool = True,\n    swift_compilation_mode: str = "wmo",\n    swift_compiler_flags: list[str] = [],\n    swift_incremental_file_hashing: bool = False,\n    swift_interface_compilation_enabled: bool = True,\n    swift_macro_deps: list[str] = [],\n    swift_module_skip_function_bodies: bool = True,\n    swift_package_name: None | str = None,\n    swift_version: None | str = None,\n    target_sdk_version: None | str = None,\n    thin_lto: bool = False,\n    use_archive: None | bool = None,\n    use_submodules: bool = True,\n    uses_cxx_explicit_modules: bool = False,\n    uses_experimental_content_based_path_hashing: bool = select({"prelude//features/apple:content_based_path_hashing_enabled": True, "prelude//features/apple:content_based_path_hashing_disabled": False, "DEFAULT": False}),\n    uses_explicit_modules: bool = False,\n    uses_modules: bool = False,\n    validation_deps: list[str] = [],\n) -> None\n'})}),"\n",(0,i.jsx)(s.h3,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"name"}),": (required)"]}),"\n",(0,i.jsx)(s.p,{children:"name of the target"}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"default_target_platform"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"None"}),")"]}),"\n",(0,i.jsx)(s.p,{children:"specifies the default target platform, used when no platforms are specified on the command line"}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"target_compatible_with"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(s.p,{children:"a list of constraints that are required to be satisfied for this target to be compatible with a configuration"}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"compatible_with"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(s.p,{children:"a list of constraints that are required to be satisfied for this target to be compatible with a configuration"}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"exec_compatible_with"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(s.p,{children:"a list of constraints that are required to be satisfied for this target to be compatible with an execution platform"}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"visibility"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(s.p,{children:"a list of visibility patterns restricting what targets can depend on this one"}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"within_view"}),": (defaults to: ",(0,i.jsx)(s.code,{children:'["PUBLIC"]'}),")"]}),"\n",(0,i.jsx)(s.p,{children:"a list of visibility patterns restricting what this target can depend on"}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"metadata"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"{}"}),")"]}),"\n",(0,i.jsx)(s.p,{children:"a key-value map of metadata associated with this target"}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"tests"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(s.p,{children:"a list of targets that provide tests for this one"}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"modifiers"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(s.p,{children:"an array of modifiers associated with this target"}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"allow_cache_upload"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"None"}),")"]}),"\n",(0,i.jsx)(s.p,{children:"Whether to allow uploading the output of this rule to be uploaded to cache when the action is executed locally if the configuration allows (i.e. there is a cache configured and the client has permission to write to it)."}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"compiler_flags"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(s.p,{children:"Flags to use when compiling any of the above sources (which require compilation)."}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"exported_deps"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,i.jsxs)(s.p,{children:["Dependencies that will also appear to belong to any rules that depend on this one. This has two effects: * Exported dependencies will also be included in the link line of dependents of this rules, but normal dependencies will not. * When ",(0,i.jsx)(s.code,{children:"reexport_all_header_dependencies = False"}),", only exported headers of the rules specified here are re-exported."]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"exported_headers"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,i.jsxs)(s.p,{children:["The set of header files that are made available for inclusion to the source files in this target and all targets that transitively depend on this one. These should be specified as either a list of header files or a dictionary of header names to header files. The header names can contain forward slashes (",(0,i.jsx)(s.code,{children:"/"}),"). If a list of header files is specified, the headers can be imported with ",(0,i.jsx)(s.code,{children:'#import "$HEADER_PATH_PREFIX/$HEADER_NAME"'})," or, if a header file that belongs to the same rule is being imported, with ",(0,i.jsx)(s.code,{children:'#import "$HEADER_NAME"'}),", where ",(0,i.jsx)(s.code,{children:"$HEADER_PATH_PREFIX"})," is the value of the target's ",(0,i.jsx)(s.code,{children:"header_path_prefix"})," attribute, and ",(0,i.jsx)(s.code,{children:"$HEADER_NAME"})," is the filename of the header file. If a dictionary is specified, each header can be imported with ",(0,i.jsx)(s.code,{children:'#import "$HEADER_NAME"'}),", where ",(0,i.jsx)(s.code,{children:"$HEADER_NAME"})," is the key corresponding to this file. In this case, the ",(0,i.jsx)(s.code,{children:"header_path_prefix"})," attribute is ignored. In either case, quotes in the import statements can be replaced with angle brackets."]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"exported_linker_flags"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(s.p,{children:"Flags to add to the linker command line when the output from this rule, or the output from any rule that transitively depends on this rule, is used in a link operation."}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"exported_platform_linker_flags"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,i.jsxs)(s.p,{children:["Platform-specific linker flags for this rule and for all rules that transitively depend on this rule. This argument is specified as a list of pairs where the first element in each pair is an un-anchored regex against which the platform name is matched. The regex should use ",(0,i.jsx)(s.code,{children:"java.util.regex.Pattern"})," syntax. The second element in each pair is a list of linker flags. If the regex matches the platform, these flags are added to the linker command line when the output from this rule, or the output from any rule that transitively depends on this rule, is used in a link operation."]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"extra_xcode_files"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(s.p,{children:'When the project is generated, this is the list of files that will added to the project. Those files won\'t be added to the build phase "Compile Sources".'}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"extra_xcode_sources"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(s.p,{children:'When the project is generated, this is the list of files that will added to the build phase "Compile Sources" of the given target.'}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"frameworks"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,i.jsxs)(s.p,{children:["A list of system frameworks that the code in this target uses. Each entry should be a path starting with ",(0,i.jsx)(s.code,{children:"$SDKROOT"})," or ",(0,i.jsx)(s.code,{children:"$PLATFORM_DIR"})," to denote that the rest of the path is relative to the root of the SDK used for the build or to the platform toolchain directory."]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"header_namespace"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"None"}),")"]}),"\n",(0,i.jsxs)(s.p,{children:["A path prefix when including headers of this target. Defaults to the path from the root of the repository to the directory where this target is defined. Can contain forward slashes (",(0,i.jsx)(s.code,{children:"/"}),"), but cannot start with one. See ",(0,i.jsx)(s.code,{children:"headers"})," for more information."]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"header_path_prefix"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"None"}),")"]}),"\n",(0,i.jsx)(s.p,{children:"A path prefix when including headers of this target. For example, headers from a library defined using"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:'apple_library(\n    name = "Library",\n    headers = glob(["**/*.h"]),\n    header_path_prefix = "Lib",\n)\n'})}),"\n",(0,i.jsx)(s.p,{children:"can be imported using following mapping"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:"Library/SubDir/Header1.h -> Lib/Header1.h\nLibrary/Header2.h -> Lib/Header2.h\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Defaults to the short name of the target. Can contain forward slashes (",(0,i.jsx)(s.code,{children:"/"}),"), but\ncannot start with one. See ",(0,i.jsx)(s.code,{children:"headers"})," for more information."]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"headers"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,i.jsxs)(s.p,{children:["The set of header files that are made available for inclusion to the source files in this target. These should be specified as either a list of header files or a dictionary of header names to header files. The header names can contain forward slashes (",(0,i.jsx)(s.code,{children:"/"}),"). If a list of header files is specified, the headers can be imported with ",(0,i.jsx)(s.code,{children:'#import "$HEADER_PATH_PREFIX/$HEADER_NAME"'})," or ",(0,i.jsx)(s.code,{children:'#import "$HEADER_NAME"'}),", where ",(0,i.jsx)(s.code,{children:"$HEADER_PATH_PREFIX"})," is the value of the target's ",(0,i.jsx)(s.code,{children:"header_path_prefix"})," attribute, and ",(0,i.jsx)(s.code,{children:"$HEADER_NAME"})," is the filename of the header file. If a dictionary is specified, each header can be imported with ",(0,i.jsx)(s.code,{children:'#import "$HEADER_NAME"'}),", where ",(0,i.jsx)(s.code,{children:"$HEADER_NAME"})," is the key corresponding to this file. In this case, the ",(0,i.jsx)(s.code,{children:"header_path_prefix"})," attribute is ignored. In either case, quotes in the import statements can be replaced with angle brackets."]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"include_directories"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,i.jsxs)(s.p,{children:["A list of include directories (with ",(0,i.jsx)(s.code,{children:"raw_headers"}),") to be added to the compile command for compiling this target (via ",(0,i.jsx)(s.code,{children:"-I"}),"). An include directory is relative to the current package."]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"info_plist_substitutions"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"{}"}),")"]}),"\n",(0,i.jsxs)(s.p,{children:["A dictionary that assigns variable names to their values. It is used for variable substitution when processing the file specified in ",(0,i.jsx)(s.code,{children:"info_plist"}),". For example if this argument is set to ",(0,i.jsx)(s.code,{children:"{'VAR': 'MyValue'}"}),", then each occurrence of ",(0,i.jsx)(s.code,{children:"$(VAR)"})," or ",(0,i.jsx)(s.code,{children:"${VAR}"})," in the file will be replaced by ",(0,i.jsx)(s.code,{children:"MyValue"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"link_execution_preference"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"None"}),")"]}),"\n",(0,i.jsx)(s.p,{children:"The execution preference for linking. Options are:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"any : No preference is set, and the link action will be performed based on buck2's executor configuration."}),"\n",(0,i.jsx)(s.li,{children:"full_hybrid : The link action will execute both locally and remotely, regardless of buck2's executor configuration (if\nthe executor is capable of hybrid execution). The use_limited_hybrid setting of the hybrid executor is ignored."}),"\n",(0,i.jsx)(s.li,{children:"local : The link action will execute locally if compatible on current host platform."}),"\n",(0,i.jsx)(s.li,{children:"local_only : The link action will execute locally, and error if the current platform is not compatible."}),"\n",(0,i.jsx)(s.li,{children:"remote : The link action will execute remotely if a compatible remote platform exists, otherwise locally."}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:"The default is None, expressing that no preference has been set on the target itself."}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"link_style"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"None"}),")"]}),"\n",(0,i.jsxs)(s.p,{children:["Determines whether to build and link this rule's dependencies statically or dynamically. Can be either ",(0,i.jsx)(s.code,{children:"static"}),", ",(0,i.jsx)(s.code,{children:"static_pic"})," or ",(0,i.jsx)(s.code,{children:"shared"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"linker_extra_outputs"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,i.jsxs)(s.p,{children:["Declares extra outputs that the linker emits. These identifiers can be used in ",(0,i.jsx)(s.code,{children:"$(output ...)"})," macros in ",(0,i.jsx)(s.code,{children:"linker_flags"})," to interpolate the output path into the linker command line. Useful for custom linkers that emit extra output files."]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"linker_flags"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(s.p,{children:"Flags to add to the linker command line whenever the output from this rule is used in a link operation, such as linked into an executable or a shared library."}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"platform_compiler_flags"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,i.jsxs)(s.p,{children:["Platform specific compiler flags. These should be specified as a list of pairs where the first element is an un-anchored regex (in java.util.regex.Pattern syntax) against which the platform name is matched, and the second element is a list of flags to use when compiling the target's sources. See ",(0,i.jsx)(s.code,{children:"compiler_flags"})," for more information."]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"platform_srcs"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,i.jsxs)(s.p,{children:["Platform specific source files. These should be specified as a list of pairs where the first element is an un-anchored regex (in java.util.regex.Pattern syntax) against which the platform name is matched, and the second element is either a list of source files or a list of tuples of source files and a list of compilation flags to be preprocessed, compiled and assembled if the platform matches the regex. See ",(0,i.jsx)(s.code,{children:"srcs"})," for more information."]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"preprocessor_flags"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(s.p,{children:"Flags to use when preprocessing any of the above sources (which require preprocessing)."}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"public_include_directories"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,i.jsxs)(s.p,{children:["A list of include directories (with ",(0,i.jsx)(s.code,{children:"raw_headers"}),") to be added to the compile command for compiling this target and every target that depends on it (via ",(0,i.jsx)(s.code,{children:"-I"}),"). An include directory is relative to the current package."]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"public_system_include_directories"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,i.jsxs)(s.p,{children:["A list of include directories (with ",(0,i.jsx)(s.code,{children:"raw_headers"}),") to be added to the compile command for compiling this target and every target that depends on it (via ",(0,i.jsx)(s.code,{children:"-isystem"})," if the compiler supports it of via ",(0,i.jsx)(s.code,{children:"-I"})," otherwise). An include directory is relative to the current package."]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"raw_headers"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,i.jsxs)(s.p,{children:["The set of header files that can be used for inclusion to the source files in the target and all targets that transitively depend on it. Buck doesn't add raw headers to the search path of a compiler/preprocessor automatically. ",(0,i.jsx)(s.code,{children:"include_directories"})," and ",(0,i.jsx)(s.code,{children:"public_include_directories"})," are the recommended way to add raw headers to the search path (they will be added via ",(0,i.jsx)(s.code,{children:"-I"}),"). ",(0,i.jsx)(s.code,{children:"compiler_flags"}),", ",(0,i.jsx)(s.code,{children:"preprocessor_flags"})," and ",(0,i.jsx)(s.code,{children:"exported_preprocessor_flags"})," can also be used to add such raw headers to the search path if inclusion via ",(0,i.jsx)(s.code,{children:"-isystem"})," or ",(0,i.jsx)(s.code,{children:"-iquote"})," is needed. ",(0,i.jsx)(s.code,{children:"raw_headers"})," cannot be used together with ",(0,i.jsx)(s.code,{children:"headers"})," or ",(0,i.jsx)(s.code,{children:"exported_headers"})," in the same target."]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"raw_headers_as_headers_mode"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"None"}),")"]}),"\n",(0,i.jsx)(s.p,{children:"Controls whether raw_headers and *include_directories attributes should be automatically converted to headers and symlink trees and/or header maps via headers. Only has an effect if the cxx_toolchain has explicitly opted into supporting this behavior via a non-default value, even if the value is disabled."}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"reexport_all_header_dependencies"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"None"}),")"]}),"\n",(0,i.jsx)(s.p,{children:"Whether to automatically re-export the exported headers of all dependencies."}),"\n",(0,i.jsxs)(s.p,{children:["When this is set to false, only exported headers from\n",(0,i.jsx)(s.code,{children:"exported_deps"})," are re-exported."]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"srcs"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,i.jsxs)(s.p,{children:["The set of C, C++, Objective-C, Objective-C++, or assembly source files to be preprocessed, compiled, and assembled by this rule. We determine which stages to run on each input source based on its file extension. See the ",(0,i.jsx)(s.a,{href:"https://gcc.gnu.org/onlinedocs/gcc/Overall-Options.html",children:"GCC documentation"})," for more detail on how file extensions are interpreted. Each element can be either a string specifying a source file (e.g. ",(0,i.jsx)(s.code,{children:"''"}),") or a tuple of a string specifying a source file and a list of compilation flags (e.g. ",(0,i.jsx)(s.code,{children:"('', ['-Wall', '-Werror'])"})," ). In the latter case the specified flags will be used in addition to the rule's other flags when preprocessing and compiling that file (if applicable)."]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"supported_platforms_regex"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"None"}),")"]}),"\n",(0,i.jsx)(s.p,{children:"If present, an un-anchored regex (in java.util.regex.Pattern syntax) that matches all platforms that this library supports. It will not be built for other platforms."}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"target_sdk_version"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"None"}),")"]}),"\n",(0,i.jsxs)(s.p,{children:["The minimum OS version that the library target should support, overriding the minimum set in ",(0,i.jsx)(s.code,{children:".buckconfig"}),". When set, Buck will automatically add flags to both Objective-C and Swift compilation that will allow the use of the new APIs without guarding code inside availability checks."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:"\n\napple_library(\n  name = 'MyLibrary',\n  deps = [\n    ':OtherLibrary',\n    '//Libraries:YetAnotherLibrary',\n  ],\n  preprocessor_flags = ['-fobjc-arc'],\n  headers = [\n    'MyHeader.h',\n  ],\n  srcs = [\n    'MySource.m',\n    'MySource.swift',\n  ],\n  frameworks = [\n    '$SDKROOT/System/Library/Frameworks/UIKit.framework',\n    '$SDKROOT/System/Library/Frameworks/Foundation.framework',\n  ],\n)\n\n\n"})})]})}function h(e={}){const{wrapper:s}={...(0,n.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);