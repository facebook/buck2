# Copyright (c) Meta Platforms, Inc. and affiliates.
#
# This source code is licensed under both the MIT license found in the
# LICENSE-MIT file in the root directory of this source tree and the Apache
# License, Version 2.0 found in the LICENSE-APACHE file in the root directory
# of this source tree.

# Provide information so that ELP is able to load a BUCK project

load("@prelude//:paths.bzl", "paths")

# ------------------ IMPL ------------------

def _add_includes_to_map(includes_map, includes):
    for inc in includes:
        includes_map[inc["value"]] = inc["type"]
    return includes_map

def _clean_up_includes(includes):
    # - Strip to just dir, not file name
    # - Remove duplicates
    # Note: Sometimes the buck rule generating the includes has an excludes glob for a directory.
    #       This flattening will potentially expose excluded files in the directory.
    #       But we do it, because otherwise the performance in erlang_service parsing is too poor.
    include_paths = [paths.dirname(p["value"]) for p in includes if p["type"] == "path"]
    include_paths = [_as_path(p) for p in _list_dedupe(include_paths)]
    targets = [t for t in includes if t["type"] == "target"]

    return include_paths + targets

def _get_includes(ctx, includes_target):
    return _clean_up_includes([_get_absolute_path(ctx, inc) for inc in includes_target.value()])

def _dep_includes(ctx, dep, target_universe):
    lookup_val = "{}:{}".format(dep.path, dep.name)
    dep_target = target_universe.lookup(lookup_val)
    if not dep_target:
        return []
    dep_target = dep_target[0]
    includes = dep_target.attrs_lazy().get("includes")

    if not includes:
        return []
    else:
        return _get_includes(ctx, includes)

def _cached_includes(ctx, cache, dep, target_universe):
    if dep in cache:
        dep_includes = cache[dep]
    else:
        dep_includes = _dep_includes(ctx, dep, target_universe)
        cache[dep] = dep_includes
    return (cache, dep_includes)

def _recursive_includes(ctx, cells, cache, seen, app, target_universe):
    """
    Recursive includes are used for resolving include_lib only (AZ:I hope).
    So all we need to do is built out the recursive tree of apps, and for each
    put in the parent directory
    """
    ct = app.configured_target()
    lookup_val = "{}:{}".format(ct.path, ct.name)
    app_target = target_universe.lookup(lookup_val)
    if app_target and len(app_target) > 0:
        app_target = app_target[0]
        if app_target.label in seen:
            return (cache, seen, [])
        else:
            (cache, res) = _cached_includes(ctx, cache, ct, target_universe)

            res.append(_as_path(str(_file_node_to_path(cells, app.path))))
            seen[app_target.label] = True

            # Run through dependent apps. Should we do deps too?
            app_apps = app_target.attrs_lazy().get("applications")
            if app_apps:
                for sub_app in app_apps.value():
                    res.append(_as_path(str(_file_node_to_path(cells, sub_app.path))))

                    (cache, seen, sub_res) = _recursive_includes(ctx, cells, cache, seen, sub_app, target_universe)

                    res += sub_res
            return (cache, seen, res)
    else:
        return (cache, seen, [])

def _get_absolute_path(ctx, src) -> dict[str, str]:
    """
    Get the absolute path of the thing passed in, which is either an artifact or a target label.
    """
    if isinstance(src, ConfiguredProvidersLabel):
        return _as_target(str(src.raw_target()))
    else:
        return _as_path(get_path_without_materialization(src, ctx, abs = True))

def _elp_config(ctx):
    included_targets = ctx.cli_args.included_targets

    # Load the prelude targets first, so if we are working in the prelude they will be overwritten
    # by included or deps targets, and processed in ELP
    all = {tgt.label: ("prelude", tgt) for tgt in ctx.cquery().kind("^erlang_app$", ctx.configured_targets("prelude//erlang/..."))}
    all.update({tgt.label: ("app", tgt) for tgt in ctx.cquery().kind("^(erlang_app|erlang_test)$", ctx.configured_targets(included_targets))})
    if ctx.cli_args.deps_targets:
        all.update({tgt.label: ("dep", tgt) for tgt in ctx.cquery().kind("^erlang_app$", ctx.configured_targets(ctx.cli_args.deps_targets))})
    result = {}
    for label, (typ, target) in all.items():
        label_name = label.raw_target()

        includes_map = {}
        includes = target.attrs_lazy().get("includes")
        if not includes:
            includes = []
        else:
            includes = _get_includes(ctx, includes)
        includes_map = _add_includes_to_map(includes_map, includes)

        deps_list = []
        apps_list = []
        included_apps_list = []
        deps = target.attrs_lazy().get("deps")
        if deps:
            deps_list = [tgt.raw_target() for tgt in deps.value()]

        apps = target.attrs_lazy().get("applications")
        if apps:
            apps_list = [tgt.raw_target() for tgt in apps.value()]

        included_apps = target.attrs_lazy().get("included_applications")
        if included_apps:
            included_apps_list = [tgt.raw_target() for tgt in included_apps.value()]

        srcs = target.attrs_lazy().get("srcs")
        if not srcs:
            srcs = []
        else:
            srcs = [_get_absolute_path(ctx, src) for src in srcs.value()]

        suite = target.attrs_lazy().get("suite")
        if not suite:
            suite = None
        elif suite.value() == None:
            suite = None
        else:
            suite_info = _get_absolute_path(ctx, suite.value())
            if suite_info["type"] == "path":
                suite = suite_info["value"]
            else:
                suite = None

        includes = [t for t in includes_map.keys() if includes_map[t] == "path"]
        srcs = _build_output(srcs)
        result[label_name] = dict(
            name = target.attrs_lazy().get("name"),
            app_name = target.attrs_lazy().get("app_name"),
            suite = suite,
            srcs = srcs,
            includes = includes,
            labels = target.attrs_lazy().get("labels"),
            deps = deps_list,
            apps = apps_list,
            included_apps = included_apps_list,
            origin = typ,
        )
    ctx.output.print_json(result)

def _file_node_to_path(cells: dict[str, str], file_node) -> str:
    cell, path = str(file_node).split("//", 1)
    return paths.join(cells[cell], path)

def _build_output(items: list[dict[str, str]]) -> list[str]:
    # we completely ignore targets, since we don't have support for generated files in ELP
    paths = _list_dedupe([p["value"] for p in items if p["type"] == "path"])
    return paths

def _list_dedupe(xs):
    return {x: True for x in xs}.keys()

def _as_path(src):
    return {"type": "path", "value": src}

def _as_target(src):
    return {"type": "target", "value": src}

# ------------------ INTERFACE ------------------

elp_config = bxl_main(
    impl = _elp_config,
    cli_args = {
        "deps_targets": cli_args.option(cli_args.list(cli_args.string()), doc = "Target to include deps from, if specified. See corresponding field in .elp.toml"),
        "included_targets": cli_args.list(cli_args.string(), doc = "Targets to include in the query. See corresponding field in .elp.toml"),
    },
)

# Run with `buck2 bxl prelude//erlang/elp.bxl:elp_config`
# e.g.
# buck2 bxl prelude//erlang/elp.bxl:elp_config -- --included_targets cell//...
