"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[85881],{28453:(e,t,r)=>{r.d(t,{R:()=>a,x:()=>i});var n=r(96540);const s={},o=n.createContext(s);function a(e){const t=n.useContext(o);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),n.createElement(o.Provider,{value:t},e.children)}},96886:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>l,frontMatter:()=>a,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"users/cheat_sheet","title":"Cheat Sheet","description":"This section provides example command lines that you can use to obtain","source":"@site/../docs/users/cheatsheet.md","sourceDirName":"users","slug":"/users/cheat_sheet","permalink":"/docs/users/cheat_sheet","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"cheat_sheet","title":"Cheat Sheet"},"sidebar":"main","previous":{"title":"IDE/Tools Integration (gopackagesdriver)","permalink":"/docs/users/languages/go/gopackagesdriver"},"next":{"title":"Common Issues","permalink":"/docs/users/faq/common_issues"}}');var s=r(74848),o=r(28453);const a={id:"cheat_sheet",title:"Cheat Sheet"},i="Buck2 Cheat Sheet",d={},c=[{value:"How do I find all the targets for a package?",id:"how-do-i-find-all-the-targets-for-a-package",level:3},{value:"How do I specify more than one target to <code>buck2 cquery</code>?",id:"how-do-i-specify-more-than-one-target-to-buck2-cquery",level:3},{value:"How do I get the attribute names and values for the targets returned by a query?",id:"how-do-i-get-the-attribute-names-and-values-for-the-targets-returned-by-a-query",level:3},{value:"How do I perform a query** *<strong>inside</strong>* **of a rule?",id:"how-do-i-perform-a-query-inside-of-a-rule",level:3},{value:"How do I find the dependencies for a target?",id:"how-do-i-find-the-dependencies-for-a-target",level:3},{value:"How do I find the buildfile that contains the target that owns a source file?",id:"how-do-i-find-the-buildfile-that-contains-the-target-that-owns-a-source-file",level:3}];function h(e){const t={a:"a",code:"code",em:"em",h1:"h1",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"buck2-cheat-sheet",children:"Buck2 Cheat Sheet"})}),"\n",(0,s.jsxs)(t.p,{children:["This section provides example command lines that you can use to obtain\ninformation about Buck2 and about your build. These techniques can help you to\nunderstand how your build works and to troubleshoot issues with your build.\nThese examples use the ",(0,s.jsx)(t.a,{href:"../query/cquery",children:(0,s.jsx)(t.code,{children:"buck2 cquery"})})," command. We recommend\ncquery over uquery in most cases because cquery operates on the configured\ngraph, which means that targets have had the expected configurations applied on\nthem."]}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"How do I find all the targets for a package?"}),"\n",(0,s.jsxs)(t.li,{children:["How do I specify more than one target to ",(0,s.jsx)(t.code,{children:"buck2 cquery"}),"?"]}),"\n",(0,s.jsx)(t.li,{children:"How do I get the attribute names and values for the targets that result from a\nquery?"}),"\n",(0,s.jsx)(t.li,{children:"How do I perform a query inside of a rule?"}),"\n",(0,s.jsx)(t.li,{children:"How do I find the dependencies for a target, that is, the targets on which a\nspecified target depends?"}),"\n",(0,s.jsx)(t.li,{children:"How do I find the reverse-dependencies for a target, that is, the targets that\ndepend on a specified target?"}),"\n",(0,s.jsx)(t.li,{children:"How do I find the build file that contains the target that owns a source file?"}),"\n"]}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.h3,{id:"how-do-i-find-all-the-targets-for-a-package",children:"How do I find all the targets for a package?"}),"\n",(0,s.jsxs)(t.p,{children:["Specify a ",(0,s.jsx)(t.em,{children:"build target pattern"})," that represents the targets in the package."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sh",children:"buck2 cquery path/to/dir/...\n"})}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"buck2 cquery"})," command can accept a\n",(0,s.jsx)(t.a,{href:"../../concepts/target_pattern",children:"build target pattern"})," as a parameter. If you\nspecify a build target pattern, Buck2 evaluates this pattern and shows all the\nbuild targets that match it."]}),"\n",(0,s.jsxs)(t.h3,{id:"how-do-i-specify-more-than-one-target-to-buck2-cquery",children:["How do I specify more than one target to ",(0,s.jsx)(t.code,{children:"buck2 cquery"}),"?"]}),"\n",(0,s.jsxs)(t.p,{children:["Use the ",(0,s.jsx)(t.code,{children:"buck2 cquery set()"})," operator. The following command line returns the\ntarget ",(0,s.jsx)(t.code,{children:"main"})," in the build file in the root of the Buck2 project and all the\ntargets from the build file in the ",(0,s.jsx)(t.code,{children:"myclass"})," subdirectory of the root."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sh",children:"buck2 cquery \"set( ':main' 'myclass:' )\"\n"})}),"\n",(0,s.jsx)(t.h3,{id:"how-do-i-get-the-attribute-names-and-values-for-the-targets-returned-by-a-query",children:"How do I get the attribute names and values for the targets returned by a query?"}),"\n",(0,s.jsxs)(t.p,{children:["Add the ",(0,s.jsx)(t.code,{children:"--output-attribute <ATTRIBUTE>"})," or ",(0,s.jsx)(t.code,{children:"--output-all-attributes"})," option to\nthe command line, followed by regular expressions that represent the attributes\nof interest."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sh",children:"buck2 cquery \"deps(foo:bar)\" --output-attribute 'name' 'exported_headers'\n"})}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"--output-attribute"})," option enables you to specify which attributes Buck2\nshould return. Instead of returning the names of the targets that match the\nquery expression, Buck2 returns the names and values of the specified attributes\nfor those targets in JSON format. Attributes are specified as regular\nexpressions. For example, ",(0,s.jsx)(t.code,{children:"'.*'"})," matches all attributes. See the\n",(0,s.jsxs)(t.a,{href:"../query/cquery",children:[(0,s.jsx)(t.code,{children:"buck2 cquery"})," docs"]})," for more details. The output for the\nexample query above might look something like the following."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'{\n  "root_cell//foo/bar/lib:lib": {\n    "exported_headers": ["App/util.h"],\n    "name": "lib"\n  },\n  "root_cell//foo/bar:app": {"exported_headers": ["App/lib.h"], "name": "app"}\n}\n'})}),"\n",(0,s.jsxs)(t.h3,{id:"how-do-i-perform-a-query-inside-of-a-rule",children:["How do I perform a query** *",(0,s.jsx)(t.strong,{children:"inside"}),"* **of a rule?"]}),"\n",(0,s.jsx)(t.p,{children:"Buck2 supports certain string parameter macros to be used when defining a\ntarget. You can use the query macros as such:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sh",children:'$(query_targets "queryfunction(:foo)")\n$(query_outputs "queryfunction(:foo)")\n$(query_targets_and_outputs [SEPARATOR] "queryfunction(:foo)")\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Note, however, that the query macros are supported only for rule attributes of\ntype ",(0,s.jsx)(t.code,{children:"attrs.arg"}),", such as ",(0,s.jsx)(t.a,{href:"../../prelude/rules/core/genrule",children:(0,s.jsx)(t.code,{children:"genrule"})})," and\n",(0,s.jsx)(t.a,{href:"../../prelude/rules/android/apk_genrule",children:(0,s.jsx)(t.code,{children:"apk_genrule"})}),"."]}),"\n",(0,s.jsx)(t.h3,{id:"how-do-i-find-the-dependencies-for-a-target",children:"How do I find the dependencies for a target?"}),"\n",(0,s.jsxs)(t.p,{children:["Use the ",(0,s.jsx)(t.code,{children:"deps()"})," operator."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sh",children:"buck2 cquery \"deps('foo:bar')\"\nbuck2 cquery \"deps('foo:bar', 1, first_order_deps())\"\nbuck2 cquery \"deps(set('foo:bar' 'foo:lib' 'foo/baz:util'))\"\n"})}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"deps"})," operator finds the dependencies of the specified targets. The first\nargument represents the targets of interest. This can be a single\n",(0,s.jsx)(t.a,{href:"../../concepts/build_target",children:"build target"})," or\n",(0,s.jsx)(t.a,{href:"../../concepts/target_pattern",children:"build target pattern"}),", or a set of these. The\noptional second argument is the ",(0,s.jsx)(t.em,{children:"depth"})," of the search for dependencies from the\nspecified targets. For example, ",(0,s.jsx)(t.code,{children:"1"}),", as shown in the example above, returns only\nthe direct dependencies. If you do not provide this argument, the output is the\ncomplete set of transitive dependencies. How do I find the reverse-dependencies\nfor a target, that is, the targets that** *",(0,s.jsx)(t.strong,{children:"depend on"}),"* **a specified\ntarget? Use the ",(0,s.jsx)(t.code,{children:"buck2 cquery rdeps()"})," (reverse dependencies) operator. The\nfollowing example, returns the targets in the\n",(0,s.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Transitive_closure",children:"transitive closure"})," of\n",(0,s.jsx)(t.code,{children:"foo:bar"})," that depend directly on ",(0,s.jsx)(t.code,{children:"example:baz"}),"."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sh",children:"buck2 cquery \"rdeps('foo:bar', 'example:baz', 1)\"\n"})}),"\n",(0,s.jsx)(t.h3,{id:"how-do-i-find-the-buildfile-that-contains-the-target-that-owns-a-source-file",children:"How do I find the buildfile that contains the target that owns a source file?"}),"\n",(0,s.jsxs)(t.p,{children:["In order to find the build file associated with a source file, combine the\n",(0,s.jsx)(t.code,{children:"owner"})," operator with ",(0,s.jsx)(t.code,{children:"buildfile"}),". For example,"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sh",children:"buck2 uquery \"buildfile(owner('foo/bar/main.cpp'))\"\n"})}),"\n",(0,s.jsx)(t.p,{children:"or alternatively"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"buck2 cquery \"buildfile(owner('foo/bar/main.cpp'))\" --target-universe 'foo:baz'\n"})}),"\n",(0,s.jsxs)(t.p,{children:["These two commands first find the targets that ",(0,s.jsx)(t.em,{children:"own"})," ",(0,s.jsx)(t.code,{children:"foo/bar/main.cpp"})," and then\nreturn the build files, such as ",(0,s.jsx)(t.code,{children:"foo/bar/BUCK"}),", that define those targets."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"cquery"})," requires a ",(0,s.jsx)(t.code,{children:"--target-universe"})," to be passed when the query has no\ntarget literals. See more in\n",(0,s.jsx)(t.a,{href:"/docs/concepts/glossary#target-universe",children:"target universe glossary entry"})]})]})}function l(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}}}]);