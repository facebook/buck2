load("@fbcode//buck2/prelude/utils:utils.bzl", "expect")

IjLibrary = record(
    jar = "artifact",
    label = "configured_target_label",
    name = str.type,
    rule_type = str.type,
    source_jar = ["artifact", None],
)

_PREBUILT_JAR_RULE_TYPE = "fbcode//buck2/prelude/rules.bzl:prebuilt_jar"
_LIBRARY_RULE_TYPES = [
    _PREBUILT_JAR_RULE_TYPE,
]

def get_libraries(all_nodes: "target_set") -> [IjLibrary.type]:
    libraries = []
    library_targets = []
    for node in all_nodes:
        rule_type = node.rule_type
        if rule_type not in _LIBRARY_RULE_TYPES:
            continue

        # TODO(T124405159) either account for config in the filename, or merge them
        raw_target = node.label.raw_target()
        if raw_target in library_targets:
            continue

        library_targets.append(raw_target)

        if rule_type == _PREBUILT_JAR_RULE_TYPE:
            libraries.append(_get_prebuilt_jar_ij_library(node))
        else:
            fail("Should add if branch above for rule type: {}".format(rule_type))

    return libraries

def _get_prebuilt_jar_ij_library(node: "target_node") -> IjLibrary.type:
    expect(node.rule_type == _PREBUILT_JAR_RULE_TYPE, "Rule type must be {} but was {}".format(_PREBUILT_JAR_RULE_TYPE, node.rule_type))
    return IjLibrary(
        name = str(node.label.raw_target()),
        jar = node.attrs().binary_jar.value(),
        label = node.label,
        rule_type = _PREBUILT_JAR_RULE_TYPE,
        source_jar = node.attrs().source_jar.value(),
    )

def get_project_library_json_file_name(library_label: "configured_target_label") -> str.type:
    # TODO(T124405159) this should also include the config
    package_name = library_label.package.replace("/", "_")
    return "libraries/__{}_{}__.json".format(package_name, library_label.name)

def get_library_json_contents(ij_library: IjLibrary.type) -> dict.type:
    # TODO(T124405159) name should also include the config
    return {
        "binaryJars": [ij_library.jar],
        "name": ij_library.name,
        "sourceJars": [ij_library.source_jar] if ij_library.source_jar else [],
        "type": "DEFAULT",
    }
