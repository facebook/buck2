"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[73927],{28453:(e,s,t)=>{t.d(s,{R:()=>d,x:()=>l});var n=t(96540);const r={},i=n.createContext(r);function d(e){const s=n.useContext(i);return n.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),n.createElement(i.Provider,{value:s},e.children)}},97607:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>c,contentTitle:()=>a,default:()=>x,frontMatter:()=>l,metadata:()=>n,toc:()=>o});const n=JSON.parse('{"id":"api/starlark/set","title":"set","description":"def set(arg: typing.Iterable = ..., /) -> set[typing.Any]","source":"@site/../docs/api/starlark/set.md","sourceDirName":"api/starlark","slug":"/api/starlark/set","permalink":"/docs/api/starlark/set","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"apiSidebar","previous":{"title":"range","permalink":"/docs/api/starlark/range"},"next":{"title":"str","permalink":"/docs/api/starlark/str"}}');var r=t(74848),i=t(28453),d=t(56289);const l={},a="set",c={},o=[{value:"set.add",id:"setadd",level:2},{value:"set.clear",id:"setclear",level:2},{value:"set.difference",id:"setdifference",level:2},{value:"set.discard",id:"setdiscard",level:2},{value:"set.intersection",id:"setintersection",level:2},{value:"set.issubset",id:"setissubset",level:2},{value:"set.issuperset",id:"setissuperset",level:2},{value:"set.pop",id:"setpop",level:2},{value:"set.remove",id:"setremove",level:2},{value:"set.symmetric_difference",id:"setsymmetric_difference",level:2},{value:"set.union",id:"setunion",level:2},{value:"set.update",id:"setupdate",level:2}];function h(e){const s={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"set",children:"set"})}),"\n",(0,r.jsx)("pre",{class:"language-python",children:(0,r.jsx)("code",{children:"def set(arg: typing.Iterable = ..., /) -> set[typing.Any]"})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"setadd",children:"set.add"}),"\n",(0,r.jsx)("pre",{class:"language-python",children:(0,r.jsx)("code",{children:"def set.add(value, /) -> None"})}),"\n",(0,r.jsxs)(s.p,{children:["Add an item to the set. ",(0,r.jsx)(s.code,{children:'# starlark::assert::is_true(r#" x = set([1, 2, 3]) x.add(4) x == set([1, 2, 3, 4]) # "#);'})]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"setclear",children:"set.clear"}),"\n",(0,r.jsx)("pre",{class:"language-python",children:(0,r.jsx)("code",{children:"def set.clear() -> None"})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"setdifference",children:"set.difference"}),"\n",(0,r.jsx)("pre",{class:"language-python",children:(0,r.jsx)("code",{children:"def set.difference(other: typing.Iterable, /) -> set[typing.Any]"})}),"\n",(0,r.jsxs)(s.p,{children:["Returns a new set with elements unique the set when compared to the specified iterable. ",(0,r.jsx)(s.code,{children:'# starlark::assert::is_true(r#" x = set([1, 2, 3]) y = [3, 4, 5] x.difference(y) == set([1, 2]) # "#);'})]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"setdiscard",children:"set.discard"}),"\n",(0,r.jsx)("pre",{class:"language-python",children:(0,r.jsx)("code",{children:"def set.discard(value, /) -> None"})}),"\n",(0,r.jsx)(s.p,{children:"Remove the item from the set. It does nothing if there is no such item."}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"discard"})," fails if the key is unhashable or if the dictionary is\nfrozen.\nTime complexity of this operation is ",(0,r.jsx)(s.em,{children:"O(N)"})," where ",(0,r.jsx)(s.em,{children:"N"})," is the number of entries in the set."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{children:"x = set([1, 2, 3])\nx.discard(2)\nx == set([1, 3])\n"})}),"\n",(0,r.jsxs)(s.p,{children:["A subsequent call to ",(0,r.jsx)(s.code,{children:"x.discard(2)"})," would do nothing."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{children:"x = set([1, 2, 3])\nx.discard(2)\nx.discard(2)\nx == set([1, 3])\n"})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"setintersection",children:"set.intersection"}),"\n",(0,r.jsx)("pre",{class:"language-python",children:(0,r.jsx)("code",{children:"def set.intersection(other: typing.Iterable, /) -> set[typing.Any]"})}),"\n",(0,r.jsxs)(s.p,{children:["Return a new set with elements common to the set and all others. Unlike Python does not support variable number of arguments. ",(0,r.jsx)(s.code,{children:'# starlark::assert::is_true(r#" x = set([1, 2, 3]) y = [3, 4, 5] x.intersection(y) == set([3]) # "#);'})]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"setissubset",children:"set.issubset"}),"\n",(0,r.jsx)("pre",{class:"language-python",children:(0,r.jsxs)("code",{children:["def set.issubset(\nother: typing.Iterable,\n/,\n) -> ",(0,r.jsx)(d.default,{to:"/docs/api/starlark/bool",children:"bool"})]})}),"\n",(0,r.jsxs)(s.p,{children:["Test whether every element in the set is in other iterable. ",(0,r.jsx)(s.code,{children:'# starlark::assert::is_true(r#" x = set([1, 2, 3]) y = [3, 1, 2] x.issubset(y) # "#);'})]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"setissuperset",children:"set.issuperset"}),"\n",(0,r.jsx)("pre",{class:"language-python",children:(0,r.jsxs)("code",{children:["def set.issuperset(\nother: typing.Iterable,\n/,\n) -> ",(0,r.jsx)(d.default,{to:"/docs/api/starlark/bool",children:"bool"})]})}),"\n",(0,r.jsxs)(s.p,{children:["Test whether every element other iterable is in the set. ",(0,r.jsx)(s.code,{children:'# starlark::assert::is_true(r#" x = set([1, 2, 3]) y = [1, 3] x.issuperset(y) == True # "#);'})]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"setpop",children:"set.pop"}),"\n",(0,r.jsx)("pre",{class:"language-python",children:(0,r.jsx)("code",{children:"def set.pop()"})}),"\n",(0,r.jsxs)(s.p,{children:["Removes and returns the ",(0,r.jsx)(s.strong,{children:"last"})," element of a set."]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"S.pop()"})," removes and returns the last element of the set S."]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"pop"})," fails if the set is empty, or if the set is frozen or has active iterators.\nTime complexity of this operation is ",(0,r.jsx)(s.em,{children:"O(1)"}),"."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{children:"x = set([1, 2, 3])\nx.pop() == 3\nx.pop() == 2\nx == set([1])\n"})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"setremove",children:"set.remove"}),"\n",(0,r.jsx)("pre",{class:"language-python",children:(0,r.jsx)("code",{children:"def set.remove(value, /) -> None"})}),"\n",(0,r.jsx)(s.p,{children:"Remove the item from the set. It raises an error if there is no such item."}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"remove"})," fails if the key is unhashable or if the dictionary is\nfrozen.\nTime complexity of this operation is ",(0,r.jsx)(s.em,{children:"O(N)"})," where ",(0,r.jsx)(s.em,{children:"N"})," is the number of entries in the set."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{children:"x = set([1, 2, 3])\nx.remove(2)\nx == set([1, 3])\n"})}),"\n",(0,r.jsxs)(s.p,{children:["A subsequent call to ",(0,r.jsx)(s.code,{children:"x.remove(2)"})," would yield an error because the\nelement won't be found."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{children:"x = set([1, 2, 3])\nx.remove(2)\nx.remove(2) # error: not found\n"})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"setsymmetric_difference",children:"set.symmetric_difference"}),"\n",(0,r.jsx)("pre",{class:"language-python",children:(0,r.jsx)("code",{children:"def set.symmetric_difference(other: typing.Iterable, /) -> set[typing.Any]"})}),"\n",(0,r.jsxs)(s.p,{children:["Returns a new set with elements in either the set or the specified iterable but not both. ",(0,r.jsx)(s.code,{children:'# starlark::assert::is_true(r#" x = set([1, 2, 3]) y = [3, 4, 5] x.symmetric_difference(y) == set([1, 2, 4, 5]) # "#);'})]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"setunion",children:"set.union"}),"\n",(0,r.jsx)("pre",{class:"language-python",children:(0,r.jsx)("code",{children:"def set.union(other: typing.Iterable, /) -> set[typing.Any]"})}),"\n",(0,r.jsxs)(s.p,{children:["Return a new set with elements from the set and all others. Unlike Python does not support variable number of arguments. ",(0,r.jsx)(s.code,{children:'# starlark::assert::is_true(r#" x = set([1, 2, 3]) y = [3, 4, 5] x.union(y) == set([1, 2, 3, 4, 5]) # "#);'})]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"setupdate",children:"set.update"}),"\n",(0,r.jsx)("pre",{class:"language-python",children:(0,r.jsx)("code",{children:"def set.update(other: typing.Iterable, /) -> None"})}),"\n",(0,r.jsxs)(s.p,{children:["Update the set by adding items from an iterable. ",(0,r.jsx)(s.code,{children:'# starlark::assert::is_true(r#" x = set([1, 3, 2]) x.update([4, 3]) list(x) == [1, 3, 2, 4] # "#);'})]})]})}function x(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}}}]);