"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[62660],{28453:(e,s,l)=>{l.d(s,{R:()=>a,x:()=>i});var n=l(96540);const r={},t=n.createContext(r);function a(e){const s=n.useContext(t);return n.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),n.createElement(t.Provider,{value:s},e.children)}},33561:(e,s,l)=>{l.r(s),l.d(s,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>i,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"api/bxl/cli_args","title":"cli_args","description":"bool","source":"@site/../docs/api/bxl/cli_args.md","sourceDirName":"api/bxl","slug":"/api/bxl/cli_args","permalink":"/docs/api/bxl/cli_args","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"apiSidebar","previous":{"title":"UqueryContext","permalink":"/docs/api/bxl/UqueryContext"},"next":{"title":"ensure","permalink":"/docs/api/bxl_utils/ensure"}}');var r=l(74848),t=l(28453),a=l(56289);const i={},d="cli_args",o={},c=[{value:"bool",id:"bool",level:2},{value:"configured_target_expr",id:"configured_target_expr",level:2},{value:"configured_target_label",id:"configured_target_label",level:2},{value:"enum",id:"enum",level:2},{value:"float",id:"float",level:2},{value:"int",id:"int",level:2},{value:"json",id:"json",level:2},{value:"json_file",id:"json_file",level:2},{value:"list",id:"list",level:2},{value:"option",id:"option",level:2},{value:"string",id:"string",level:2},{value:"sub_target",id:"sub_target",level:2},{value:"sub_target_expr",id:"sub_target_expr",level:2},{value:"target_expr",id:"target_expr",level:2},{value:"target_label",id:"target_label",level:2}];function x(e){const s={code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",p:"p",strong:"strong",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"cli_args",children:"cli_args"})}),"\n",(0,r.jsx)(s.h2,{id:"bool",children:"bool"}),"\n",(0,r.jsx)("pre",{class:"language-python",children:(0,r.jsxs)("code",{children:["def bool(\ndefault = False,\ndoc: ",(0,r.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"}),' = "",\n*,\nshort = ...,\n) -> ',(0,r.jsx)(a.default,{to:"/docs/api/bxl/CliArgs",children:"bxl.CliArgs"})]})}),"\n",(0,r.jsxs)(s.p,{children:['Accepts "true" or "false" from cli, and get a ',(0,r.jsx)(s.code,{children:"bool"})," in bxl. If not given, will get ",(0,r.jsx)(s.code,{children:"false"})]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"configured_target_expr",children:"configured_target_expr"}),"\n",(0,r.jsx)("pre",{class:"language-python",children:(0,r.jsxs)("code",{children:["def configured_target_expr(\ndoc: ",(0,r.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"}),' = "",\n*,\nshort = ...,\n) -> ',(0,r.jsx)(a.default,{to:"/docs/api/bxl/CliArgs",children:"bxl.CliArgs"})]})}),"\n",(0,r.jsxs)(s.p,{children:['Takes an arg from the cli, and treats it as a target pattern, e.g. "cell//foo',":bar",'", "cell//foo:", or "cell//foo/..." The target can be configured using either ?modifier syntax or --modifier flag, in addition to --target-platforms flag. We will get a list of ',(0,r.jsx)(s.code,{children:"ConfiguredTargetLabel"})," in bxl."]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"configured_target_label",children:"configured_target_label"}),"\n",(0,r.jsx)("pre",{class:"language-python",children:(0,r.jsxs)("code",{children:["def configured_target_label(\ndoc: ",(0,r.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"}),' = "",\n*,\nshort = ...,\n) -> ',(0,r.jsx)(a.default,{to:"/docs/api/bxl/CliArgs",children:"bxl.CliArgs"})]})}),"\n",(0,r.jsxs)(s.p,{children:["Takes an arg from cli, and gets a parsed ",(0,r.jsx)(s.code,{children:"ConfiguredTargetLabel"})," in bxl. The target can be configured using either ?modifier syntax or --modifier flag, in addition to --target-platforms flag."]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"enum",children:"enum"}),"\n",(0,r.jsx)("pre",{class:"language-python",children:(0,r.jsxs)("code",{children:["def enum(\nvariants: list[",(0,r.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"}),"] | tuple[",(0,r.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"}),", ...],\n/,\ndefault = ...,\ndoc: ",(0,r.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"}),' = "",\n*,\nshort = ...,\n) -> ',(0,r.jsx)(a.default,{to:"/docs/api/bxl/CliArgs",children:"bxl.CliArgs"})]})}),"\n",(0,r.jsxs)(s.p,{children:["Takes a set of defined values in ",(0,r.jsx)(s.code,{children:"variants"}),", and gets a ",(0,r.jsx)(s.code,{children:"str"})," in bxl."]}),"\n",(0,r.jsxs)(s.p,{children:["e.g. ",(0,r.jsx)(s.code,{children:'cli.args.enumeration(["foo", "bar"])'}),' defines an arg that only accepts "foo" or "bar".']}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"float",children:"float"}),"\n",(0,r.jsx)("pre",{class:"language-python",children:(0,r.jsxs)("code",{children:["def float(\ndefault = ...,\ndoc: ",(0,r.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"}),' = "",\n*,\nshort = ...,\n) -> ',(0,r.jsx)(a.default,{to:"/docs/api/bxl/CliArgs",children:"bxl.CliArgs"})]})}),"\n",(0,r.jsxs)(s.p,{children:["Takes an arg from cli, and gets a ",(0,r.jsx)(s.code,{children:"float"})," in bxl"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"int",children:"int"}),"\n",(0,r.jsx)("pre",{class:"language-python",children:(0,r.jsxs)("code",{children:["def int(\ndefault = ...,\ndoc: ",(0,r.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"}),' = "",\n*,\nshort = ...,\n) -> ',(0,r.jsx)(a.default,{to:"/docs/api/bxl/CliArgs",children:"bxl.CliArgs"})]})}),"\n",(0,r.jsxs)(s.p,{children:["Takes an arg from cli, and gets a ",(0,r.jsx)(s.code,{children:"int"})," in bxl"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"json",children:"json"}),"\n",(0,r.jsx)("pre",{class:"language-python",children:(0,r.jsxs)("code",{children:["def json(\ndoc: ",(0,r.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"}),' = "",\n*,\nshort = ...,\n) -> ',(0,r.jsx)(a.default,{to:"/docs/api/bxl/CliArgs",children:"bxl.CliArgs"})]})}),"\n",(0,r.jsx)(s.p,{children:"Takes an arg from cli, and would be treated as a json string, and return a json object in bxl."}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Note"}),": It will not accept a json file path, if you want to pass a json file path, you can use ",(0,r.jsx)(s.code,{children:"cli_args.json_file()"})]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"json_file",children:"json_file"}),"\n",(0,r.jsx)("pre",{class:"language-python",children:(0,r.jsxs)("code",{children:["def json_file(\ndoc: ",(0,r.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"}),' = "",\n*,\nshort = ...,\n) -> ',(0,r.jsx)(a.default,{to:"/docs/api/bxl/CliArgs",children:"bxl.CliArgs"})]})}),"\n",(0,r.jsx)(s.p,{children:"Takes an arg from cli, and would be treated as a json file, and return a json object in bxl. It support both relative and absolute path. If it's a relative path, it will be resolved relative to the buck project root."}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"list",children:"list"}),"\n",(0,r.jsx)("pre",{class:"language-python",children:(0,r.jsxs)("code",{children:["def list(\ninner: ",(0,r.jsx)(a.default,{to:"/docs/api/bxl/CliArgs",children:"bxl.CliArgs"}),",\n/,\ndefault = ...,\ndoc: ",(0,r.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"}),' = "",\n*,\nshort = ...,\n) -> ',(0,r.jsx)(a.default,{to:"/docs/api/bxl/CliArgs",children:"bxl.CliArgs"})]})}),"\n",(0,r.jsx)(s.p,{children:"Takes a list of args from cli, and gets a list of inner type in bxl."}),"\n",(0,r.jsxs)(s.p,{children:["e.g. ",(0,r.jsx)(s.code,{children:"cli.args.list(cli.args.string())"})," declares that the cli flag takes a list of args from cli, and gets a list of strings in bxl."]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"option",children:"option"}),"\n",(0,r.jsx)("pre",{class:"language-python",children:(0,r.jsxs)("code",{children:["def option(\ninner: ",(0,r.jsx)(a.default,{to:"/docs/api/bxl/CliArgs",children:"bxl.CliArgs"}),",\ndoc: ",(0,r.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"}),' = "",\ndefault = None,\n*,\nshort = ...,\n) -> ',(0,r.jsx)(a.default,{to:"/docs/api/bxl/CliArgs",children:"bxl.CliArgs"})]})}),"\n",(0,r.jsxs)(s.p,{children:["Takes a arg from cli, and gets an inner type in bxl. If not given, will get ",(0,r.jsx)(s.code,{children:"None"})," in bxl."]}),"\n",(0,r.jsxs)(s.p,{children:["e.g. ",(0,r.jsx)(s.code,{children:"cli.args.option(cli.args.int())"})," defines an optional int arg."]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"string",children:"string"}),"\n",(0,r.jsx)("pre",{class:"language-python",children:(0,r.jsxs)("code",{children:["def string(\ndefault = ...,\ndoc: ",(0,r.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"}),' = "",\n*,\nshort = ...,\n) -> ',(0,r.jsx)(a.default,{to:"/docs/api/bxl/CliArgs",children:"bxl.CliArgs"})]})}),"\n",(0,r.jsx)(s.p,{children:"Takes an arg from cli, and gets a string in bxl"}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"sub_target",children:"sub_target"}),"\n",(0,r.jsx)("pre",{class:"language-python",children:(0,r.jsxs)("code",{children:["def sub_target(\ndoc: ",(0,r.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"}),' = "",\n*,\nshort = ...,\n) -> ',(0,r.jsx)(a.default,{to:"/docs/api/bxl/CliArgs",children:"bxl.CliArgs"})]})}),"\n",(0,r.jsxs)(s.p,{children:["Takes an arg from cli, and gets a parsed ",(0,r.jsx)(s.code,{children:"ProvidersLabel"})," in bxl."]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Note"}),": this will not check if the target is valid."]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"sub_target_expr",children:"sub_target_expr"}),"\n",(0,r.jsx)("pre",{class:"language-python",children:(0,r.jsxs)("code",{children:["def sub_target_expr(\ndoc: ",(0,r.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"}),' = "",\n*,\nshort = ...,\n) -> ',(0,r.jsx)(a.default,{to:"/docs/api/bxl/CliArgs",children:"bxl.CliArgs"})]})}),"\n",(0,r.jsxs)(s.p,{children:["Takes an arg from cli, and would be treated as a sub target pattern. We will get a list of ",(0,r.jsx)(s.code,{children:"ProvidersLabel"})," in bxl."]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"target_expr",children:"target_expr"}),"\n",(0,r.jsx)("pre",{class:"language-python",children:(0,r.jsxs)("code",{children:["def target_expr(\ndoc: ",(0,r.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"}),' = "",\n*,\nshort = ...,\n) -> ',(0,r.jsx)(a.default,{to:"/docs/api/bxl/CliArgs",children:"bxl.CliArgs"})]})}),"\n",(0,r.jsxs)(s.p,{children:['Takes an arg from the cli, and treats it as a target pattern, e.g. "cell//foo',":bar",'", "cell//foo:", or "cell//foo/...". We will get a list of ',(0,r.jsx)(s.code,{children:"TargetLabel"})," in bxl."]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"target_label",children:"target_label"}),"\n",(0,r.jsx)("pre",{class:"language-python",children:(0,r.jsxs)("code",{children:["def target_label(\ndoc: ",(0,r.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"}),' = "",\n*,\nshort = ...,\n) -> ',(0,r.jsx)(a.default,{to:"/docs/api/bxl/CliArgs",children:"bxl.CliArgs"})]})}),"\n",(0,r.jsxs)(s.p,{children:["Takes an arg from cli, and gets a parsed ",(0,r.jsx)(s.code,{children:"TargetLabel"})," in bxl."]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Note"}),": this will not check if the target is valid."]})]})}function h(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(x,{...e})}):x(e)}}}]);