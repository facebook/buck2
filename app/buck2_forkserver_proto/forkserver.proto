/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under both the MIT license found in the
 * LICENSE-MIT file in the root directory of this source tree and the Apache
 * License, Version 2.0 found in the LICENSE-APACHE file in the root directory
 * of this source tree.
 */

syntax = "proto3";

import "google/protobuf/duration.proto";
import "data.proto";

package buck.forkserver;

message CommandRequest {
  reserved 3, 4, 7;
  // The executable that should be run.
  bytes exe = 1;
  // The arguments to give the executable.
  repeated bytes argv = 2;
  // The working directory of the command as it's being spawned.
  WorkingDirectory cwd = 5;
  // The max duration this command should be allowed to run for.
  google.protobuf.Duration timeout = 6;
  // Control the environment
  repeated EnvDirective env = 8;
  // Enable Miniperf if available?
  bool enable_miniperf = 9;

  message StdRedirectPaths {
    bytes stdout = 10;
    bytes stderr = 11;
  }
  // Used to optionally redirect stdout and stderr to files.
  // If set, stdout and stderr events will not be streamed.
  optional StdRedirectPaths std_redirects = 12;
}

message WorkingDirectory {
  bytes path = 1;
}

// Clear all the env
message EnvClear {}

// Remove one var
message EnvRemove {
  bytes key = 1;
}

// Set one var
message EnvSet {
  bytes key = 1;
  bytes value = 2;
}

message EnvDirective {
  oneof data {
    EnvClear clear = 1;
    EnvRemove remove = 2;
    EnvSet set = 3;
  }
}

message CommandEvent {
  oneof data {
    ExitEvent exit = 1;
    TimeoutEvent timeout = 2;
    StreamEvent stdout = 4;
    StreamEvent stderr = 5;
    CancelEvent cancel = 6;
    SpawnFailedEvent spawn_failed = 7;
  }
}

message ExitEvent {
  int32 exit_code = 1;
  optional buck.data.CommandExecutionStats execution_stats = 2;
}

message TimeoutEvent {
  google.protobuf.Duration duration = 1;
}

message StreamEvent {
  bytes data = 1;
}

message CancelEvent {}

message CancelRequest {}

message SpawnFailedEvent {
  string reason = 1;
}

message RequestEvent {
  oneof data {
    CommandRequest command_request = 1;
    CancelRequest cancel_request = 2;
  }
}

message SetLogFilterRequest {
  string log_filter = 1;
}

message SetLogFilterResponse {}

service Forkserver {
  rpc Run(stream RequestEvent) returns (stream CommandEvent) {}

  // Update the daemon's log filter.
  rpc SetLogFilter(SetLogFilterRequest) returns (SetLogFilterResponse);
}
