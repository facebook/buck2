"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[91276],{28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>i});var r=n(96540);const a={},s=r.createContext(a);function o(e){const t=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),r.createElement(s.Provider,{value:t},e.children)}},73166:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>x,frontMatter:()=>i,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"api/bxl/LazyCqueryContext","title":"LazyCqueryContext","description":"The context for performing lazy cquery operations in bxl. The functions offered on this ctx are the same behaviour as the query functions available within cquery command.","source":"@site/../docs/api/bxl/LazyCqueryContext.md","sourceDirName":"api/bxl","slug":"/api/bxl/LazyCqueryContext","permalink":"/docs/api/bxl/LazyCqueryContext","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"apiSidebar","previous":{"title":"LazyContext","permalink":"/docs/api/bxl/LazyContext"},"next":{"title":"LazyResolvedAttrs","permalink":"/docs/api/bxl/LazyResolvedAttrs"}}');var a=n(74848),s=n(28453),o=n(56289);const i={},l="LazyCqueryContext",c={},u=[{value:"LazyCqueryContext.eval",id:"lazycquerycontexteval",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"lazycquerycontext",children:"LazyCqueryContext"})}),"\n",(0,a.jsxs)(t.p,{children:["The context for performing lazy ",(0,a.jsx)(t.code,{children:"cquery"})," operations in bxl. The functions offered on this ctx are the same behaviour as the query functions available within cquery command."]}),"\n",(0,a.jsxs)(t.p,{children:["An instance may be obtained with ",(0,a.jsx)(t.a,{href:"../LazyContext#lazycontextcquery",children:(0,a.jsx)(t.code,{children:"bxl.LazyContext.cquery()"})}),"."]}),"\n",(0,a.jsx)(t.h2,{id:"lazycquerycontexteval",children:"LazyCqueryContext.eval"}),"\n",(0,a.jsx)("pre",{class:"language-python",children:(0,a.jsxs)("code",{children:["def LazyCqueryContext.eval(\nquery: ",(0,a.jsx)(o.default,{to:"/docs/api/starlark/str",children:"str"}),",\n/,\n*,\nquery_args: None | ",(0,a.jsx)(o.default,{to:"/docs/api/bxl/UnconfiguredTargetSet",children:"target_set"})," | list[",(0,a.jsx)(o.default,{to:"/docs/api/starlark/str",children:"str"}),"] = None,\ntarget_universe: None | list[",(0,a.jsx)(o.default,{to:"/docs/api/starlark/str",children:"str"}),"] | tuple[",(0,a.jsx)(o.default,{to:"/docs/api/starlark/str",children:"str"}),", ...] = None,\n) -> ",(0,a.jsx)(o.default,{to:"/docs/api/bxl/Lazy",children:"bxl.Lazy"})]})}),"\n",(0,a.jsxs)(t.p,{children:["Evaluates some general query string. ",(0,a.jsx)(t.code,{children:"query_args"})," can be a target_set of unconfigured nodes, or a list of strings. Returns a ",(0,a.jsx)(t.code,{children:"dict"})," of target labels mapped to their ",(0,a.jsx)(t.code,{children:"target_set"})," results if ",(0,a.jsx)(t.code,{children:"query_args"})," was passed in, otherwise returns a single ",(0,a.jsx)(t.code,{children:"target_set"}),"."]}),"\n",(0,a.jsx)(t.p,{children:"Sample usage:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'def _impl_eval(ctx):\n    result1 = ctx.lazy.cquery().eval("inputs(root//bin:the_binary)").resolve()\n    ctx.output.print(result1)\n\n    result2 = ctx.lazy.cquery().eval("inputs(%s)", query_args = ["cell//path/to/file:target"]).resolve()\n    ctx.output.print(result2)\n'})})]})}function x(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);