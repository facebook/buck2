"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[76981],{28453:(n,e,t)=>{t.d(e,{R:()=>i,x:()=>s});var r=t(96540);const o={},c=r.createContext(o);function i(n){const e=r.useContext(c);return r.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:i(n.components),r.createElement(c.Provider,{value:e},n.children)}},48680:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>a,contentTitle:()=>s,default:()=>l,frontMatter:()=>i,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"concepts/configurations","title":"Configurations","description":"For rule authors see also: Configurations","source":"@site/../docs/concepts/configurations.md","sourceDirName":"concepts","slug":"/concepts/configurations","permalink":"/docs/concepts/configurations","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"configurations","title":"Configurations"},"sidebar":"main","previous":{"title":".buckconfig","permalink":"/docs/concepts/buckconfig"},"next":{"title":"Configuration modifiers","permalink":"/docs/concepts/modifiers"}}');var o=t(74848),c=t(28453);const i={id:"configurations",title:"Configurations"},s=void 0,a={},u=[];function d(n){const e={a:"a",code:"code",p:"p",pre:"pre",...(0,c.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(e.p,{children:["For rule authors see also: ",(0,o.jsx)(e.a,{href:"/docs/rule_authors/configurations",children:"Configurations"})]}),"\n",(0,o.jsxs)(e.p,{children:['When building a target, buck always builds it in a particular "configuration."\nThe configuration typically includes information like the target os, target\narch, sanitizers, opt level, etc. One way to understand the effect that a\nconfiguration has is via the ',(0,o.jsx)(e.code,{children:"cquery"})," and ",(0,o.jsx)(e.code,{children:"uquery"})," commands. The cquery command\nwill compute the appropriate configuration for a target and display a version of\nthat target's attributes with the configuration applied. The ",(0,o.jsx)(e.code,{children:"uquery"})," command\nwill not apply a configuration."]}),"\n",(0,o.jsxs)(e.p,{children:["Here is a heavily trimmed version of the outputs of invoking ",(0,o.jsx)(e.code,{children:"uquery"})," and\n",(0,o.jsx)(e.code,{children:"cquery"})," on ",(0,o.jsx)(e.code,{children:"//buck2/app/buck2_core:buck2_core"}),"."]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-sh",children:'> buck2 uquery -A \'"//buck2/app/buck2_core:buck2_core"\'\n{\n  "fbcode//buck2/app/buck2_core:buck2_core": {\n    "buck.type": "rust_library",\n    "buck.package": "fbcode//buck2/app/buck2_core:TARGETS",\n    "name": "buck2_core",\n    "visibility": [\n      "PUBLIC"\n    ],\n    "deps": {\n      "fbsource//third-party/rust:anyhow",\n      "fbsource//third-party/rust:arc-swap",\n      "fbsource//third-party/rust:blake3",\n      "fbsource//third-party/rust:compact_str",\n      "fbsource//third-party/rust:dashmap",\n      {\n        "__type": "selector",\n        "entries": {\n          "DEFAULT": [],\n          "ovr_config//os:windows": [\n            "fbsource//third-party/rust:common-path"\n          ]\n        }\n      },\n      {\n        "__type": "selector",\n        "entries": {\n          "DEFAULT": [],\n          "ovr_config//os:linux": [\n            "fbsource//third-party/rust:nix"\n          ]\n        }\n      },\n    },\n  }\n}\n'})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-sh",children:'> buck2 cquery -A \'"//buck2/app/buck2_core:buck2_core"\'\n{\n  "fbcode//buck2/app/buck2_core:buck2_core (ovr_config//platform/linux:<OMITTED>)": {\n    "buck.type": "rust_library",\n    "buck.package": "fbcode//buck2/app/buck2_core:TARGETS",\n    "buck.target_configuration": "ovr_config//platform/linux:<OMITTED>",\n    "buck.execution_platform": "fbcode//buck2/platform/<OMITTED>",\n    "name": "buck2_core",\n    "visibility": [\n      "PUBLIC"\n    ],\n    "deps": [\n      "fbsource//third-party/rust:anyhow (ovr_config//platform/linux:<OMITTED>)",\n      "fbsource//third-party/rust:arc-swap (ovr_config//platform/linux:<OMITTED>)",\n      "fbsource//third-party/rust:blake3 (ovr_config//platform/linux:<OMITTED>)",\n      "fbsource//third-party/rust:compact_str (ovr_config//platform/linux:<OMITTED>)",\n      "fbsource//third-party/rust:dashmap (ovr_config//platform/linux:<OMITTED>)",\n      "fbsource//third-party/rust:nix (ovr_config//platform/linux:<OMITTED>)"\n    ]\n}\n'})}),"\n",(0,o.jsxs)(e.p,{children:["The ",(0,o.jsx)(e.code,{children:"cquery"})," output has additional ",(0,o.jsx)(e.code,{children:"buck.target_configuration"})," and\n",(0,o.jsx)(e.code,{children:"buck.execution_platform"})," attributes which tell you what the target is being\nbuilt for and what it's being built on, respectively. ",(0,o.jsx)(e.code,{children:"uquery"})," doesn't have\nthose."]}),"\n",(0,o.jsxs)(e.p,{children:["The deps in ",(0,o.jsx)(e.code,{children:"uquery"})," also have a number of selects; these indicate that the\n",(0,o.jsx)(e.code,{children:"common-path"})," dependency should only be included when building for Windows,\nwhile the ",(0,o.jsx)(e.code,{children:"nix"})," dependency is needed only for Linux. In ",(0,o.jsx)(e.code,{children:"cquery"})," that\ndistinction has been resolved; because the target has been configured for Linux,\nthe ",(0,o.jsx)(e.code,{children:"nix"})," dependency is present and indistinguishable from any other, while the\n",(0,o.jsx)(e.code,{children:"common-path"})," dependency is gone."]})]})}function l(n={}){const{wrapper:e}={...(0,c.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(d,{...n})}):d(n)}}}]);