load("@fbcode_macros//build_defs:fbcode_toolchains.bzl", "fbcode_toolchains")
load("@fbcode_macros//build_defs:platform_utils.bzl", "platform_utils")
load("@fbcode_macros//build_defs/lib:python_versioning.bzl", "python_versioning")
load("@fbsource//tools/build_defs:buckconfig.bzl", "read_bool")
load("@fbsource//tools/build_defs:selects2.bzl", "selects2")
load(":cxx_toolchains.bzl", "config_backed_cxx_toolchain", "cxx_hacks", "cxx_toolchain_override")
load(":go_toolchains.bzl", "go_fbcode_toolchain")
load(":haskell_toolchains.bzl", "config_backed_haskell_toolchain")
load(":java_toolchains.bzl", "config_backed_java_toolchain", "prebuilt_jar_toolchain")
load(":ocaml_toolchains.bzl", "config_backed_ocaml_toolchain")
load(":python_bootstrap_toolchains.bzl", "config_backed_python_bootstrap_toolchain")
load(":python_toolchains.bzl", "config_backed_python_toolchain")
load(":rust_toolchains.bzl", "config_backed_rust_toolchain")

_fbcode_cxx_flavors = [
    #  "appletvos-arm64",
    #  "appletvsimulator-x86_64",
    #  "iphoneos-arm64",
    #  "iphoneos-armv7",
    #  "iphonesimulator-i386",
    #  "iphonesimulator-x86_64",
    #  "linux-x86_64",
    #  "maccatalyst-x86_64",
    #  "macosx-arm64",
    #  "macosx-x86_64",
    #  "macosx-x86_64_minimal_xcode",
    "platform009-clang",
    "platform009-clang-nosan",
    "platform009-clang-nosan-split-dwarf",
    "platform009-clang-split-dwarf",
    "platform009-clang-12",
    "platform009-clang-12-nosan",
    "platform009-clang-12-split-dwarf",
    "platform009-gcc",
    "platform010-clang",
    "platform010-clang-nosan",
    "platform010-clang-nosan-split-dwarf",
    "platform010-clang-split-dwarf",
    "platform010-gcc",
    "platform010-aarch64-clang",
    "platform010-aarch64-clang-nosan",
    "platform010-aarch64-clang-nosan-split-dwarf",
    "platform010-aarch64-clang-split-dwarf",
    "platform010-aarch64-gcc",
    "platform010-compat-clang",
    "platform010-compat-clang-nosan",
    "platform010-compat-clang-nosan-split-dwarf",
    "platform010-compat-clang-split-dwarf",
    "platform010-compat-gcc",
    #  "watchos-arm64_32",
    #  "watchos-armv7k",
    #  "watchsimulator-i386",
    #  "watchsimulator-x86_64",
    #  "windows-i386",
    #  "windows-x86_64",
]

_rust_flavors = _fbcode_cxx_flavors + [
    "macosx-x86_64_minimal_xcode",
]

_fbcode_python_platforms = {
    platform: python_versioning.get_platform_python_versions(platform)
    for platform in fbcode_toolchains.PLATFORMS + [
        "macosx-x86_64",
    ]
}

[config_backed_cxx_toolchain(
    name = flavor,
    flavor = flavor,
    target_compatible_with = [
        # should probably be that we require gvfs, but that's not well reflected
        "ovr_config//runtime/constraints:fbcode",
    ],
    # TODO(christylee): fbcode tools rely on the behavior that dwp subtargets are always available,
    # we should change this to use dwp subtargets only when available.
    split_dwarf_enabled = read_bool("fbcode", "split-dwarf", True),
    # Use thin archives for static libraries, by default.
    archive_contents = native.read_config("fbcode", "archive_contents", "thin"),
    visibility = ["PUBLIC"],
    bolt_enabled = True,
) for flavor in _fbcode_cxx_flavors]

# The buck2 apple toolchains use this as the base toolchain and override some values.
# But we don't want the target_compatible_with restriction.
# TODO(cjhopman, akhozhevnikov): We probably want to get rid of this, a lot of
# the non-overridden parts probably don't work correctly.
config_backed_cxx_toolchain(
    name = "platform009-clang-for-apple-toolchains",
    flavor = "platform009-clang",
    # This is only used as the base of a toolchain override, let that specify it's compatibility.
    target_compatible_with = None,
    visibility = ["PUBLIC"],
)

[cxx_toolchain_override(
    name = "buck2-" + flavor,
    base = ":" + flavor,
    target_compatible_with = [
        "ovr_config//runtime/constraints:fbcode",
    ],
    visibility = ["PUBLIC"],
) for flavor in _fbcode_cxx_flavors]

cxx_toolchain_override(
    name = "buck2-infer",
    base = ":platform009-clang",
    cxx_compiler = "fbsource//xplat/tools/infer:infer-fbcode-linux-capture",
    c_compiler = "fbsource//xplat/tools/infer:infer-fbcode-linux-capture",
    linker = "fbsource//xplat/tools/infer:infer-fbcode-linux-linker",
    archiver = "fbsource//xplat/tools/infer:infer-fbcode-linux-archiver",
    mk_shlib_intf = "fbsource//xplat/tools/infer:fake-mkshlibintf",
    target_compatible_with = [
        "ovr_config//runtime/constraints:fbcode",
    ],
    visibility = ["PUBLIC"],
)

# Required to support the $(cxx-header-tree) macro
cxx_hacks(
    name = "cxx-hacks",
    visibility = ["PUBLIC"],
)

go_fbcode_toolchain(
    name = "go-fbcode",
    # Set native platform linker flags.
    external_linker_flags = [
        "-Wl,--build-id=md5",
        # fbcode uses -nodefaultlibs ld flag by default. And C system
        # libraries are provided as implicit deps to corresponding buck
        # targets. To make this work for Go, it requires cgo_library,
        # but cgo is not supported for Go cross-compilation.
        # Work around by providing an explicit -lc and -ldl options.
        "-lc",
        "-ldl",
    ],
    visibility = ["PUBLIC"],
)

# Define fbcode-based Python toolchains.
[
    config_backed_python_toolchain(
        flavor = platform_utils.get_buck_python_platform(platform, version),
        # For fbcode platforms, we pick a host interpreter that's compatble with
        # the target platform but can run on the exec platform (e.g. use
        # platform010's py3.8 for py3.8 builds targeting platform010-aarch64).
        host_interpreter = selects2.apply(
            select({
                "DEFAULT": None,
                "ovr_config//runtime:fbcode": fbcode_toolchains.get_exec_fbcode_platform(platform),
            }),
            lambda platform: read_config(
                "python#{}".format(platform_utils.get_buck_python_platform(platform, version)),
                "interpreter",
            ),
        ),
        visibility = ["PUBLIC"],
    )
    for platform, versions in _fbcode_python_platforms.items()
    for version in versions
]

# Define fbcode-based bootstrap Python toolchains.
[
    config_backed_python_bootstrap_toolchain(
        flavor = platform_utils.get_buck_python_platform(platform, version),
        visibility = ["PUBLIC"],
    )
    for platform, versions in _fbcode_python_platforms.items()
    for version in versions
]

[config_backed_rust_toolchain(
    flavor = flavor,
    visibility = ["PUBLIC"],
) for flavor in _rust_flavors]

[
    config_backed_ocaml_toolchain(
        flavor = flavor,
        visibility = ["PUBLIC"],
    )
    for flavor in _fbcode_cxx_flavors
    if read_config("ocaml#" + flavor, "ocaml.compiler")
]

[
    config_backed_haskell_toolchain(
        flavor = flavor,
        visibility = ["PUBLIC"],
    )
    for flavor in _fbcode_cxx_flavors
    if read_config("haskell#" + flavor, "compiler")
]

config_backed_java_toolchain(
    name = "java_fbcode",
    # In v1, these are set as raw, repo-relative paths.  As we can't parse those
    # properly in v2 (and rightfully so), set them explicitly here using their
    # corresponding wrapper rule.
    java = "fbcode//tools/build/buck/wrappers:java11.sh",
    java_for_tests = "fbcode//tools/build/buck/wrappers:java.sh",
    visibility = ["PUBLIC"],
)

prebuilt_jar_toolchain(
    name = "prebuilt_jar_bootstrap",
    is_bootstrap_toolchain = True,
    visibility = ["PUBLIC"],
)

prebuilt_jar_toolchain(
    name = "prebuilt_jar",
    visibility = ["PUBLIC"],
)
