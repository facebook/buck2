/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under both the MIT license found in the
 * LICENSE-MIT file in the root directory of this source tree and the Apache
 * License, Version 2.0 found in the LICENSE-APACHE file in the root directory
 * of this source tree.
 */

use buck2_core::is_open_source;

use crate::interface::HealthCheckType;

/// Severity of the issue reported by a health check.
pub enum Severity {
    Info,
    Warning,
}

/// Remediation for an issue reported by a health check.
pub enum Remediation {
    /// A message to display to the user.
    Message(String),
    /// A hyperlink to a page containing more details and remediation.
    Link(String),
}

/// Report generated by a health check.
pub struct Report {
    /// Display report to be shown to the user. Some health checks may only log tags.
    pub display_report: Option<DisplayReport>,

    /// Tags to be logged to scuba.
    pub tag: Option<String>,
}

/// Report to be displayed to the user on the console.
pub struct DisplayReport {
    /// The health check that generated this report.
    pub health_check_type: HealthCheckType,

    /// An optional warning to display to the user.
    /// When a health check runs but has nothing to report, this field should be None.
    pub warning: Option<Warning>,
}

pub struct Warning {
    /// The severity of the issue reported by the health check.
    pub severity: Severity,

    /// The message to display to the user.
    pub message: String,

    /// The remediation for the issue reported by the health check.
    /// This is optional because some health checks may not have a remediation.
    pub remediation: Option<Remediation>,
}

impl std::fmt::Display for Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let remediation = if is_open_source() {
            String::new()
        } else {
            match &self.remediation {
                Some(Remediation::Message(message)) => {
                    format!(". {}", message)
                }
                Some(Remediation::Link(link)) => {
                    format!(". Refer to {}", link)
                }
                None => String::new(),
            }
        };
        write!(f, "{}{}", self.message, remediation)
    }
}

#[cfg(fbcode_build)]
#[cfg(test)]
mod tests {
    use super::*;
    #[test]
    fn test_display_report_with_message_remediation() {
        let report = Warning {
            severity: Severity::Warning,
            message: "This is a warning".to_owned(),
            remediation: Some(Remediation::Message("Fix this by doing X".to_owned())),
        };

        assert_eq!(report.to_string(), "This is a warning. Fix this by doing X");
    }

    #[test]
    fn test_display_report_with_link_remediation() {
        let report = Warning {
            severity: Severity::Info,
            message: "Information message".to_owned(),
            remediation: Some(Remediation::Link("https://example.com/help".to_owned())),
        };

        assert_eq!(
            report.to_string(),
            "Information message. Refer to https://example.com/help"
        );
    }

    #[test]
    fn test_display_report_without_remediation() {
        let report = Warning {
            severity: Severity::Warning,
            message: "Just a message".to_owned(),
            remediation: None,
        };

        assert_eq!(report.to_string(), "Just a message");
    }
}
