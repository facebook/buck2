load("@prelude//erlang:erlang_toolchain.bzl", "erlang_parse_transform", "toolchain_utilities")
load("@prelude//utils:source_listing.bzl", "source_listing")

oncall("build_infra")

source_listing()

erlang_parse_transform(
    name = "transform_project_root",
    src = "transform_project_root.erl",
    visibility = ["PUBLIC"],
)

# export escripts for testing
filegroup(
    name = "util_scripts",
    srcs = glob([
        "*.escript",
        "*.sh",
        "*.erl",
    ]),
    visibility = ["PUBLIC"],
)

toolchain_utilities(
    name = "toolchain_utilities",
    app_src_script = "app_src_builder.escript",
    boot_script_builder = "boot_script_builder.escript",
    core_parse_transforms = [":transform_project_root"],
    dependency_analyzer = "dependency_analyzer.escript",
    dependency_finalizer = "dependency_finalizer.escript",
    edoc = "edoc_cli.escript",
    erlc_trampoline = "erlc_trampoline.sh",
    escript_builder = "escript_builder.escript",
    escript_trampoline = "escript_trampoline.sh",
    include_erts = "include_erts.escript",
    release_variables_builder = "release_variables_builder.escript",
    utility_modules = [
        "edoc_doclet_chunks.erl",
        "edoc_report.erl",
        "epp_dodger.erl",
        "json.erl",
    ],
    visibility = ["PUBLIC"],
)

# exported for use in shell & test binary, they have a runtime dependency on json
# can be removed once we're on OTP 27
erlang_application(
    name = "toolchain_json",
    srcs = ["json.erl"],
    applications = [
        "kernel",
        "stdlib",
    ],
    erl_opts = [
        "+deterministic",
        "+warnings_as_errors",
    ],
    labels = ["otp_compatibility_polyfill_application"],
    shell_libs = [],
    use_global_parse_transforms = False,
    visibility = ["PUBLIC"],
)
