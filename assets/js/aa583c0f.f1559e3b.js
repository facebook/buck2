"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[36510],{28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>c});var r=t(96540);const i={},s=r.createContext(i);function o(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(s.Provider,{value:n},e.children)}},62323:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>g,frontMatter:()=>o,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"api/bxl/ConfiguredTargetSet","title":"ConfiguredTargetSet","description":"A set-like object for managing buck2 target nodes.","source":"@site/../docs/api/bxl/ConfiguredTargetSet.md","sourceDirName":"api/bxl","slug":"/api/bxl/ConfiguredTargetSet","permalink":"/docs/api/bxl/ConfiguredTargetSet","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"apiSidebar","previous":{"title":"ConfiguredTargetNode","permalink":"/docs/api/bxl/ConfiguredTargetNode"},"next":{"title":"Context","permalink":"/docs/api/bxl/Context"}}');var i=t(74848),s=t(28453);t(56289);const o={},c="ConfiguredTargetSet",a={},d=[];function l(e){const n={a:"a",code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"configuredtargetset",children:"ConfiguredTargetSet"})}),"\n",(0,i.jsx)(n.p,{children:"A set-like object for managing buck2 target nodes."}),"\n",(0,i.jsxs)(n.p,{children:["It can be obtained from several functions in ",(0,i.jsx)(n.a,{href:"../Context",children:(0,i.jsx)(n.code,{children:"bxl.Context"})})," and\n",(0,i.jsx)(n.a,{href:"../UqueryContext",children:(0,i.jsx)(n.code,{children:"bxl.UqueryContext"})}),"/",(0,i.jsx)(n.a,{href:"../CqueryContext",children:(0,i.jsx)(n.code,{children:"bxl.CqueryContext"})}),"/",(0,i.jsx)(n.a,{href:"../AqueryContext",children:(0,i.jsx)(n.code,{children:"bxl.AqueryContext"})}),",\namong other places."]}),"\n",(0,i.jsxs)(n.p,{children:["It can be either ",(0,i.jsx)(n.a,{href:"../ConfiguredTargetSet",children:(0,i.jsx)(n.code,{children:"ConfiguredTargetSet"})})," or ",(0,i.jsx)(n.a,{href:"../UnconfiguredTargetSet",children:(0,i.jsx)(n.code,{children:"UnconfiguredTargetSet"})})," which respectively contain either ",(0,i.jsx)(n.a,{href:"../ConfiguredTargetNode",children:(0,i.jsx)(n.code,{children:"ConfiguredTargetNode"})})," or ",(0,i.jsx)(n.a,{href:"../UnconfiguredTargetNode",children:(0,i.jsx)(n.code,{children:"UnconfiguredTargetNode"})}),"."]}),"\n",(0,i.jsx)(n.p,{children:"It provides common set operations for target nodes.\nIt supports iteration, indexing, addition (union), subtraction (difference), equality comparison, and intersection operations."}),"\n",(0,i.jsx)(n.p,{children:"Operations:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"+"}),"  : Union of two TargetSets"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"-"}),"  : Difference between two TargetSets"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"=="})," : Equality comparison"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"&"})," : Intersection of two TargetSets"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"[]"})," : Index access"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"len()"}),": Number of targets in set"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"iter()"}),": Iteration over targets"]}),"\n",(0,i.jsxs)(n.li,{children:["constructor: ",(0,i.jsx)(n.a,{href:"../#ctarget_set",children:(0,i.jsx)(n.code,{children:"bxl.ctarget_set()"})})," for ",(0,i.jsx)(n.code,{children:"ConfiguredTargetSet"})," and ",(0,i.jsx)(n.a,{href:"../#utarget_set",children:(0,i.jsx)(n.code,{children:"bxl.utarget_set()"})})," for ",(0,i.jsx)(n.code,{children:"UnconfiguredTargetSet"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Combine sets\nall_targets = targets1 + targets2  # Union\n\n# Remove targets\nremaining = targets1 - targets2    # Difference\n\n# Check if sets are equal\nif targets1 == targets2:\n    print("Sets contain same targets")\n\n# Iterate through targets\nfor target in targets1:\n   print(target)\n\n # Get target by index\nfirst_target = targets1[0]\n\n# Get number of targets\ncount = len(targets1)\n\n# Intersection of sets\ncommon = targets1 & targets2\n'})})]})}function g(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}}}]);