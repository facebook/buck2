"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[33228],{4559:(e,t,c)=>{c.r(t),c.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"api/bxl/SelectDict","title":"SelectDict","description":"In bxl, Select = bxl.SelectDict | bxl.SelectConcat. bxl.SelectDict is a dict-like object that represents a select. One example of this type is:","source":"@site/../docs/api/bxl/SelectDict.md","sourceDirName":"api/bxl","slug":"/api/bxl/SelectDict","permalink":"/docs/api/bxl/SelectDict","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"apiSidebar","previous":{"title":"SelectConcat","permalink":"/docs/api/bxl/SelectConcat"},"next":{"title":"TargetUniverse","permalink":"/docs/api/bxl/TargetUniverse"}}');var l=c(74848),n=c(28453),r=c(56289);const i={},a="SelectDict",d={},o=[{value:"SelectDict.get_select_entry",id:"selectdictget_select_entry",level:2},{value:"SelectDict.select_items",id:"selectdictselect_items",level:2},{value:"SelectDict.select_keys",id:"selectdictselect_keys",level:2}];function h(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,n.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(t.header,{children:(0,l.jsx)(t.h1,{id:"selectdict",children:"SelectDict"})}),"\n",(0,l.jsxs)(t.p,{children:["In bxl, ",(0,l.jsx)(t.code,{children:"Select = bxl.SelectDict | bxl.SelectConcat"}),". ",(0,l.jsx)(t.code,{children:"bxl.SelectDict"})," is a dict-like object that represents a select. One example of this type is:"]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-python",children:'select({\n     "root//constraints:a": ["--foo"],\n     "root//constraints:b": ["--bar"],\n     "DEFAULT": ["baz"]\n })\n'})}),"\n",(0,l.jsx)(t.p,{children:"You can:"}),"\n",(0,l.jsxs)(t.ul,{children:["\n",(0,l.jsxs)(t.li,{children:["Iterate over its keys (e.g., ",(0,l.jsx)(t.code,{children:"for key in select_dict.select_keys():"}),")."]}),"\n",(0,l.jsxs)(t.li,{children:["Iterate over key-value pairs using select_dict.select_items() (e.g., ",(0,l.jsx)(t.code,{children:"for key, value in select_dict.select_items():"}),")."]}),"\n",(0,l.jsxs)(t.li,{children:["Get the select entry with a string or a ProvidersLabel (e.g., ",(0,l.jsx)(t.code,{children:'select_dict.get_select_entry("root//constraints:a")'}),")."]}),"\n",(0,l.jsx)(t.li,{children:"Check its type using `isinstance(select_dict, bxl.SelectDict)``."}),"\n"]}),"\n",(0,l.jsx)(t.h2,{id:"selectdictget_select_entry",children:"SelectDict.get_select_entry"}),"\n",(0,l.jsx)("pre",{class:"language-python",children:(0,l.jsxs)("code",{children:["def SelectDict.get_select_entry(\nkey: ",(0,l.jsx)(r.default,{to:"/docs/api/build/ProvidersLabel",children:"ProvidersLabel"})," | ",(0,l.jsx)(r.default,{to:"/docs/api/starlark/str",children:"str"}),",\n/,\n)"]})}),"\n",(0,l.jsxs)(t.p,{children:["Return the entry of the select for the given key. It accepts either a string or a ",(0,l.jsx)(t.code,{children:"ProvidersLabel"}),"."]}),"\n",(0,l.jsx)(t.p,{children:"Sample usage:"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-python",children:'def _impl_select_dict(ctx):\n   node = ctx.lazy.unconfigured_target_node("root//:select_dict").resolve()\n   attr = node.get_attr("select_attr")\n   ctx.output.print(attr.get_select_entry("root//constraints:a"))\n   ctx.output.print(attr.get_select_entry("DEFAULT"))\n   # provider_label\'s type here is `ProvidersLabel`\n   ctx.output.print(attr.get_select_entry(provider_label))\n'})}),"\n",(0,l.jsx)(t.hr,{}),"\n",(0,l.jsx)(t.h2,{id:"selectdictselect_items",children:"SelectDict.select_items"}),"\n",(0,l.jsx)("pre",{class:"language-python",children:(0,l.jsxs)("code",{children:["def SelectDict.select_items(\n) -> list[(",(0,l.jsx)(r.default,{to:"/docs/api/build/ProvidersLabel",children:"ProvidersLabel"})," | ",(0,l.jsx)(r.default,{to:"/docs/api/starlark/str",children:"str"}),", typing.Any)]"]})}),"\n",(0,l.jsxs)(t.p,{children:["Return the key-value pairs of the select. The key is either a string (for ",(0,l.jsx)(t.code,{children:"DEFAULT"}),") or a ",(0,l.jsx)(t.code,{children:"ProvidersLabel"}),"."]}),"\n",(0,l.jsx)(t.p,{children:"Sample usage:"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-python",children:'def _impl_select_dict(ctx):\n    node = ctx.lazy.unconfigured_target_node("root//:select_dict").resolve()\n    attr = node.get_attr("select_attr")\n    for key, value in attr.select_items():\n        ctx.output.print(f"{key} -> {value}")\n'})}),"\n",(0,l.jsx)(t.hr,{}),"\n",(0,l.jsx)(t.h2,{id:"selectdictselect_keys",children:"SelectDict.select_keys"}),"\n",(0,l.jsx)("pre",{class:"language-python",children:(0,l.jsxs)("code",{children:["def SelectDict.select_keys(\n) -> list[",(0,l.jsx)(r.default,{to:"/docs/api/build/ProvidersLabel",children:"ProvidersLabel"})," | ",(0,l.jsx)(r.default,{to:"/docs/api/starlark/str",children:"str"}),"]"]})}),"\n",(0,l.jsxs)(t.p,{children:["Return the keys of SelectDict. The key is either a string (for ",(0,l.jsx)(t.code,{children:"DEFAULT"}),") or a ",(0,l.jsx)(t.code,{children:"ProvidersLabel"}),"."]}),"\n",(0,l.jsx)(t.p,{children:"Sample usage:"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-python",children:'def _impl_select_dict(ctx):\n    node = ctx.lazy.unconfigured_target_node("root//:select_dict").resolve()\n    attr = node.get_attr("select_attr")\n    for key in attr.select_keys():\n        ctx.output.print(key)\n'})})]})}function p(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,l.jsx)(t,{...e,children:(0,l.jsx)(h,{...e})}):h(e)}},28453:(e,t,c)=>{c.d(t,{R:()=>r,x:()=>i});var s=c(96540);const l={},n=s.createContext(l);function r(e){const t=s.useContext(n);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),s.createElement(n.Provider,{value:t},e.children)}}}]);