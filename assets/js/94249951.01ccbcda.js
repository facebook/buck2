"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[44474],{27553:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>c,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"concepts/toolchain","title":"Toolchain","description":"A toolchain defines a set of tools, scripts and flags used by certain rules.","source":"@site/../docs/concepts/toolchain.md","sourceDirName":"concepts","slug":"/concepts/toolchain","permalink":"/docs/concepts/toolchain","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"toolchain","title":"Toolchain"},"sidebar":"main","previous":{"title":"Visibility","permalink":"/docs/concepts/visibility"},"next":{"title":"Daemon (buckd)","permalink":"/docs/concepts/daemon"}}');var i=o(74848),s=o(28453);const c={id:"toolchain",title:"Toolchain"},r=void 0,l={},a=[];function d(e){const n={a:"a",code:"code",li:"li",p:"p",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"A toolchain defines a set of tools, scripts and flags used by certain rules.\nTheir purpose is to enable reuse of rules across projects that source their\ntools (e.g. compilers and linters) differently."}),"\n",(0,i.jsxs)(n.p,{children:["For example, consider ",(0,i.jsx)(n.code,{children:"cxx_binary"}),", which is defined in the prelude. Since\nbuilding C++ code is complex, it is desirable to share the same implementation\nof ",(0,i.jsx)(n.code,{children:"cxx_binary"})," across projects. However, not all projects will want to source\ntheir C++ compiler, linker, etc. the same way:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Some projects do not care, and want to pick them from the ambient environment\n(most likely the tools installed system-wide)."}),"\n",(0,i.jsx)(n.li,{children:"Some projects want to achieve reproducible builds by running the build within\nsome sort of virtual environment."}),"\n",(0,i.jsx)(n.li,{children:"Some projects want to achieve reproducible builds by downloading tools as part\nof the build itself."}),"\n",(0,i.jsx)(n.li,{children:"Some projects want to achieve reproducible builds by accessing tools checked\ninto version control."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Defining those in a toolchain lets us decouple those project-specific concerns\nfrom generic build rules."}),"\n",(0,i.jsxs)(n.p,{children:["When running ",(0,i.jsx)(n.code,{children:"buck2 init"}),", Buck2 sets up some demo toolchains via the\n",(0,i.jsx)(n.code,{children:"system_demo_toolchains"})," macro. Those expect to find the relevant tools in the\nuser's ",(0,i.jsx)(n.code,{children:"PATH"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["For more information about defining toolchains, see the\n",(0,i.jsx)(n.a,{href:"/docs/rule_authors/writing_toolchains",children:"relevant page in the Rule Authors section"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,o)=>{o.d(n,{R:()=>c,x:()=>r});var t=o(96540);const i={},s=t.createContext(i);function c(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);