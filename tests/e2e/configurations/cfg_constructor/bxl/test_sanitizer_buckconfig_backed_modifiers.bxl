# Copyright (c) Meta Platforms, Inc. and affiliates.
#
# This source code is licensed under both the MIT license found in the
# LICENSE-MIT file in the root directory of this source tree and the Apache
# License, Version 2.0 found in the LICENSE-APACHE file in the root directory
# of this source tree.

load("@fbcode_macros//build_defs:sanitizers.bzl", "sanitizers")
load("@prelude//:asserts.bzl", "asserts")
load("@prelude//cfg/modifier:cfg_constructor.bzl", "cfg_constructor_post_constraint_analysis", "cfg_constructor_pre_constraint_analysis")
load(":util.bxl", "ALIASES", "TestRefs", "get_test_refs")

def _run_cfg_constructor(test_refs: TestRefs, target_modifiers: list[str] | None) -> PlatformInfo:
    refs, params = cfg_constructor_pre_constraint_analysis(
        package_modifiers = None,
        legacy_platform = None,
        target_modifiers = target_modifiers,
        cli_modifiers = [],
        rule_name = "_dummy",
        aliases = ALIASES,
        extra_data = struct(),
    )
    refs = {ref: test_refs.get(ref) for ref in refs}
    return cfg_constructor_post_constraint_analysis(refs = refs, params = params)

def _impl(ctx: bxl.Context):
    test_refs = get_test_refs(ctx)

    sanitizer = read_config("fbcode", "sanitizer")
    platform = _run_cfg_constructor(test_refs, target_modifiers = None)
    asserts.true(test_refs.make_cfg([sanitizers.get_sanitizer_constraint(sanitizer)]), platform.configuration)

    nosan = "ovr_config//build_mode/constraints:no-san"
    platform = _run_cfg_constructor(test_refs, target_modifiers = [nosan])
    asserts.true(test_refs.make_cfg([nosan]), platform.configuration)

test = bxl_main(
    impl = _impl,
    cli_args = {},
)
