"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[24433],{8261:(e,t,d)=>{d.r(t),d.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>n,metadata:()=>a,toc:()=>o});const a=JSON.parse('{"id":"api/build/cmd_args","title":"cmd_args","description":"The cmdargs type is created by cmdargs() and is consumed by ctx.actions.run. The type is a mutable collection of strings and artifact values. In general, command lines, artifacts, strings, RunInfo and lists thereof can be added to or used to construct a cmd_args value. All these methods operate mutably on cmd and return that value too.","source":"@site/../docs/api/build/cmd_args.md","sourceDirName":"api/build","slug":"/api/build/cmd_args","permalink":"/docs/api/build/cmd_args","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"apiSidebar","previous":{"title":"attrs","permalink":"/docs/api/build/attrs"},"next":{"title":"dynattrs","permalink":"/docs/api/build/dynattrs/"}}');var r=d(74848),s=d(28453),i=d(56289);const n={},c="cmd_args",l={},o=[{value:"<code>ignore_artifacts</code>",id:"ignore_artifacts",level:3},{value:"<code>hidden</code>",id:"hidden",level:3},{value:"<code>absolute_prefix</code> and <code>absolute_suffix</code>",id:"absolute_prefix-and-absolute_suffix",level:3},{value:"<code>parent</code>",id:"parent",level:3},{value:"<code>relative_to=dir</code> or <code>relative_to=(dir, parent)</code>",id:"relative_todir-or-relative_todir-parent",level:3},{value:"<code>replace_regex</code>",id:"replace_regex",level:3},{value:"cmd_args.add",id:"cmd_argsadd",level:2},{value:"cmd_args.copy",id:"cmd_argscopy",level:2},{value:"cmd_args.inputs",id:"cmd_argsinputs",level:2},{value:"cmd_args.outputs",id:"cmd_argsoutputs",level:2},{value:"cmd_args.relative_to",id:"cmd_argsrelative_to",level:2}];function h(e){const t={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"cmd_args",children:"cmd_args"})}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"cmd_args"})," type is created by ",(0,r.jsx)(t.code,{children:"cmd_args()"})," and is consumed by ",(0,r.jsx)(t.code,{children:"ctx.actions.run"}),". The type is a mutable collection of strings and ",(0,r.jsx)(t.code,{children:"artifact"})," values. In general, command lines, artifacts, strings, ",(0,r.jsx)(t.code,{children:"RunInfo"})," and lists thereof can be added to or used to construct a ",(0,r.jsx)(t.code,{children:"cmd_args"})," value. All these methods operate mutably on ",(0,r.jsx)(t.code,{children:"cmd"})," and return that value too."]}),"\n",(0,r.jsx)("pre",{class:"language-python",children:(0,r.jsxs)("code",{children:["def cmd_args(\n*args: ",(0,r.jsx)(i.default,{to:"/docs/api/build/PromiseArtifact",children:"Artifact"})," | ",(0,r.jsx)(i.default,{to:"/docs/api/build/CellPath",children:"CellPath"})," | ",(0,r.jsx)(i.default,{to:"/docs/api/build/CellRoot",children:"CellRoot"})," | ",(0,r.jsx)(i.default,{to:"/docs/api/build/Label",children:"Label"})," | ",(0,r.jsx)(i.default,{to:"/docs/api/build/OutputArtifact",children:"OutputArtifact"})," | ",(0,r.jsx)(i.default,{to:"/docs/api/build/ProjectRoot",children:"ProjectRoot"})," | ",(0,r.jsx)(i.default,{to:"/docs/api/build/ResolvedStringWithMacros",children:"ResolvedStringWithMacros"})," | ",(0,r.jsx)(i.default,{to:"/docs/api/build/TaggedCommandLine",children:"TaggedCommandLine"})," | ",(0,r.jsx)(i.default,{to:"/docs/api/build/TargetLabel",children:"TargetLabel"})," | ",(0,r.jsx)(i.default,{to:"/docs/api/build/TransitiveSetArgsProjection",children:"TransitiveSetArgsProjection"})," | ",(0,r.jsx)(i.default,{to:"/docs/api/build/WriteJsonCliArgs",children:"WriteJsonCliArgs"})," | ",(0,r.jsx)(i.default,{to:"/docs/api/build/cmd_args",children:"cmd_args"})," | ",(0,r.jsx)(i.default,{to:"/docs/api/starlark/str",children:"str"})," | list | RunInfo,\nhidden: ",(0,r.jsx)(i.default,{to:"/docs/api/build/PromiseArtifact",children:"Artifact"})," | ",(0,r.jsx)(i.default,{to:"/docs/api/build/CellPath",children:"CellPath"})," | ",(0,r.jsx)(i.default,{to:"/docs/api/build/CellRoot",children:"CellRoot"})," | ",(0,r.jsx)(i.default,{to:"/docs/api/build/Label",children:"Label"})," | ",(0,r.jsx)(i.default,{to:"/docs/api/build/OutputArtifact",children:"OutputArtifact"})," | ",(0,r.jsx)(i.default,{to:"/docs/api/build/ProjectRoot",children:"ProjectRoot"})," | ",(0,r.jsx)(i.default,{to:"/docs/api/build/ResolvedStringWithMacros",children:"ResolvedStringWithMacros"})," | ",(0,r.jsx)(i.default,{to:"/docs/api/build/TaggedCommandLine",children:"TaggedCommandLine"})," | ",(0,r.jsx)(i.default,{to:"/docs/api/build/TargetLabel",children:"TargetLabel"})," | ",(0,r.jsx)(i.default,{to:"/docs/api/build/TransitiveSetArgsProjection",children:"TransitiveSetArgsProjection"})," | ",(0,r.jsx)(i.default,{to:"/docs/api/build/WriteJsonCliArgs",children:"WriteJsonCliArgs"})," | ",(0,r.jsx)(i.default,{to:"/docs/api/build/cmd_args",children:"cmd_args"})," | ",(0,r.jsx)(i.default,{to:"/docs/api/starlark/str",children:"str"})," | list | RunInfo = ...,\ndelimiter: ",(0,r.jsx)(i.default,{to:"/docs/api/starlark/str",children:"str"})," = ...,\nformat: ",(0,r.jsx)(i.default,{to:"/docs/api/starlark/str",children:"str"})," = ...,\nprepend: ",(0,r.jsx)(i.default,{to:"/docs/api/starlark/str",children:"str"})," = ...,\nquote: ",(0,r.jsx)(i.default,{to:"/docs/api/starlark/str",children:"str"})," = ...,\nignore_artifacts: ",(0,r.jsx)(i.default,{to:"/docs/api/starlark/bool",children:"bool"})," = False,\nabsolute_prefix: ",(0,r.jsx)(i.default,{to:"/docs/api/starlark/str",children:"str"})," = ...,\nabsolute_suffix: ",(0,r.jsx)(i.default,{to:"/docs/api/starlark/str",children:"str"})," = ...,\nparent: ",(0,r.jsx)(i.default,{to:"/docs/api/starlark/int",children:"int"})," = 0,\nrelative_to: ",(0,r.jsx)(i.default,{to:"/docs/api/build/PromiseArtifact",children:"Artifact"})," | ",(0,r.jsx)(i.default,{to:"/docs/api/build/CellRoot",children:"CellRoot"})," | ",(0,r.jsx)(i.default,{to:"/docs/api/build/OutputArtifact",children:"OutputArtifact"})," | ",(0,r.jsx)(i.default,{to:"/docs/api/build/ProjectRoot",children:"ProjectRoot"})," | (",(0,r.jsx)(i.default,{to:"/docs/api/build/PromiseArtifact",children:"Artifact"})," | ",(0,r.jsx)(i.default,{to:"/docs/api/build/CellRoot",children:"CellRoot"})," | ",(0,r.jsx)(i.default,{to:"/docs/api/build/OutputArtifact",children:"OutputArtifact"})," | ",(0,r.jsx)(i.default,{to:"/docs/api/build/ProjectRoot",children:"ProjectRoot"}),", ",(0,r.jsx)(i.default,{to:"/docs/api/starlark/int",children:"int"}),") = ...,\nreplace_regex: list[(",(0,r.jsx)(i.default,{to:"/docs/api/build/regex",children:"BuckRegex"})," | ",(0,r.jsx)(i.default,{to:"/docs/api/starlark/str",children:"str"}),", ",(0,r.jsx)(i.default,{to:"/docs/api/starlark/str",children:"str"}),")] | (",(0,r.jsx)(i.default,{to:"/docs/api/build/regex",children:"BuckRegex"})," | ",(0,r.jsx)(i.default,{to:"/docs/api/starlark/str",children:"str"}),", ",(0,r.jsx)(i.default,{to:"/docs/api/starlark/str",children:"str"}),") = ...,\n) -> ",(0,r.jsx)(i.default,{to:"/docs/api/build/cmd_args",children:"cmd_args"})]})}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"cmd_args"})," type is created by this function and is consumed by ",(0,r.jsx)(t.code,{children:"ctx.actions.run"}),". The type is a mutable collection of strings and artifact values. In general, command lines, artifacts, strings, ",(0,r.jsx)(t.code,{children:"RunInfo"})," and lists thereof can be added to or used to construct a ",(0,r.jsx)(t.code,{children:"cmd_args"})," value."]}),"\n",(0,r.jsx)(t.p,{children:"The arguments are:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"*args"})," - a list of things to add to the command line, each of which must be coercible to a command line. Further items can be added with ",(0,r.jsx)(t.code,{children:"cmd.add"}),"."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"format"})," - a string that provides a format to apply to the argument. for example, ",(0,r.jsx)(t.code,{children:'cmd_args(x, format="--args={}")'})," would prepend ",(0,r.jsx)(t.code,{children:"--args="})," before ",(0,r.jsx)(t.code,{children:"x"}),", or if ",(0,r.jsx)(t.code,{children:"x"})," was a list, before each element in ",(0,r.jsx)(t.code,{children:"x"}),"."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"delimiter"})," - added between arguments to join them together. For example, ",(0,r.jsx)(t.code,{children:'cmd_args(["--args=",x], delimiter="")'})," would produce a single argument to the underlying tool."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"prepend"})," - added as a separate argument before each argument."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"quote"})," - indicates whether quoting is to be applied to each argument. The only current valid value is ",(0,r.jsx)(t.code,{children:'"shell"'}),"."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"ignore_artifacts"})," - if ",(0,r.jsx)(t.code,{children:"True"}),", artifacts paths are used, but artifacts are not pulled."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"hidden"})," - artifacts not present on the command line, but added as dependencies."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"absolute_prefix"})," and ",(0,r.jsx)(t.code,{children:"absolute_suffix"})," - added to the start and end of each artifact."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"parent"})," - for all the artifacts use their ",(0,r.jsx)(t.code,{children:"parent"}),"th directory (e.g. ",(0,r.jsx)(t.code,{children:"parent = 1"})," for the directory the artifact is located, ",(0,r.jsx)(t.code,{children:"parent = 2"})," for that directory's parent, etc.)."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"relative_to"})," - make all artifact paths relative to a given location."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"replace_regex"})," - replaces arguments with a regular expression."]}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"ignore_artifacts",children:(0,r.jsx)(t.code,{children:"ignore_artifacts"})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"ignore_artifacts=True"})," makes ",(0,r.jsx)(t.code,{children:"cmd_args"})," to have no declared dependencies.\nAllows you to reference the path of an artifact ",(0,r.jsx)(t.em,{children:"without"})," introducing dependencies on it."]}),"\n",(0,r.jsx)(t.p,{children:"As an example where this can be useful, consider passing a dependency that is only accessed at runtime, but whose path\nmust be baked into the binary. As an example:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'resources = cmd_args(resource_file, format = "-DFOO={}", ignore_artifacts=True)\nctx.actions.run(cmd_args("gcc", "-c", source_file, resources))\n'})}),"\n",(0,r.jsxs)(t.p,{children:["Note that ",(0,r.jsx)(t.code,{children:"ignore_artifacts"})," sets all artifacts referenced by this ",(0,r.jsx)(t.code,{children:"cmd_args"})," to be ignored, including those added afterwards,\nso generally create a special ",(0,r.jsx)(t.code,{children:"cmd_args"})," and scope it quite tightly."]}),"\n",(0,r.jsx)(t.p,{children:"If you actually do use the inputs referenced by this command,\nyou will either error out due to missing dependencies (if running actions remotely)\nor have untracked dependencies that will fail to rebuild when it should."}),"\n",(0,r.jsx)(t.h3,{id:"hidden",children:(0,r.jsx)(t.code,{children:"hidden"})}),"\n",(0,r.jsxs)(t.p,{children:["Things to add to the command line which do not show up but are added as dependencies.\nThe values can be anything normally permissible to pass to ",(0,r.jsx)(t.code,{children:"add"}),"."]}),"\n",(0,r.jsx)(t.p,{children:"Typically used if the command you are running implicitly depends on files that are not\npassed on the command line, e.g. headers in the case of a C compilation."}),"\n",(0,r.jsxs)(t.h3,{id:"absolute_prefix-and-absolute_suffix",children:[(0,r.jsx)(t.code,{children:"absolute_prefix"})," and ",(0,r.jsx)(t.code,{children:"absolute_suffix"})]}),"\n",(0,r.jsx)(t.p,{children:"Adds a prefix to the start or end of every artifact."}),"\n",(0,r.jsxs)(t.p,{children:["Prefix is often used if you have a ",(0,r.jsx)(t.code,{children:"$ROOT"})," variable\nin a shell script and want to use it to make files absolute."]}),"\n",(0,r.jsxs)(t.p,{children:["Suffix is often used in conjunction with ",(0,r.jsx)(t.code,{children:"absolute_prefix"}),"\nto wrap artifacts in function calls."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'cmd_args(script, absolute_prefix = "$ROOT/")\ncmd_args(script, absolute_prefix = "call", absolute_suffix = ")")\n'})}),"\n",(0,r.jsx)(t.h3,{id:"parent",children:(0,r.jsx)(t.code,{children:"parent"})}),"\n",(0,r.jsx)(t.p,{children:"For all the artifacts use their parent directory."}),"\n",(0,r.jsxs)(t.p,{children:["Typically used when the file name is passed one way, and the directory another,\ne.g. ",(0,r.jsx)(t.code,{children:'cmd_args(artifact, format="-L{}", parent=1)'}),"."]}),"\n",(0,r.jsxs)(t.h3,{id:"relative_todir-or-relative_todir-parent",children:[(0,r.jsx)(t.code,{children:"relative_to=dir"})," or ",(0,r.jsx)(t.code,{children:"relative_to=(dir, parent)"})]}),"\n",(0,r.jsx)(t.p,{children:"Make all artifact paths relative to a given location. Typically used when the command\nyou are running changes directory."}),"\n",(0,r.jsxs)(t.p,{children:["By default, the paths are relative to the artifacts themselves (equivalent to\nparent equals to ",(0,r.jsx)(t.code,{children:"0"}),"). Use ",(0,r.jsx)(t.code,{children:"parent"})," to make the paths relative to an ancestor directory.\nFor example parent equals to ",(0,r.jsx)(t.code,{children:"1"})," would make all paths relative to the containing dirs\nof any artifacts in the ",(0,r.jsx)(t.code,{children:"cmd_args"}),"."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'dir = symlinked_dir(...)\nscript = [\n    cmd_args(dir, format = "cd {}", relative_to=dir),\n]\n'})}),"\n",(0,r.jsx)(t.h3,{id:"replace_regex",children:(0,r.jsx)(t.code,{children:"replace_regex"})}),"\n",(0,r.jsx)(t.p,{children:"Replaces all parts matching pattern regular expression (or regular expressions)\nin each argument with replacement strings."}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h2,{id:"cmd_argsadd",children:"cmd_args.add"}),"\n",(0,r.jsx)("pre",{class:"language-python",children:(0,r.jsxs)("code",{children:["def cmd_args.add(\n*args,\n**kwargs,\n) -> ",(0,r.jsx)(i.default,{to:"/docs/api/build/cmd_args",children:"cmd_args"})]})}),"\n",(0,r.jsxs)(t.p,{children:["A list of arguments to be added to the command line, which may including ",(0,r.jsx)(t.code,{children:"cmd_args"}),", artifacts, strings, ",(0,r.jsx)(t.code,{children:"RunInfo"})," or lists thereof. Note that this operation mutates the input ",(0,r.jsx)(t.code,{children:"cmd_args"}),"."]}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h2,{id:"cmd_argscopy",children:"cmd_args.copy"}),"\n",(0,r.jsx)("pre",{class:"language-python",children:(0,r.jsxs)("code",{children:["def cmd_args.copy() -> ",(0,r.jsx)(i.default,{to:"/docs/api/build/cmd_args",children:"cmd_args"})]})}),"\n",(0,r.jsxs)(t.p,{children:["Returns a copy of the ",(0,r.jsx)(t.code,{children:"cmd_args"})," such that any modifications to the original or the returned value will not impact each other. Note that this is a shallow copy, so any inner ",(0,r.jsx)(t.code,{children:"cmd_args"})," can still be modified."]}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h2,{id:"cmd_argsinputs",children:"cmd_args.inputs"}),"\n",(0,r.jsx)("pre",{class:"language-python",children:(0,r.jsxs)("code",{children:["cmd_args.inputs: ",(0,r.jsx)(i.default,{to:"/docs/api/build/CommandLineInputs",children:"CommandLineInputs"})]})}),"\n",(0,r.jsxs)(t.p,{children:["Collect all the inputs (including hidden) referenced by this command line. The output can be compared for equality and have its ",(0,r.jsx)(t.code,{children:"len"})," requested to see whether there are any inputs, but is otherwise mostly opaque."]}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h2,{id:"cmd_argsoutputs",children:"cmd_args.outputs"}),"\n",(0,r.jsx)("pre",{class:"language-python",children:(0,r.jsxs)("code",{children:["cmd_args.outputs: list[",(0,r.jsx)(i.default,{to:"/docs/api/build/OutputArtifact",children:"OutputArtifact"}),"]"]})}),"\n",(0,r.jsx)(t.p,{children:"Collect all the outputs (including hidden) referenced by this command line."}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h2,{id:"cmd_argsrelative_to",children:"cmd_args.relative_to"}),"\n",(0,r.jsx)("pre",{class:"language-python",children:(0,r.jsxs)("code",{children:["def cmd_args.relative_to(\ndirectory: ",(0,r.jsx)(i.default,{to:"/docs/api/build/PromiseArtifact",children:"Artifact"})," | ",(0,r.jsx)(i.default,{to:"/docs/api/build/CellRoot",children:"CellRoot"})," | ",(0,r.jsx)(i.default,{to:"/docs/api/build/OutputArtifact",children:"OutputArtifact"})," | ",(0,r.jsx)(i.default,{to:"/docs/api/build/ProjectRoot",children:"ProjectRoot"}),",\n/,\n*,\nparent: ",(0,r.jsx)(i.default,{to:"/docs/api/starlark/int",children:"int"})," = ...,\n) -> ",(0,r.jsx)(i.default,{to:"/docs/api/build/cmd_args",children:"cmd_args"})]})}),"\n",(0,r.jsx)(t.p,{children:"Make all artifact paths relative to a given location. Typically used when the command you are running changes directory."}),"\n",(0,r.jsxs)(t.p,{children:["By default, the paths are relative to the artifacts themselves (equivalent to\n",(0,r.jsx)(t.code,{children:"parent = 0"}),"). Use ",(0,r.jsx)(t.code,{children:"parent"})," to make the paths relative to an ancestor directory.\nFor example ",(0,r.jsx)(t.code,{children:"parent = 1"})," would make all paths relative to the containing dirs\nof any artifacts in the ",(0,r.jsx)(t.code,{children:"cmd_args"}),"."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'dir = symlinked_dir(...)\nscript = [\n    cmd_args(cmd_args(dir, format = "cd {}"),\n    original_script.relative_to(dir)\n]\n'})})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},28453:(e,t,d)=>{d.d(t,{R:()=>i,x:()=>n});var a=d(96540);const r={},s=a.createContext(r);function i(e){const t=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function n(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);