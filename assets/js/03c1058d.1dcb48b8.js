"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[81997],{28453:(e,s,n)=>{n.d(s,{R:()=>o,x:()=>l});var t=n(96540);const i={},r=t.createContext(i);function o(e){const s=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(r.Provider,{value:s},e.children)}},68519:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"prelude/rules/java/java_test","title":"java_test","description":"A java_test() rule is used to define a set of .java files that contain tests to run via JUnit.","source":"@site/../docs/prelude/rules/java/java_test.md","sourceDirName":"prelude/rules/java","slug":"/prelude/rules/java/java_test","permalink":"/docs/prelude/rules/java/java_test","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"ruleSidebar","previous":{"title":"java_plugin","permalink":"/docs/prelude/rules/java/java_plugin"},"next":{"title":"java_test_runner","permalink":"/docs/prelude/rules/java/java_test_runner"}}');var i=n(74848),r=n(28453);n(56289);const o={},l="java_test",d={},a=[{value:"Function Signature",id:"function-signature",level:3},{value:"Parameters",id:"parameters",level:3}];function c(e){const s={a:"a",code:"code",h1:"h1",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"java_test",children:"java_test"})}),"\n",(0,i.jsxs)(s.p,{children:["A ",(0,i.jsx)(s.code,{children:"java_test()"})," rule is used to define a set of ",(0,i.jsx)(s.code,{children:".java"})," files that contain tests to run via JUnit."]}),"\n",(0,i.jsx)(s.h3,{id:"function-signature",children:"Function Signature"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:'def java_test(\n    *,\n    name: str,\n    default_target_platform: None | str = None,\n    target_compatible_with: list[str] = [],\n    compatible_with: list[str] = [],\n    exec_compatible_with: list[str] = [],\n    visibility: list[str] = [],\n    within_view: list[str] = ["PUBLIC"],\n    metadata: OpaqueMetadata = {},\n    tests: list[str] = [],\n    modifiers: OpaqueMetadata = [],\n    _apple_platforms: dict[str, str] = {},\n    _build_only_native_code: bool = select({"prelude//android/constraints:build_only_native_code": True, "DEFAULT": False}),\n    _exec_os_type: str = "prelude//os_lookup/targets:os_lookup",\n    _inject_test_env: str = "prelude//test/tools:inject_test_env",\n    _is_building_android_binary: bool = False,\n    _java_test_toolchain: str = "gh_facebook_buck2_shims_meta//:java_test",\n    _java_toolchain: str = "gh_facebook_buck2_shims_meta//:java",\n    _remote_test_execution_toolchain: str = "gh_facebook_buck2_shims_meta//:remote_test_execution",\n    _test_toolchain: str = "gh_facebook_buck2_shims_meta//:test",\n    abi_generation_mode: None | str = None,\n    annotation_processor_deps: list[str] = [],\n    annotation_processor_params: list[str] = [],\n    annotation_processors: list[str] = [],\n    contacts: list[str] = [],\n    cxx_library_allowlist: list[str] = [],\n    default_cxx_platform: None | str = None,\n    default_host_platform: None | str = None,\n    deps: list[str] = [],\n    deps_query: None | str = None,\n    env: dict[str, str] = {},\n    exported_deps: list[str] = [],\n    exported_provided_deps: list[str] = [],\n    extra_arguments: list[str] = [],\n    fork_mode: str = "none",\n    jar_postprocessor: None | str = None,\n    java: None | str = None,\n    java_agents: list[str] = [],\n    java_version: None | str = None,\n    javac: None | str = None,\n    labels: list[str] = [],\n    licenses: list[str] = [],\n    manifest_file: None | str = None,\n    maven_coords: None | str = None,\n    never_mark_as_unused_dependency: None | bool = None,\n    non_exec_dep_plugins_deprecated: list[str | (str, list[str])] = [],\n    on_unused_dependencies: None | str = None,\n    plugins: list[str | (str, list[str])] = [],\n    proguard_config: None | str = None,\n    provided_deps: list[str] = [],\n    remote_execution: None | str | dict[str, None | bool | int | str | list[dict[str, str]] | dict[str, str | list[str]]] = None,\n    remove_classes: list[str] = [],\n    required_for_source_only_abi: bool = False,\n    resources: list[str] = [],\n    resources_root: None | str = None,\n    run_test_separately: bool = False,\n    runner: None | str = None,\n    runtime_deps: list[str] = [],\n    source: None | str = None,\n    source_abi_verification_mode: None | str = None,\n    source_only_abi_deps: list[str] = [],\n    specs: None | str = None,\n    srcs: list[str] = [],\n    std_err_log_level: None | int | str = None,\n    std_out_log_level: None | int | str = None,\n    target: None | str = None,\n    test_case_timeout_ms: None | int = None,\n    test_class_names_file: None | str = None,\n    test_rule_timeout_ms: None | int = None,\n    test_type: None | str = None,\n    unbundled_resources_root: None | str = None,\n    use_cxx_libraries: None | bool = None,\n    use_dependency_order_classpath: None | bool = None,\n    uses_content_based_path_for_jar_snapshot: bool = select({"DEFAULT": False}),\n    uses_content_based_paths_for_classic_java: bool = select({"DEFAULT": False}),\n    vm_args: list[str] = [],\n) -> None\n'})}),"\n",(0,i.jsx)(s.h3,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"name"}),": (required)"]}),"\n",(0,i.jsx)(s.p,{children:"name of the target"}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"default_target_platform"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"None"}),")"]}),"\n",(0,i.jsx)(s.p,{children:"specifies the default target platform, used when no platforms are specified on the command line"}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"target_compatible_with"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(s.p,{children:"a list of constraints that are required to be satisfied for this target to be compatible with a configuration"}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"compatible_with"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(s.p,{children:"a list of constraints that are required to be satisfied for this target to be compatible with a configuration"}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"exec_compatible_with"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(s.p,{children:"a list of constraints that are required to be satisfied for this target to be compatible with an execution platform"}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"visibility"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(s.p,{children:"a list of visibility patterns restricting what targets can depend on this one"}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"within_view"}),": (defaults to: ",(0,i.jsx)(s.code,{children:'["PUBLIC"]'}),")"]}),"\n",(0,i.jsx)(s.p,{children:"a list of visibility patterns restricting what this target can depend on"}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"metadata"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"{}"}),")"]}),"\n",(0,i.jsx)(s.p,{children:"a key-value map of metadata associated with this target"}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"tests"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(s.p,{children:"a list of targets that provide tests for this one"}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"modifiers"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(s.p,{children:"an array of modifiers associated with this target"}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"contacts"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(s.p,{children:"A list of organizational contacts for this rule. These could be individuals who you would contact in the event of a failure or other issue with the rule."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:"contacts = [ 'Joe Sixpack', 'Erika Mustermann' ]\n"})}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"cxx_library_allowlist"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(s.p,{children:"List of cxx_library targets to build, if use_cxx_libraries is true. This can be useful if some dependencies are Android-only and won't build for the test host platform."}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"deps"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,i.jsxs)(s.p,{children:["Same as ",(0,i.jsx)(s.code,{children:"java_library()"}),". // org.junit.rules.Timeout was not introduced until 4.7. Must include JUnit (version 4.7 or later) as a dependency for JUnit tests. Must include TestNG (version 6.2 or later) and hamcrest as a dependencies for TestNG tests."]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"env"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"{}"}),")"]}),"\n",(0,i.jsx)(s.p,{children:"A map of environment names and values to set when running the test."}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"fork_mode"}),": (defaults to: ",(0,i.jsx)(s.code,{children:'"none"'}),")"]}),"\n",(0,i.jsx)(s.p,{children:"Controls whether tests will all be run in the same process or a process will be started for each set of tests in a class."}),"\n",(0,i.jsxs)(s.p,{children:["(This is mainly useful when porting Java tests to Buck from Apache Ant which\nallows JUnit tasks to set a ",(0,i.jsx)(s.code,{children:'fork="yes"'})," property. It should not be\nused for new tests since it encourages tests to not cleanup after themselves and\nincreases the tests' computational resources and running time.)"]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"none"}),"\nAll tests will run in the same process.\n",(0,i.jsx)(s.code,{children:"per_test"}),"\nA process will be started for each test class in which all tests of that test class\nwill run."]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"javac"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"None"}),")"]}),"\n",(0,i.jsxs)(s.p,{children:["Specifies the Java compiler program to use for this rule. The value is a source path or an execution dep (e.g., //foo/bar",":bar",'). Overrides the value in "javac" in the "tools" section of ',(0,i.jsx)(s.code,{children:".buckconfig"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"labels"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,i.jsxs)(s.p,{children:["A list of labels to be applied to these tests. These labels are arbitrary text strings and have no meaning within buck itself. They can, however, have meaning for you as a test author (e.g., ",(0,i.jsx)(s.code,{children:"smoke"})," or ",(0,i.jsx)(s.code,{children:"fast"}),"). A label can be used to filter or include a specific test rule when executing ",(0,i.jsx)(s.code,{children:"buck test"})]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"licenses"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,i.jsxs)(s.p,{children:["Set of license files for this library. To get the list of license files for a given build rule and all of its dependencies, you can use ",(0,i.jsx)(s.a,{href:"https://buck2.build/docs/users/commands/query/",children:"buck query"})]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"non_exec_dep_plugins_deprecated"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,i.jsxs)(s.p,{children:["Plugins that do not use the execution platform. This exists for historical reasons, and should not be used. Use ",(0,i.jsx)(s.code,{children:"plugins"})," instead - plugins should be configured for the execution platform since that is where they are used."]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"plugins"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(s.p,{children:"List of plugins that should be run during compilation of the target. A list of strings may additionally be provided in order to pass additional arguments to the plugin."}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"resources"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,i.jsxs)(s.p,{children:["Same as ",(0,i.jsx)(s.code,{children:"java_library()"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"source"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"None"}),")"]}),"\n",(0,i.jsxs)(s.p,{children:["Java language level for compiling. Corresponds to the ",(0,i.jsx)(s.code,{children:"-source"})," argument for ",(0,i.jsx)(s.code,{children:"javac"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"srcs"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,i.jsxs)(s.p,{children:["Like ",(0,i.jsx)(s.code,{children:"java_library()"}),", all of the ",(0,i.jsx)(s.code,{children:".java"})," files specified by the ",(0,i.jsx)(s.code,{children:"srcs"})," argument will be compiled when this rule is built. In addition, all of the corresponding ",(0,i.jsx)(s.code,{children:".class"})," files that are built by this rule will be passed as arguments to JUnit when this rule is run as a test. ",(0,i.jsx)(s.code,{children:".class"})," files that are passed to JUnit that do not have any methods annotated with ",(0,i.jsx)(s.code,{children:"@Test"})," are considered failed tests, so make sure that only test case classes are specified as ",(0,i.jsx)(s.code,{children:"srcs"}),". This is frequently done by specifying ",(0,i.jsx)(s.code,{children:"srcs"})," as ",(0,i.jsx)(s.code,{children:"glob(['**/*Test.java'])"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"std_err_log_level"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"None"}),")"]}),"\n",(0,i.jsxs)(s.p,{children:["Same as ",(0,i.jsx)(s.code,{children:"std_out_log_level"}),", but for std err."]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"std_out_log_level"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"None"}),")"]}),"\n",(0,i.jsxs)(s.p,{children:["Log level for messages from the source under test that buck will output to std out. Value must be a valid ",(0,i.jsx)(s.code,{children:"java.util.logging.Level"})," value."]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"target"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"None"}),")"]}),"\n",(0,i.jsxs)(s.p,{children:["Bytecode target level for compiling. Corresponds to the ",(0,i.jsx)(s.code,{children:"-target"})," argument for ",(0,i.jsx)(s.code,{children:"javac"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"test_rule_timeout_ms"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"None"}),")"]}),"\n",(0,i.jsxs)(s.p,{children:["If set specifies the maximum amount of time (in milliseconds) in which all of the tests in this rule should complete. This overrides the default ",(0,i.jsx)(s.code,{children:"rule_timeout"})," if any has been specified in ",(0,i.jsx)(s.code,{children:".buckconfig"})," ."]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"test_type"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"None"}),")"]}),"\n",(0,i.jsx)(s.p,{children:"Specifies which test framework to use. The currently supported options are 'junit' and 'testng'."}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"use_cxx_libraries"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"None"}),")"]}),"\n",(0,i.jsxs)(s.p,{children:["Whether or not to build and link against ",(0,i.jsx)(s.code,{children:"cxx_library()"})," dependencies when testing."]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"vm_args"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(s.p,{children:"Runtime arguments to the JVM running the tests."}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);