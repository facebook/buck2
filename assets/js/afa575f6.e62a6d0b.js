"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[24908],{13422:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"users/commands/utargets","title":"utargets","description":"This document provides an overview of the commands and options available under buck2 utargets.","source":"@site/../docs/users/commands/utargets.generated.md","sourceDirName":"users/commands","slug":"/users/commands/utargets","permalink":"/docs/users/commands/utargets","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"utargets","title":"utargets"},"sidebar":"main","previous":{"title":"uquery","permalink":"/docs/users/commands/uquery"},"next":{"title":"Exit Codes","permalink":"/docs/users/commands_extra/exit_codes"}}');var t=s(74848),l=s(28453);const r={id:"utargets",title:"utargets"},o="utargets",c={},d=[{value:"<code>buck2 utargets</code>",id:"buck2-utargets",level:2},{value:"Arguments:",id:"arguments",level:3},{value:"Options:",id:"options",level:3}];function a(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"utargets",children:"utargets"})}),"\n",(0,t.jsxs)(n.p,{children:["This document provides an overview of the commands and options available under ",(0,t.jsx)(n.code,{children:"buck2 utargets"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"buck2-utargets",children:(0,t.jsx)(n.code,{children:"buck2 utargets"})}),"\n",(0,t.jsx)(n.p,{children:"Show details about the specified targets."}),"\n",(0,t.jsx)(n.p,{children:"This command is meant to only handle unconfigured targets, but for historical reasons, with certain flags it can also work with configured targets."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Usage"}),": ",(0,t.jsx)(n.code,{children:"buck2 utargets [OPTIONS] [TARGET_PATTERNS]..."})]}),"\n",(0,t.jsx)(n.h3,{id:"arguments",children:"Arguments:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"<TARGET_PATTERNS>"}),"\nPatterns to interpret"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"options",children:"Options:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"--json"}),"\nPrint targets as JSON"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"--json-lines"}),"\nPrint targets as JSON-lines"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"--stats"}),"\nPrint statistics of how many entries were processed"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"--resolve-alias"}),"\nPrint the fully-qualified build target for the specified aliases"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"--show-target-hash"}),"\nPrint a stable hash of each target after the target name"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"--show-unconfigured-target-hash"}),"\nPrint a stable unconfigured hash of each target after the target name"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"--target-hash-file-mode <TARGET_HASH_FILE_MODE>"}),"\nModifies computation of target hashes. If set to ",(0,t.jsx)(n.code,{children:"PATHS_AND_CONTENTS"})," (the default), the contents of all files referenced from the targets will be used to compute the target hash. If set to ",(0,t.jsx)(n.code,{children:"PATHS_ONLY"}),", only files' paths contribute to the hash. If set to ",(0,t.jsx)(n.code,{children:"NONE"})," no files will be used. See also --target-hash-modified-paths"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Default value: ",(0,t.jsx)(n.code,{children:"paths_and_contents"})]}),"\n",(0,t.jsxs)(n.li,{children:["Possible values:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"paths_only"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"paths_and_contents"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"none"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"--target-hash-modified-paths <TARGET_HASH_MODIFIED_PATHS>"}),"\nModifies computation of target hashes. Only effective when --target-hash-file-mode is set to ",(0,t.jsx)(n.code,{children:"PATHS_ONLY"}),". If a target or its dependencies reference a file from this set, the target's hash will be different than if this option was omitted. Otherwise, the target's hash will be the same as if this option was omitted"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"--target-hash-function <TARGET_HASH_FUNCTION>"}),'\nSelects either the "fast" or the "strong" target hash function to be used for computing target hashes. While we don\'t specify the exact algorithm, the "strong" algorithm should be a reasonable cryptographic hash (ex. blake3) while the "fast" function will likely be a non-crypto hash. Both functions are guaranteed to be deterministic and to have the same value across different platforms/architectures']}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Default value: ",(0,t.jsx)(n.code,{children:"fast"})]}),"\n",(0,t.jsxs)(n.li,{children:["Possible values:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"sha1"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"sha256"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"murmur-hash3"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"fast"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"strong"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"--target-hash-recursive <TARGET_HASH_RECURSIVE>"}),"\nWhen true, emit the hash or target node and all dependencies recursively. When false, hash only the target node"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Default value: ",(0,t.jsx)(n.code,{children:"true"})]}),"\n",(0,t.jsxs)(n.li,{children:["Possible values:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"true"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"false"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"-A, --output-all-attributes"}),"\nOutput all attributes, equivalent of --output-attribute ''."]}),"\n",(0,t.jsx)(n.p,{children:"Avoid using this flag in automation because it may be expensive to produce certain attributes, and because it makes harder to track which special attributes are used."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"-B, --output-basic-attributes"}),"\nOutput basic attributes, namely those the user can supply, plus rule type and package name"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"-a, --output-attribute <ATTRIBUTE>"}),'\nRegular expressions to match attributes. Regular expressions are used in "search" mode, so for example empty string matches all attributes including special attributes.']}),"\n",(0,t.jsxs)(n.p,{children:["When using in automation, please specify the regular expression to match the attribute precisely, for example ",(0,t.jsx)(n.code,{children:"--output-attribute '^headers$'"})," to make it easier to track which special attributes are used."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"--output-attributes <ATTRIBUTE>"}),"\nDeprecated: Use ",(0,t.jsx)(n.code,{children:"--output-attribute"})," instead."]}),"\n",(0,t.jsx)(n.p,{children:"List of space-separated attributes to output, --output-attributes attr1 attr2."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"--include-defaults"}),"\nEnables printing of default attributes. This would be attributes in a target that aren't explicitly set in the target but instead use the default set in the rule declaration"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"--show-output"}),"\nPrint the path to the output for each of the rules relative to the project root"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"--show-full-output"}),"\nPrint the absolute path to the output for each of the rules"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"--show-simple-output"}),"\nPrint only the path to the output for each of the rules relative to the project root"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"--show-full-simple-output"}),"\nPrint only the absolute path to the output for each of the rules"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"--show-json-output"}),"\nPrint the output paths relative to the project root, in JSON format"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"--show-full-json-output"}),"\nPrint the output absolute paths, in JSON format"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"--keep-going"}),"\nOn loading errors, put buck.error in the output stream and continue"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"--streaming"}),"\nWrite output as soon as it is available. The order of the output items is non-deterministic and if multiple patterns cover the same target, may have duplicates"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"--no-cache"}),"\nDon't cache the target information on the build graph"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"--imports"}),"\nShow the imports of each package/import. Shows an additional output per package/import (not per target), including implicit dependencies (e.g. the prelude) but only direct dependencies (not the transitive closure)"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"--package-values"}),"\nShow the package values. Produces an additional attribute representing all the package values for the package containing the target"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"--package-values-regex <VALUES>"}),'\nRegular expressions to match package values. Produces an additional attribute representing package values for the package containing the target. Regular expressions are used in "search" mode so, for example, empty string matches all package values']}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"-o, --output <PATH>"}),"\nFile to put the output in, rather than sending to stdout."]}),"\n",(0,t.jsx)(n.p,{children:"File will be created if it does not exist, and overwritten if it does."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"--compression <SCHEME>"}),"\nCompress the output"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Default value: ",(0,t.jsx)(n.code,{children:"none"})]}),"\n",(0,t.jsxs)(n.li,{children:["Possible values:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"none"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"gzip"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"zstd"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"-j, --num-threads <THREADS>"}),"\nNumber of threads to use during execution (default is # cores)"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"--target-platforms <PLATFORM>"}),"\nConfiguration target (one) to use to configure targets"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"-m, --modifier <VALUE>"}),"\nA configuration modifier to configure all targets on the command line. This may be a constraint value target."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"-c, --config <SECTION.OPTION=VALUE>"}),"\nList of config options"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"--config-file <PATH>"}),"\nList of config file paths"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"--fake-host <HOST>"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Possible values:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"default"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"linux"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"macos"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"windows"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"--fake-arch <ARCH>"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Possible values:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"default"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"aarch64"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"x8664"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"--fake-xcode-version <VERSION-BUILD>"}),"\nValue must be formatted as: version-build (e.g., 14.3.0-14C18 or 14.1-14B47b)"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"--reuse-current-config"}),"\nRe-uses any ",(0,t.jsx)(n.code,{children:"--config"})," values (inline or via modefiles) if there's a previous command, otherwise the flag is ignored."]}),"\n",(0,t.jsxs)(n.p,{children:["If there is a previous command and ",(0,t.jsx)(n.code,{children:"--reuse-current-config"})," is set, then the old config is used, ignoring any overrides."]}),"\n",(0,t.jsx)(n.p,{children:"If there is no previous command but the flag was set, then the flag is ignored, the command behaves as if the flag was not set at all."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"--preemptible <PREEMPTIBLE>"}),"\nUsed to configure when this command could be preempted by another command for the same isolation dir."]}),"\n",(0,t.jsx)(n.p,{children:"Normally, when you run two commands - from different terminals, say - buck2 will attempt to run them in parallel. However, if the two commands are based on different state, that is they either have different configs or different filesystem states, buck2 cannot run them in parallel. The default behavior in this case is to block the second command until the first completes."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Possible values:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"never"}),": (default) When another command starts that cannot run in parallel with this one, block that command"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"always"}),": When another command starts, interrupt this command, ",(0,t.jsx)(n.em,{children:"even if they could run in parallel"}),". There is no good reason to use this other than that it provides slightly nicer superconsole output"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"ondifferentstate"}),": When another command starts that cannot run in parallel with this one, interrupt this command"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"--exit-when <EXIT_WHEN>"}),"\nWhether to proceed with or fail this invocation based on the daemon state"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Possible values:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"never"}),": (default) Execute this command normally"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"differentstate"}),": Fail this command if another command is already running with a different state"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"notidle"}),": Fail this command if another command is already running (regardless of daemon state)"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"--disable-starlark-types"}),"\nDisable runtime type checking in Starlark interpreter."]}),"\n",(0,t.jsx)(n.p,{children:"This option is not stable, and can be used only locally to diagnose evaluation performance problems."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"--stack"}),"\nRecord or show target call stacks."]}),"\n",(0,t.jsx)(n.p,{children:"Starlark call stacks will be included in duplicate targets error."}),"\n",(0,t.jsxs)(n.p,{children:["If a command outputs targets (like ",(0,t.jsx)(n.code,{children:"targets"})," command), starlark call stacks will be printed after the targets."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"--profile-patterns <PROFILE_PATTERNS>"}),"\nEnables profiling for all evaluations whose evaluation identifier matches one of the provided patterns."]}),"\n",(0,t.jsxs)(n.p,{children:["Some examples identifiers: analysis/cell//buck2/app/buck2_action_impl",":buck2_action_impl"," (cfg",":linux-x86_64","#27ac5723e0c99706) load/cell//build_defs/json.bzl load/prelude//playground/test.bxl load/cell//build_defs/json.bzl@other_cell load_buildfile/fbcode//third-party-buck/platform010/build/ncurses load_packagefile/fbcode//cli/rust/cli_delegate anon_analysis/anon//:_anon_link_rule (anon: 766183dc9b6f680a) (fbcode//buck2/platform/execution",":linux-x86_64","#08961b14cfb182aa) bxl/prelude//playground/test.bxl",":playground"]}),"\n",(0,t.jsxs)(n.p,{children:["You can pass ",(0,t.jsx)(n.code,{children:"--profile-patterns=.*"})," to enable no-op profiling for everything (additionally pass ",(0,t.jsx)(n.code,{children:"--profile-patterns-mode=none"})," to use no-op profiling to just get a list of all the identifiers)."]}),"\n",(0,t.jsxs)(n.p,{children:["The profile results will be written to individual .profile files in ",(0,t.jsx)(n.code,{children:"<ROOT_OUTPUT>/<data+time>-<uuid>/"})," where ROOT_OUTPUT comes from the --profile-patterns-output flag. In that directory there will also be a file listing all the identifiers that were profiled."]}),"\n",(0,t.jsx)(n.p,{children:"Enabling/disabling profiling of an evaluation will invalidate the results of that evaluation and it will be recomputed. In some cases, this will cause other work to also need to be redone (for example, invalidating the result of loading PACKAGE files causes all consumers to be recomputed). But if you keep profiling options consistent between commands, only the work that is otherwise invalidated will be redone (and only for those would profiling results be created)."}),"\n",(0,t.jsx)(n.p,{children:"You must also pass --profile-patterns-mode and --profile-patterns-output."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"--profile-patterns-output <PATH>"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"--profile-patterns-mode <PROFILE_PATTERNS_MODE>"}),"\nProfile mode."]}),"\n",(0,t.jsxs)(n.p,{children:["Memory profiling modes have suffixes either ",(0,t.jsx)(n.code,{children:"-allocated"})," or ",(0,t.jsx)(n.code,{children:"-retained"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"-retained"})," means memory kept in frozen starlark heaps after analysis completes. ",(0,t.jsx)(n.code,{children:"-retained"})," does not work when profiling loading, because no memory is retained after loading and frozen heap is not even created. This is probably what you want when profiling analysis."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"-allocated"})," means allocated memory, including memory which is later garbage collected."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Possible values:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"time-flame"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"heap-allocated"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"heap-retained"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"heap-flame-allocated"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"heap-flame-retained"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"heap-summary-allocated"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"heap-summary-retained"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"statement"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"bytecode"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"bytecode-pairs"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"typecheck"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"coverage"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"none"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"--console <super|simple|...>"}),"\nWhich console to use for this command"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Default value: ",(0,t.jsx)(n.code,{children:"auto"})]}),"\n",(0,t.jsxs)(n.li,{children:["Possible values:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"auto"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"none"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"simple"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"simplenotty"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"simpletty"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"super"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"--ui <UI>"}),"\nConfigure additional superconsole ui components."]}),"\n",(0,t.jsx)(n.p,{children:"Accepts a comma-separated list of superconsole components to add. Possible values are:"}),"\n",(0,t.jsx)(n.p,{children:"dice - shows information about evaluated dice nodes debugevents - shows information about the flow of events from buckd"}),"\n",(0,t.jsx)(n.p,{children:"These components can be turned on/off interactively. Press 'h' for help when superconsole is active."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Possible values:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"dice"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"debugevents"})}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"io"}),": I/O panel"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"re"}),": RE panel"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"--no-interactive-console"}),"\nDisable console interactions"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"--event-log <PATH>"}),"\nWrite events to this log file"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"--write-build-id <PATH>"}),"\nWrite command invocation id into this file"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"--unstable-write-invocation-record <PATH>"}),"\nWrite the invocation record (as JSON) to this path. No guarantees whatsoever are made regarding the stability of the format"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"--command-report-path <PATH>"}),"\nWrite the command report to this path. A command report is always written to ",(0,t.jsx)(n.code,{children:"buck-out/v2/<uuid>/command_report"})," even without this flag"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>o});var i=s(96540);const t={},l=i.createContext(t);function r(e){const n=i.useContext(l);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);