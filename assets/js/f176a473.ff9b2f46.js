"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5938],{28453:(e,n,i)=>{i.d(n,{R:()=>d,x:()=>a});var s=i(96540);const t={},r=s.createContext(t);function d(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),s.createElement(r.Provider,{value:n},e.children)}},37052:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>d,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"prelude/rules/android/android_manifest","title":"android_manifest","description":"An androidmanifest() rule is used to generate an Android Manifest to be used by androidbinary() and android_aar() rules. This rule takes a skeleton manifest, and merges it with manifests found in any deps.","source":"@site/../docs/prelude/rules/android/android_manifest.md","sourceDirName":"prelude/rules/android","slug":"/prelude/rules/android/android_manifest","permalink":"/docs/prelude/rules/android/android_manifest","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"ruleSidebar","previous":{"title":"android_library","permalink":"/docs/prelude/rules/android/android_library"},"next":{"title":"android_platform","permalink":"/docs/prelude/rules/android/android_platform"}}');var t=i(74848),r=i(28453);i(56289);const d={},a="android_manifest",l={},o=[{value:"Function Signature",id:"function-signature",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Examples",id:"examples",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"android_manifest",children:"android_manifest"})}),"\n",(0,t.jsxs)(n.p,{children:["An ",(0,t.jsx)(n.code,{children:"android_manifest()"})," rule is used to generate an ",(0,t.jsx)(n.a,{href:"http://developer.android.com/guide/topics/manifest/manifest-intro.html",children:"Android Manifest"})," to be used by ",(0,t.jsx)(n.code,{children:"android_binary()"})," and ",(0,t.jsx)(n.code,{children:"android_aar()"})," rules. This rule takes a skeleton manifest, and merges it with manifests found in any deps."]}),"\n",(0,t.jsx)(n.h3,{id:"function-signature",children:"Function Signature"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'def android_manifest(\n    *,\n    name: str,\n    default_target_platform: None | str = None,\n    target_compatible_with: list[str] = [],\n    compatible_with: list[str] = [],\n    exec_compatible_with: list[str] = [],\n    visibility: list[str] = [],\n    within_view: list[str] = ["PUBLIC"],\n    metadata: OpaqueMetadata = {},\n    tests: list[str] = [],\n    modifiers: OpaqueMetadata = [],\n    _android_toolchain: str = "gh_facebook_buck2_shims_meta//:android",\n    _apple_platforms: dict[str, str] = {},\n    contacts: list[str] = [],\n    default_host_platform: None | str = None,\n    deps: list[str] = [],\n    labels: list[str] = [],\n    licenses: list[str] = [],\n    skeleton: str,\n) -> None\n'})}),"\n",(0,t.jsx)(n.h3,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"name"}),": (required)"]}),"\n",(0,t.jsx)(n.p,{children:"name of the target"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"default_target_platform"}),": (defaults to: ",(0,t.jsx)(n.code,{children:"None"}),")"]}),"\n",(0,t.jsx)(n.p,{children:"specifies the default target platform, used when no platforms are specified on the command line"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"target_compatible_with"}),": (defaults to: ",(0,t.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,t.jsx)(n.p,{children:"a list of constraints that are required to be satisfied for this target to be compatible with a configuration"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"compatible_with"}),": (defaults to: ",(0,t.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,t.jsx)(n.p,{children:"a list of constraints that are required to be satisfied for this target to be compatible with a configuration"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"exec_compatible_with"}),": (defaults to: ",(0,t.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,t.jsx)(n.p,{children:"a list of constraints that are required to be satisfied for this target to be compatible with an execution platform"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"visibility"}),": (defaults to: ",(0,t.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,t.jsx)(n.p,{children:"a list of visibility patterns restricting what targets can depend on this one"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"within_view"}),": (defaults to: ",(0,t.jsx)(n.code,{children:'["PUBLIC"]'}),")"]}),"\n",(0,t.jsx)(n.p,{children:"a list of visibility patterns restricting what this target can depend on"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"metadata"}),": (defaults to: ",(0,t.jsx)(n.code,{children:"{}"}),")"]}),"\n",(0,t.jsx)(n.p,{children:"a key-value map of metadata associated with this target"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"tests"}),": (defaults to: ",(0,t.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,t.jsx)(n.p,{children:"a list of targets that provide tests for this one"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"modifiers"}),": (defaults to: ",(0,t.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,t.jsx)(n.p,{children:"an array of modifiers associated with this target"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"contacts"}),": (defaults to: ",(0,t.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,t.jsx)(n.p,{children:"A list of organizational contacts for this rule. These could be individuals who you would contact in the event of a failure or other issue with the rule."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"contacts = [ 'Joe Sixpack', 'Erika Mustermann' ]\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"deps"}),": (defaults to: ",(0,t.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,t.jsxs)(n.p,{children:["A collection of dependencies that includes android_library rules. The manifest files of the ",(0,t.jsx)(n.code,{children:"android_library()"})," rules will be filtered out to become dependent source files for the manifest."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"labels"}),": (defaults to: ",(0,t.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,t.jsxs)(n.p,{children:["Set of arbitrary strings which allow you to annotate a ",(0,t.jsx)(n.a,{href:"https://buck2.build/docs/concepts/build_rule/",children:"build rule"})," with tags that can be searched for over an entire dependency tree using ",(0,t.jsx)(n.code,{children:"buck query()"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"licenses"}),": (defaults to: ",(0,t.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,t.jsxs)(n.p,{children:["Set of license files for this library. To get the list of license files for a given build rule and all of its dependencies, you can use ",(0,t.jsx)(n.a,{href:"https://buck2.build/docs/users/commands/query/",children:"buck query"})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"skeleton"}),": (required)"]}),"\n",(0,t.jsxs)(n.p,{children:["Either a ",(0,t.jsx)(n.code,{children:"build target"})," or a path to a file representing the manifest that will be merged with any manifests associated with this rule's ",(0,t.jsx)(n.code,{children:"deps"}),"."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"examples",children:"Examples"}),"\n",(0,t.jsxs)(n.p,{children:["Here's an example of an ",(0,t.jsx)(n.code,{children:"android_manifest()"})," that has no deps."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"\nandroid_manifest(\n  name = 'my-manifest',\n  skeleton = 'AndroidManifestSkeleton.xml',\n)\n\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This is what ",(0,t.jsx)(n.code,{children:"AndroidManifestSkeleton.xml"})," looks like."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'\n<?xml version="1.0" encoding="utf-8"?>\n<manifest xmlns:android="http://schemas.android.com/apk/res/android"\n          package="com.example"\n          android:versionCode="1"\n          android:versionName="1.0">\n\n    <uses-sdk targetSdkVersion="19" minSdkVersion="17"/>\n    <application\n        android:label="@string/app_name"\n        android:icon="@drawable/ic_launcher">\n        <activity\n            android:name="MyActivity"\n            android:label="@string/app_name">\n            <intent-filter>\n                <action android:name="android.intent.action.MAIN"/>\n                <category android:name="android.intent.category.LAUNCHER"/>\n            </intent-filter>\n        </activity>\n    </application>\n</manifest>\n\n'})}),"\n",(0,t.jsxs)(n.p,{children:["You could also use a ",(0,t.jsx)(n.code,{children:"genrule()"})," to generate the manifest file and reference the\n",(0,t.jsx)(n.code,{children:"build target"})," in the ",(0,t.jsx)(n.code,{children:"skeleton"})," argument."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);