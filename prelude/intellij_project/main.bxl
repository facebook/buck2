load("@fbcode//buck2/prelude/intellij_project:libraries.bxl", "get_libraries", "get_project_library_contents", "get_project_library_file_name")
load("@fbcode//buck2/prelude/intellij_project:modules.bxl", "IjModule", "get_aggregated_ij_module_target_nodes", "get_module_file_contents", "get_module_file_name")

def _impl(ctx):
    all_nodes = ctx.cquery().deps(ctx.cli_args.targets, -1, "target_deps()")
    all_analysis = ctx.analysis(all_nodes)

    final_output_dir_dict = {}
    action_factory = ctx.bxl_actions.action_factory()

    module_target_nodes = get_aggregated_ij_module_target_nodes(all_nodes, all_analysis)
    libraries = get_libraries(all_nodes)
    project_libraries, ij_modules = _sort_libraries_and_modules(module_target_nodes, libraries)

    for ij_module in ij_modules:
        module = ij_module.ij_target_node
        file_name = get_module_file_name(module)
        module_output = _create_output(action_factory, file_name, final_output_dir_dict)
        action_factory.write(module_output, get_module_file_contents(ij_module))

    for library in project_libraries:
        file_name = get_project_library_file_name(library.label)
        library_output = _create_output(action_factory, file_name, final_output_dir_dict)
        action_factory.write(library_output, get_project_library_contents(library))

    output_module = _create_output(action_factory, "modules.xml", final_output_dir_dict)
    action_factory.write(output_module, """\
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ProjectModuleManager">
    <modules>
    </modules>
  </component>
</project>
""")

    dot_idea_dir = action_factory.symlinked_dir(".idea", final_output_dir_dict)

    ctx.output.print(ctx.output.ensure(dot_idea_dir).abs_path())

def _create_output(
        action_factory: "actions",
        output_path: str.type,
        final_output_dir_dict: dict.type) -> "artifact":
    output = action_factory.declare_output("outputs/{}".format(output_path))
    final_output_dir_dict[output_path] = output

    return output

PROJECT_LIBRARY_THRESHOLD = 1

def _sort_libraries_and_modules(ij_target_nodes: ["AggregatedIjTargetNode"], libraries: ["IjLibrary"]) -> (["IjLibrary"], [IjModule.type]):
    libraries_by_label = {ij_library.label: ij_library for ij_library in libraries}

    # First, count the number of times that each library appears as a dependency of a module.
    library_counts = {ij_library.label: 0 for ij_library in libraries}
    for module in ij_target_nodes:
        for dep in module.deps:
            if dep in library_counts.keys():
                library_counts[dep] += 1

    # If a library appears more than PROJECT_LIBRARY_THRESHOLD times, then it is a project library.
    # Otherwise (if it appears at least once), it is a module library (it is inlined into the module's
    # .iml file rather than having its own .iml file).
    project_libraries = {}
    module_libraries = {}
    for library_label, count in library_counts.items():
        if count > PROJECT_LIBRARY_THRESHOLD:
            project_libraries[library_label] = libraries_by_label[library_label]
        elif count > 0:
            module_libraries[library_label] = libraries_by_label[library_label]

    ij_target_nodes_by_label = {}
    for ij_target_node in ij_target_nodes:
        for label in ij_target_node.labels:
            ij_target_nodes_by_label[label] = ij_target_node

    ij_modules = []
    for ij_target_node in ij_target_nodes:
        module_dependencies = []
        module_libs = []
        project_libs = []
        for dep in ij_target_node.deps:
            if dep in module_libraries.keys():
                module_libs.append(module_libraries[dep])
            elif dep in project_libraries.keys():
                project_libs.append(project_libraries[dep])
            elif dep in ij_target_nodes_by_label.keys():
                module_dependencies.append(ij_target_nodes_by_label[dep])

        ij_modules.append(
            IjModule(
                ij_target_node = ij_target_node,
                module_dependencies = dedupe(module_dependencies),
                module_libraries = module_libs,
                project_libraries = project_libs,
            ),
        )

    return project_libraries.values(), ij_modules

generate_intellij_project = bxl(
    impl = _impl,
    cli_args = {
        "targets": cli_args.list(cli_args.target_label()),
    },
)
