# Copyright (c) Meta Platforms, Inc. and affiliates.
#
# This source code is licensed under both the MIT license found in the
# LICENSE-MIT file in the root directory of this source tree and the Apache
# License, Version 2.0 found in the LICENSE-APACHE file in the root directory
# of this source tree.

"""BXL tests for checking dependencies."""

load(":dependencies_test_util.bzl", "rule_list_regex")

_MAX_DEPTH = 2147483647

def _impl_check_dependencies_test(
        ctx: bxl.Context,
        verification_mode: str,
        allowlist_patterns: list[str] | None,
        blocklist_patterns: list[str] | None,
        target: TargetLabel):
    """Test the dependencies of a given rule.

    The behavior is determined by the verification_mode string value:

    "allowlist" mode - only targets matching allowlist and not matching blocklist will be allowed.
    "blocklist" mode - targets matching blocklist and not matching allowlist will be rejected.

    Each pattern list may contain target names (e.g. //foo/bar:bar)
    or regex patterns (e.g. //foo/.*)

    """
    if not allowlist_patterns and not blocklist_patterns:
        fail("Self-check and self-documentation: must provide allow or block list")

    cquery = ctx.cquery()
    transitive_deps = cquery.deps(
        ctx.target_universe(target).target_set(),
        _MAX_DEPTH,
        filter = "target_deps()",
    )

    allowlist_regex = rule_list_regex(allowlist_patterns)
    blocklist_regex = rule_list_regex(blocklist_patterns)

    allowlisted = filter(lambda target: regex_match(allowlist_regex, str(target.label.raw_target())), transitive_deps)
    blocklisted = filter(lambda target: regex_match(blocklist_regex, str(target.label.raw_target())), transitive_deps)

    allowlisted_deps = ctx.target_universe(allowlisted).target_set()
    blocklisted_deps = ctx.target_universe(blocklisted).target_set()

    if verification_mode == "allowlist":
        # We expect transitive_deps = allowlisted_deps - blocklisted_deps following line means the same.
        res = (transitive_deps - allowlisted_deps) + (transitive_deps & blocklisted_deps)

        # TODO(ezgi): Add shortest path from target to the banned/blocklisted targets
        if len(res) > 0:
            fail("Found banned targets: {}! ".format(res))
    elif verification_mode == "blocklist":
        res = blocklisted_deps & (transitive_deps - allowlisted_deps)
        if len(res) > 0:
            fail("Found blocklisted targets: {}!".format(res))
    else:
        fail("Invalid verification mode: " + verification_mode)

def _impl(ctx: bxl.Context):
    _impl_check_dependencies_test(
        ctx,
        ctx.cli_args.verification_mode,
        ctx.cli_args.allowlist_patterns,
        ctx.cli_args.blocklist_patterns,
        ctx.cli_args.target,
    )

test = bxl_main(
    cli_args = {
        "allowlist_patterns": cli_args.option(cli_args.list(cli_args.string())),
        "blocklist_patterns": cli_args.option(cli_args.list(cli_args.string())),
        "target": cli_args.target_label(),
        "verification_mode": cli_args.string(),
    },
    impl = _impl,
)
