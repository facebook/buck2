"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[39638],{28453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>c});var t=s(96540);const o={},i=t.createContext(o);function r(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),t.createElement(i.Provider,{value:n},e.children)}},36348:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>u,frontMatter:()=>r,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"users/how_tos/modifiers_setup","title":"Setup configuration modifiers","description":"Note: this page is not relevant for Meta internal users.","source":"@site/../docs/users/how_tos/modifiers_setup.md","sourceDirName":"users/how_tos","slug":"/users/how_tos/modifiers_setup","permalink":"/docs/users/how_tos/modifiers_setup","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"modifiers_setup","title":"Setup configuration modifiers"},"sidebar":"main","previous":{"title":"Exit Codes","permalink":"/docs/users/commands_extra/exit_codes"},"next":{"title":"Add configuration modifiers to entire directories","permalink":"/docs/users/how_tos/modifiers_package"}}');var o=s(74848),i=s(28453);const r={id:"modifiers_setup",title:"Setup configuration modifiers"},c=void 0,a={},d=[];function l(e){const n={a:"a",code:"code",em:"em",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"Note: this page is not relevant for Meta internal users."}),"\n",(0,o.jsxs)(n.p,{children:["To start using modifiers, all you need to do is call ",(0,o.jsx)(n.code,{children:"set_cfg_constructor"})," from\na ",(0,o.jsx)(n.code,{children:"PACKAGE"})," file."]}),"\n",(0,o.jsxs)(n.p,{children:["Start by adding the following to your root ",(0,o.jsx)(n.code,{children:"PACKAGE"})," file:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'load("@prelude//cfg/modifier:cfg_constructor.bzl", "cfg_constructor_post_constraint_analysis", "cfg_constructor_pre_constraint_analysis")\nload("@prelude//cfg/modifier:common.bzl", "MODIFIER_METADATA_KEY")\n\nnative.set_cfg_constructor(\n    stage0 = cfg_constructor_pre_constraint_analysis,\n    stage1 = cfg_constructor_post_constraint_analysis,\n    key = MODIFIER_METADATA_KEY,\n    aliases = struct(),\n    extra_data = struct(),\n)\n'})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"set_cfg_constructor"})," is a Buck2 builtin used to setup configuration modifiers.\nIt supports a few configuration points:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"stage0"})," and ",(0,o.jsx)(n.code,{children:"stage1"})," are used to resolve modifiers from the\n",(0,o.jsx)(n.a,{href:"/docs/rule_authors/configurations",children:"target platform"})," (which is now\nconsidered deprecated) and the modifiers set in the nearest ",(0,o.jsx)(n.code,{children:"PACKAGE"})," file, on\nthe target, and on the CLI. You ",(0,o.jsx)(n.em,{children:"can"})," override those, but the functions\nprovided by the prelude basically do what you would expect."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"key"})," is used to fetch modifiers defined on ",(0,o.jsx)(n.code,{children:"metadata"})," attributes. It is only\nsupported for legacy reasons, so you should not have to worry about it."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"aliases"})," contains modifier aliases to modifier modifiers. Populate it to make\naliases available from the CLI."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"extra_data"})," is used for logging/validation by Meta's internal modifier\nimplementation."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["As you can see, ",(0,o.jsx)(n.code,{children:"aliases"})," is the the only value that one would commonly want to\nconfigure, and it might make sense to call ",(0,o.jsx)(n.code,{children:"set_cfg_constructor"})," with different\n",(0,o.jsx)(n.code,{children:"aliases"})," values in different ",(0,o.jsx)(n.code,{children:"PACKAGE"})," files, if some aliases only make sense\nin specific projects (e.g. because they have custom configuration constraints)."]}),"\n",(0,o.jsxs)(n.p,{children:["The following is an example of exposing custom aliases for build constraints. We\ncreate a ",(0,o.jsx)(n.code,{children:"build_mode"})," constraint with 2 values (",(0,o.jsx)(n.code,{children:"debug"})," and ",(0,o.jsx)(n.code,{children:"release"}),"), which\nwould most likely be ",(0,o.jsx)(n.code,{children:"select"}),"ed in a toolchain definition."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"BUCK"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'constraint_setting(name = "build_mode")\n\nconstraint_value(\n    name = "debug",\n    constraint_setting = ":build_mode",\n)\n\nconstraint_value(\n    name = "release",\n    constraint_setting = ":build_mode",\n)\n'})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"PACKAGE"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'\nload("@prelude//cfg/modifier:cfg_constructor.bzl", "cfg_constructor_post_constraint_analysis", "cfg_constructor_pre_constraint_analysis")\nload("@prelude//cfg/modifier:common.bzl", "MODIFIER_METADATA_KEY")\n\nnative.set_cfg_constructor(\n    stage0 = cfg_constructor_pre_constraint_analysis,\n    stage1 = cfg_constructor_post_constraint_analysis,\n    key = MODIFIER_METADATA_KEY,\n    aliases = struct(\n        debug = "//constraints:debug",\n        release = "//constraints:release",\n    ),\n    extra_data = struct(),\n)\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Now, assuming that ",(0,o.jsx)(n.code,{children:":my_target"})," exists and is affected by the ",(0,o.jsx)(n.code,{children:"build_mode"}),"\nconstraint, we can build it in debug and release mode from the command line\nusing the ",(0,o.jsx)(n.code,{children:"-m"}),"/",(0,o.jsx)(n.code,{children:"--modifier"})," flag:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-sh",children:"buck2 build :my_target -m debug\nbuck2 build :my_target -m release\n"})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}}}]);