"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[37575],{15455:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>d,metadata:()=>n,toc:()=>a});const n=JSON.parse('{"id":"getting_started/tutorial_adding_tests","title":"Tutorial: Adding tests","description":"In our previous tutorials, we built a binary main target and a library","source":"@site/../docs/getting_started/tutorial_adding_tests.md","sourceDirName":"getting_started","slug":"/getting_started/tutorial_adding_tests","permalink":"/docs/getting_started/tutorial_adding_tests","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"tutorial_adding_tests","title":"Tutorial: Adding tests"},"sidebar":"main","previous":{"title":"Tutorial: Adding Dependencies","permalink":"/docs/getting_started/tutorial_adding_dependencies"},"next":{"title":"From Tutorial to Concepts","permalink":"/docs/getting_started/tutorial_to_concepts"}}');var i=s(74848),r=s(28453),l=s(78191);const d={id:"tutorial_adding_tests",title:"Tutorial: Adding tests"},c=void 0,o={},a=[{value:"What We&#39;ll Do:",id:"what-well-do",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Step 1: Create a dedicated directory for our tests",id:"step-1-create-a-dedicated-directory-for-our-tests",level:2},{value:"Step 2: Writing the Unit Test",id:"step-2-writing-the-unit-test",level:2},{value:"Step 3: Updating greeter_lib/BUCK to Define the Test Target",id:"step-3-updating-greeter_libbuck-to-define-the-test-target",level:2},{value:"Step 4: Running Your Tests",id:"step-4-running-your-tests",level:2},{value:"Conclusion",id:"conclusion",level:2}];function u(e){const t={a:"a",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.p,{children:["In our previous tutorials, we built a binary ",(0,i.jsx)(t.code,{children:"main"})," target and a ",(0,i.jsx)(t.code,{children:"library"}),"\ntarget that uses it, even incorporating a shared ",(0,i.jsx)(t.code,{children:"logging_lib"}),". Now, let's\nensure our ",(0,i.jsx)(t.code,{children:"library"})," target works as expected by adding unit tests. Writing\ntests helps us catch bugs early and refactor with confidence."]}),"\n",(0,i.jsx)(t.p,{children:"Our goal is to learn how to define and run Rust unit tests within the Buck2."}),"\n",(0,i.jsx)(t.h2,{id:"what-well-do",children:"What We'll Do:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsx)(t.li,{children:"Create a dedicated directory for our library's tests."}),"\n",(0,i.jsxs)(t.li,{children:["Write a simple unit test for the greet function in ",(0,i.jsx)(t.code,{children:"greeter_lib"}),"."]}),"\n",(0,i.jsxs)(t.li,{children:["Update ",(0,i.jsx)(t.code,{children:"greeter_lib/BUCK"})," to define a test target using ",(0,l.isInternal)()?(0,i.jsx)("code",{children:"rust_unittest"}):(0,i.jsx)("code",{children:"rust_test"}),"."]}),"\n",(0,i.jsx)(t.li,{children:"Run the tests using Buck2 and see the results."}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["You should follow the ",(0,i.jsx)(t.a,{href:"../tutorial_adding_dependencies",children:"previous tutorial"}),", we\nwill start from the state as the previous tutorial ends."]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"step-1-create-a-dedicated-directory-for-our-tests",children:"Step 1: Create a dedicated directory for our tests"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["Navigate to your ",(0,i.jsx)(t.code,{children:"greeter_lib"})," directory:"]}),"\n",(0,i.jsxs)(t.li,{children:["Create the ",(0,i.jsx)(t.code,{children:"tests"})," directory:"]}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"mkdir tests\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Your ",(0,i.jsx)(t.code,{children:"greeter_lib"})," structure should now look like this:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"greeter_lib\n\u251c\u2500\u2500 BUCK\n\u251c\u2500\u2500 src\n\u2502   \u2514\u2500\u2500 lib.rs\n\u2514\u2500\u2500 tests\n"})}),"\n",(0,i.jsx)(t.h2,{id:"step-2-writing-the-unit-test",children:"Step 2: Writing the Unit Test"}),"\n",(0,i.jsx)(t.p,{children:"Now, let's write a simple test for our greet function."}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["New file ",(0,i.jsx)(t.code,{children:"greeter_lib/tests/test.rs"}),", and edit it to look like this:"]}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-rust",children:'#[cfg(test)]\nmod tests {\n    use library;\n\n    #[test]\n    fn test_greet() {\n        assert_eq!(library::greet("World"), "Hello, World!");\n        assert_eq!(library::greet("Buck2"), "Hello, Buck2!");\n    }\n\n    #[test]\n    fn test_greet_empty() {\n        assert_eq!(library::greet(""), "Hello, !");\n    }\n}\n'})}),"\n",(0,i.jsx)(t.h2,{id:"step-3-updating-greeter_libbuck-to-define-the-test-target",children:"Step 3: Updating greeter_lib/BUCK to Define the Test Target"}),"\n",(0,i.jsx)(t.p,{children:"Next, we need to tell Buck2 about our test file and how to run it."}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["Edit ",(0,i.jsx)(t.code,{children:"greeter_lib/BUCK"}),":"]}),"\n"]}),"\n",(0,i.jsxs)(l.FbInternalOnly,{children:[(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'load("@fbsource//tools/build_defs:rust_library.bzl", "rust_library")\n# Load the rust_unittest rule\nload("@fbsource//tools/build_defs:rust_unittest.bzl", "rust_unittest")\n\n\nrust_library(\n    name = "library",\n    srcs = ["src/lib.rs"],\n    visibility = ["PUBLIC"],\n    deps = [\n        "fbcode//buck2/docs/buck2_lab/logging_lib:logging_lib",\n    ],\n)\n\n\n# New test target for our unit tests\nrust_unittest(\n    name = "test",\n    srcs = ["tests/test.rs"],\n    deps = [\n        # The test needs to depend on the library it\'s testing\n        ":library",\n    ]\n)\n'})}),(0,i.jsx)(t.p,{children:"Key additions and explanations:"}),(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.code,{children:'load("@fbsource//tools/build_defs:rust_unittest.bzl", "rust_unittest"):'})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["This line imports the ",(0,i.jsx)(t.code,{children:"rust_unittest"})," rule, which knows how to build and run\nRust tests."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"rust_unittest(...)"}),":"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:'name = "test"'}),': We\'re naming our test target "test".']}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:'srcs = ["tests/test.rs"]'}),": Specifies our test source file. Buck2 will\ncompile this as a separate test binary."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:'deps = [":library"]'}),": This is crucial. It tells Buck2 that our test code\ndepends on the ",(0,i.jsx)(t.code,{children:":library"})," target (our ",(0,i.jsx)(t.code,{children:"greeter_lib:library"}),"). This makes\n",(0,i.jsx)(t.code,{children:"library"})," target available to be imported and used within test.rs."]}),"\n"]}),"\n"]}),"\n"]})]}),"\n",(0,i.jsxs)(l.OssOnly,{children:[(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'\n...\n\n# New test target for our unit tests\nrust_test(\n    name = "test",\n    srcs = ["tests/test.rs"],\n    deps = [\n        # The test needs to depend on the library it\'s testing\n        ":library",\n    ]\n)\n'})}),(0,i.jsx)(t.p,{children:"Key additions and explanations:"}),(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"rust_test(...)"}),":","\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:'name = "test"'}),': We\'re naming our test target "test".']}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:'srcs = ["tests/test.rs"]'}),": Specifies our test source file. Buck2 will\ncompile this as a separate test binary."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:'deps = [":library"]'}),": This is crucial. It tells Buck2 that our test code\ndepends on the ",(0,i.jsx)(t.code,{children:":library"})," target (our ",(0,i.jsx)(t.code,{children:"greeter_lib:library"}),"). This makes\n",(0,i.jsx)(t.code,{children:"library"})," target available to be imported and used within test.rs."]}),"\n"]}),"\n"]}),"\n"]})]}),"\n",(0,i.jsx)(t.h2,{id:"step-4-running-your-tests",children:"Step 4: Running Your Tests"}),"\n",(0,i.jsx)(t.p,{children:"With the BUCK file updated, let's run our tests!"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["Navigate to the ",(0,i.jsx)(t.code,{children:"greeter_lib"})," directory."]}),"\n",(0,i.jsxs)(t.li,{children:["Run test using ",(0,i.jsx)(t.code,{children:"buck2 test"}),":"]}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"buck2 test :test\n"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"buck2 test"})," is the command to run test targets."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:":test"})," refers to the ",(0,l.isInternal)()?(0,i.jsx)("code",{children:"rust_unittest"}):(0,i.jsx)("code",{children:"rust_test"})," target named ",(0,i.jsx)(t.code,{children:"test"})," that we defined in the current\ndirectory's ",(0,i.jsx)(t.code,{children:"BUCK"})," file."]}),"\n"]}),"\n",(0,i.jsxs)(t.ol,{start:"3",children:["\n",(0,i.jsx)(t.li,{children:"Expected Output: You should see something like this:"}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"...\nTime elapsed: 6.5s\nTests finished: Pass 2. Fail 0. Fatal 0. Skip 0. Build failure 0\n"})}),"\n",(0,i.jsxs)(t.p,{children:['The key is seeing "Pass" and a summary indicating that all your test cases\n(',(0,i.jsx)(t.code,{children:"test_greet"})," and ",(0,i.jsx)(t.code,{children:"test_greet_empty"}),") passed."]}),"\n",(0,i.jsx)(t.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(t.p,{children:"Congratulations! \u2705"}),"\n",(0,i.jsxs)(t.p,{children:["You've successfully added unit tests to your ",(0,i.jsx)(t.code,{children:"library"})," target and run them using\nBuck2!"]}),"\n",(0,i.jsx)(t.p,{children:"We've learned how to:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Define a test target using ",(0,l.isInternal)()?(0,i.jsx)("code",{children:"rust_unittest"}):(0,i.jsx)("code",{children:"rust_test"})," for a Rust library."]}),"\n",(0,i.jsxs)(t.li,{children:["Execute tests using ",(0,i.jsx)(t.code,{children:"buck2 test"})," command."]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"Testing is a vital skill, and now you know how to integrate it into your Buck2\nRust workflow. This allows you to build more robust and reliable libraries and\napplications."})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>l,x:()=>d});var n=s(96540);const i={},r=n.createContext(i);function l(e){const t=n.useContext(r);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);