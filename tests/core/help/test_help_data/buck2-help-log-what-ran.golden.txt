# This file is @generated, regenerate by re-running test with `-- --env BUCK2_UPDATE_GOLDEN=1` appended to the test command

Output everything Buck2 ran from selected invocation.

The output is presented as a series of tab-delimited records with the following structure:

The reason for executing a given command. That's either to build or to test.

The identity of this command. This will include the target that ran required it.

The executor for this command. This will either be RE or local.

Details to reproduce it. For RE, that's the action digest. For local, the command.

To reproduce an action that ran on RE, use the following command then follow the instructions. The
DIGEST is of the form `hash:size`.

frecli cas download-action DIGEST

To reproduce an action that ran locally, make sure your working directory is the project root (if
unsure, use `buck2 root --kind project` to find it), then run the command. The command is already
shell-quoted.

Usage: buck2 log what-ran [OPTIONS] [PATH]

Arguments:
  [PATH]
          A path to an event-log file to read from

Options:
      --recent <NUMBER>
          Open the event-log file from a recent command

      --trace-id <ID>
          Show log by trace id

      --allow-remote
          This option does nothing

      --no-remote
          Do not allow downloading the log from manifold if it's not found locally

      --format <OUTPUT>
          Which output format to use for this command

          [default: tabulated]
          [possible values: tabulated, json, csv]

      --emit-cache-queries


      --skip-cache-hits


      --skip-remote-executions


      --skip-local-executions


      --filter-category <FILTER_CATEGORY>
          Regular expression to filter commands by given action category (i.e. type of of actions
          that are similar but operate on different inputs, such as invocations of a C++ compiler
          (whose category would be `cxx_compile`)). Matches by full string

      --failed
          Show only commands that failed

      --incomplete
          Show only commands that were not completed. That is command were running if buck2 process
          was killed, or command currently running if buck2 is running build now

      --show-std-err
          Show also std_err from commands that are run. If the command fails before completing, we
          display "<command did not finish executing>". If it finishes but there is no error, we
          display "<stderr is empty>". Otherwise, std_err is shown. For JSON, we show raw values and
          null for non-completion

      --omit-empty-std-err
          Omit commands if their std_err is empty

  -h, --help
          Print help (see a summary with '-h')

Universal Options:
  -v, --verbose <VERBOSITY>
          How verbose buck should be while logging.

          Values: 0 = Quiet, errors only; 1 = Show status. Default; 2 = more info about errors; 3 =
          more info about everything; 4 = more info about everything + stderr;

          It can be combined with specific log items (stderr, full_failed_command, commands,
          actions, status, stats, success) to fine-tune the verbosity of the log. Example usage
          "-v=1,stderr"

          [default: 1]

      --oncall <ONCALL>
          The oncall executing this command

      --client-metadata <CLIENT_METADATA>
          Metadata key-value pairs to inject into Buck2's logging. Client metadata must be of the
          form `key=value`, where `key` is a snake_case identifier, and will be sent to backend
          datasets
