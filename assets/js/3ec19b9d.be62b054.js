"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[12737],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var s=t(96540);const i={},r=s.createContext(i);function a(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:n},e.children)}},52900:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"rule_authors/writing_rules","title":"Writing Rules","description":"This page describes how to write rules for Buck2 and explains the flow for","source":"@site/../docs/rule_authors/writing_rules.md","sourceDirName":"rule_authors","slug":"/rule_authors/writing_rules","permalink":"/docs/rule_authors/writing_rules","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"writing_rules","title":"Writing Rules"},"sidebar":"main","previous":{"title":"External Cells","permalink":"/docs/users/advanced/external_cells"},"next":{"title":"Writing Toolchains","permalink":"/docs/rule_authors/writing_toolchains"}}');var i=t(74848),r=t(28453),a=t(78191);const o={id:"writing_rules",title:"Writing Rules"},l=void 0,c={},d=[{value:"Workflow by example",id:"workflow-by-example",level:2},{value:"Concepts and design",id:"concepts-and-design",level:2},{value:"Providers",id:"providers",level:3},{value:"Actions",id:"actions",level:3},{value:"Run action",id:"run-action",level:4},{value:"Debugging",id:"debugging",level:2},{value:"Testing Rules",id:"testing-rules",level:2},{value:"New rules",id:"new-rules",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"This page describes how to write rules for Buck2 and explains the flow for\nimplementing rules that are already defined in Buck1."}),"\n",(0,i.jsxs)(n.p,{children:["For a list of the API functions available, see the\n",(0,i.jsx)(n.a,{href:"../../api/build",children:"Build APIs"}),"."]}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["Rules such as ",(0,i.jsx)(n.code,{children:"@fbcode_macros//build_defs:native_rules.bzl buck_genrule"})," are not\nactually rules, they are ",(0,i.jsx)(n.em,{children:"macros"})," (Starlark functions that eventually call out\nthe underlying ",(0,i.jsx)(n.code,{children:"genrule"})," ",(0,i.jsx)(n.em,{children:"rule"}),"). Macros in Buck2 are mostly compatible with\nBuck1 and should be written in the same way."]})}),"\n",(0,i.jsx)(n.h2,{id:"workflow-by-example",children:"Workflow by example"}),"\n",(0,i.jsxs)(n.p,{children:["The built-in Buck2 rules are stored in the ",(0,i.jsx)(n.code,{children:"prelude"})," folder in the buck2 repo.\nTo add a rule for a language, say ",(0,i.jsx)(n.code,{children:"pascal"}),":"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Look at\n",(0,i.jsx)(n.a,{href:"https://github.com/facebook/buck2/blob/main/prelude/decls/",children:"prelude/decls"}),"\nto see the attributes that are supported in Buck1 and are mirrored into\nBuck2. If ",(0,i.jsx)(n.code,{children:"pascal"})," was an existing rule, you would see what attributes it\ntakes (often it will be ",(0,i.jsx)(n.code,{children:"pascal_library"})," and ",(0,i.jsx)(n.code,{children:"pascal_binary"}),")."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Create a file ",(0,i.jsx)(n.code,{children:"pascal.bzl"})," that will contain your rule implementations. The\ndetails are explained later, but a dummy rule looks like the following:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def pascal_binary_impl(_ctx: AnalysisContext) -> list[Provider]:\n    return [DefaultInfo()]\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Create a directory in ",(0,i.jsx)(n.code,{children:"fbcode/buck2/tests/targets/rules/pascal"})," with\n",(0,i.jsx)(n.code,{children:"TARGETS"})," and whatever source files and test targets you need to test your\nproject. Note, Apple tests are currently located at\n",(0,i.jsx)(n.code,{children:"xplat/buck2/tests/apple/..."}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Test your code with ",(0,i.jsx)(n.code,{children:"buck2 build fbcode//buck2/tests/targets/rules/pascal:"}),".\nThey should succeed with no actual output produced."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Now implement the rules (see the rest of this page)."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["Before merging a diff, it's important that all your Starlark is warning free (if\nyou don't want to set up Buck2 for local development, test it in CI).\n",(0,i.jsxs)(a.FbInternalOnly,{children:["If you do set it up locally, see the ",(0,i.jsx)(n.code,{children:"README.md"})," in the root of\n",(0,i.jsx)(n.code,{children:"fbcode/buck2"}),". Running ",(0,i.jsx)(n.code,{children:"./test.py --lint-only"})," will confirm your Starlark code\nis warning free."]})]})}),"\n",(0,i.jsx)(n.h2,{id:"concepts-and-design",children:"Concepts and design"}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.em,{children:"rule"})," for a ",(0,i.jsx)(n.em,{children:"target"})," uses ",(0,i.jsx)(n.em,{children:"attributes"})," to declare ",(0,i.jsx)(n.em,{children:"actions"}),", which produce\n",(0,i.jsx)(n.em,{children:"artifacts"})," that get included in ",(0,i.jsx)(n.em,{children:"providers"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"For example, given:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'def pascal_binary_impl(ctx: AnalysisContext) -> list[Provider]:\n    ...\n    binary = ctx.actions.declare_output(ctx.attrs.out)\n    ctx.actions.run(["pascalc", ctx.attrs.srcs, "-o", binary.as_output()])\n    return [\n        DefaultInfo(default_output = binary),\n    ]\n\npascal_binary = rule(impl = pascal_binary_impl, attrs = {\n  "out": attrs.string(),\n  ...\n})\n'})}),"\n",(0,i.jsx)(n.p,{children:"In the above snippet:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Rule"})," is ",(0,i.jsx)(n.code,{children:"pascal_binary"}),", which is implemented by ",(0,i.jsx)(n.code,{children:"pascal_binary_impl"}),". The\nrule says how to build things."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Target"})," will be something like\n",(0,i.jsx)(n.code,{children:"fbcode//buck2/tests/targets/rules/pascal:my_binary"}),". The rule implementation\n",(0,i.jsx)(n.code,{children:"pascal_binary_impl"})," will be called once per target."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Attributes"})," are the fields on the target (for example, you might have\n",(0,i.jsx)(n.code,{children:"out"}),", which can be accessed via ",(0,i.jsx)(n.code,{children:"ctx.attrs.out"}),")."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Actions"})," are declared by the rule with things like ",(0,i.jsx)(n.code,{children:"ctx.actions.run"}),", which\ntakes a command line. Note that the actions are not run by the rule, but\ndeclared, so that Buck2 can run them later."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Artifacts"})," represent files on disk, which could be source or build outputs\n(",(0,i.jsx)(n.code,{children:"binary"})," in the above example).","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"For build outputs, the artifact is produced by an action, and the existence\nof the artifact does not imply the build has been run: the artifact\n'remembers' what should be run if it is required."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Providers"})," are returned, which is information that other rules get to use.\nThese will often contain artifacts."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The rule implementation takes in a ",(0,i.jsx)(n.code,{children:"ctx"}),", which is the rule context. The two\nmost important fields are ",(0,i.jsx)(n.code,{children:"ctx.attrs"}),", which picks up the attributes declared by\nthe rule, and ",(0,i.jsx)(n.code,{children:"ctx.actions"}),", which lets you create new actions to actually do\nsomething."]}),"\n",(0,i.jsxs)(n.p,{children:["The output of any actions performed will be materialized in ",(0,i.jsx)(n.code,{children:"buck-out"}),". However,\nonly the defined outputs of providers are available for dependent rules to\nconsume and only the actions necessary to produce those outputs being consumed\nwill be run. By default, the ",(0,i.jsx)(n.code,{children:"default_output"})," of the ",(0,i.jsx)(n.code,{children:"DefaultInfo"})," provider is\nbuilt and output during a ",(0,i.jsx)(n.code,{children:"buck build"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"providers",children:"Providers"}),"\n",(0,i.jsxs)(n.p,{children:["Providers are the data returned from a rule and are the only way that\ninformation from this rule is available to rules that depend on it. Every rule\nmust return at least the ",(0,i.jsx)(n.code,{children:"DefaultInfo"})," provider, but most will also return\neither ",(0,i.jsx)(n.code,{children:"RunInfo"})," (because they are executable) or some custom provider (because\nthey are incorporated into something that is ultimately executable)."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"DefaultInfo"})," provider has a field ",(0,i.jsx)(n.code,{children:"default_output"}),", which is the file that\nwill be built when someone executes a ",(0,i.jsx)(n.code,{children:"buck2 build"})," on this particular target,\nand the file that will be used when someone runs ",(0,i.jsx)(n.code,{children:"$(location target)"})," or uses it\nas a source file (such as ",(0,i.jsx)(n.code,{children:'srcs = [":my_target"]'}),".)"]}),"\n",(0,i.jsxs)(n.p,{children:["The current rule of thumb is that if you can build the ",(0,i.jsx)(n.code,{children:"default_output"}),", the\nrule must 'work', and, if usable, should be 'ready'. For example, for a binary,\nthe executable and runtime libraries it depends on might be returned. For a\nlibrary, because neither the static or dynamic library is the 'default', you\nmerely have to do enough work to ensure that the static and dynamic library\nprobably work."]}),"\n",(0,i.jsxs)(n.p,{children:["Similar to how ",(0,i.jsx)(n.code,{children:"DefaultInfo"})," wraps a list of artifacts and ",(0,i.jsx)(n.code,{children:"$(location)"})," selects\nfrom ",(0,i.jsx)(n.code,{children:"DefaultInfo"}),", ",(0,i.jsx)(n.code,{children:"RunInfo"})," wraps a command line and ",(0,i.jsx)(n.code,{children:"$(exe)"})," selects from\n",(0,i.jsx)(n.code,{children:"RunInfo"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["For more information about command lines, see ",(0,i.jsx)(n.a,{href:"#run-action",children:"Run action"}),", below."]}),"\n",(0,i.jsxs)(n.p,{children:["For libraries, usually you need to pass some information about the library up to\nthe binary. The ",(0,i.jsx)(n.em,{children:"only"})," information that dependents on the library get are the\nproviders, so designing the information that flows around the provider is\ncritical to designing good rules."]}),"\n",(0,i.jsxs)(n.p,{children:["For a hypothetical rule, you may decide you want the name of the library and the\nartifact that represents the ",(0,i.jsx)(n.code,{children:".so"})," file, for which you could define the\nfollowing provider:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'PascalLibraryInfo = provider(fields=[\n    "name",   # The name of the library\n    "object"  # An artifact, the .so file that needs linking in\n    ]\n)\n'})}),"\n",(0,i.jsx)(n.p,{children:"Often, you'll grab your dependencies from all your providers:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"my_deps = [x[PascalLibraryInfo] for x in ctx.attrs.deps]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["In many cases, it becomes apparent you need the transitive closure of all\nlibraries (for example, the libraries and everything they depend upon), in which\ncase, the standard pattern is to move to a provider of a list of ",(0,i.jsx)(n.code,{children:"record"})," (see\nthe\n",(0,i.jsx)(n.a,{href:"https://github.com/facebook/starlark-rust/blob/main/docs/types.md",children:"types.md"}),"\ndocument in GitHub) and the ",(0,i.jsx)(n.code,{children:"flatten/dedupe"})," functions, defining it as:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'PascalLibraryInfo = provider(fields=["links"]) # a list of LinkData\n\nLinkData = record(name = str, object = "artifact")\n'})}),"\n",(0,i.jsx)(n.p,{children:"And then consuming it:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"my_links = dedupe(flatten([x[PascalLibraryInfo].links for x in ctx.attrs.deps]))\nmy_info = PascalLibraryInfo(links = my_links)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["However, this ",(0,i.jsx)(n.code,{children:"flatten"}),"/",(0,i.jsx)(n.code,{children:"dupe"})," pattern can get expensive, especially when you\nhave a deep dependency graph. To fix that it's recommended to use\n",(0,i.jsx)(n.a,{href:"/docs/rule_authors/transitive_sets",children:"transitive sets"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"actions",children:"Actions"}),"\n",(0,i.jsx)(n.p,{children:"There are several actions you can use to create symlink trees, and so on."}),"\n",(0,i.jsx)(n.h4,{id:"run-action",children:"Run action"}),"\n",(0,i.jsxs)(n.p,{children:["Of the various actions, the ",(0,i.jsx)(n.code,{children:"run"})," action is by far the most important: it's the\none that invokes a command line."]}),"\n",(0,i.jsx)(n.p,{children:"A command line is both a list of string arguments and a list of artifacts they\ndepend on; with syntactic niceties for adding artifacts to command lines in a\nway that ensures the dependencies are usually correct."}),"\n",(0,i.jsx)(n.p,{children:"Following are examples of command line manipulations:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'cmd = cmd_args(["some", "arguments"])\ncmd.add("another-arg")\ncmd.add(ctx.attrs.src) # An input artifact\nout = ctx.actions.declare_output("an output")\ncmd.add(out.as_output())\nctx.actions.run(cmd)\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The action ",(0,i.jsx)(n.code,{children:"declare_output"})," creates a new artifact which is not bound to\nanything. You can call ",(0,i.jsx)(n.code,{children:".as_output()"})," on it when adding it to a command line to\nsay that this command line doesn't take the artifact as an input but produces it\nas an output."]}),"\n",(0,i.jsxs)(n.p,{children:["From now on, if ",(0,i.jsx)(n.code,{children:"out"})," is used as a dependency (either to another command line,\nor in ",(0,i.jsx)(n.code,{children:"DefaultInfo"}),") then the action will be run to produce that artifact.\nTypically, these outputs are declared (",(0,i.jsx)(n.code,{children:"declare_output"}),"), bound in a\n",(0,i.jsx)(n.code,{children:"ctx.actions.run"})," call with ",(0,i.jsx)(n.code,{children:".as_output()"}),", then either used locally as the\ninput to another action or returned in a provider."]}),"\n",(0,i.jsx)(n.p,{children:"As another example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'cmd = cmd_args(["cp", input, output.as_output()])\nctx.actions.run(cmd)\n'})}),"\n",(0,i.jsx)(n.p,{children:"A command provides both a string (what to write when used) and a list of\nartifacts (what must be available when used). Normally, as in the case above,\nthe artifacts that are used correspond to those on the command line. But imagine\nthe rule is changed to write the command to a shell script first:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'sh = ctx.actions.write("test.sh", ["cp", input, output])\ncmd = cmd_args(["sh",sh],hidden=[input, output.as_output()])\nctx.actions.run(cmd)\n'})}),"\n",(0,i.jsx)(n.p,{children:"The command has been written to a shell script, which is now run. Beforehand,\nall the artifacts used by the command appeared on the command line. Now they\ndon't. However, the shell script still accesses input and output. To inform the\nrun command, use the hidden field of the command line to declare the dependency."}),"\n",(0,i.jsx)(n.p,{children:"For more complicated actions, which perform meaningful logic beyond invoking a\nsimple command, the tendency is to write custom Python scripts. Python scripts\nare used instead of shell scripts as they have better cross-platform\ncompatibility and fewer hidden corners (especially in error paths)."}),"\n",(0,i.jsxs)(n.p,{children:["As an example of a Python helper, see\n",(0,i.jsx)(n.a,{href:"https://github.com/facebook/buck2/blob/main/prelude/cxx/tools/make_comp_db.py",children:"make_comp_db.py"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"A further advantage of using Python is that these commands can be tested in\nisolation, outside of Buck2."}),"\n",(0,i.jsx)(n.h2,{id:"debugging",children:"Debugging"}),"\n",(0,i.jsxs)(n.p,{children:["The functions ",(0,i.jsx)(n.code,{children:"fail"}),", ",(0,i.jsx)(n.code,{children:"print"})," and ",(0,i.jsx)(n.code,{children:"pprint"})," are your friends. To get started, a\n",(0,i.jsx)(n.code,{children:"buck2 build fbcode//buck2/tests/targets/rules/pascal:"})," builds everything or\n",(0,i.jsx)(n.code,{children:"buck2 run fbcode//buck2/tests/targets/rules/pascal:my_binary"})," runs a specific\nbinary that returns a ",(0,i.jsx)(n.code,{children:"RunInfo"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"testing-rules",children:"Testing Rules"}),"\n",(0,i.jsxs)(n.p,{children:["A common way to test is to use ",(0,i.jsx)(n.code,{children:"genrule"})," to cause the produced binary to run and\nassert some properties from it. If your rule is in Buck1 and Buck2, use a\n",(0,i.jsx)(n.code,{children:"TARGETS"})," file so you can test with both. If your tests are incompatible with\nBuck1 (such as if it is a new rule), use ",(0,i.jsx)(n.code,{children:"TARGETS.v2"}),", which will only be seen\nby Buck2 and won't cause errors with Buck1."]}),"\n",(0,i.jsx)(n.h2,{id:"new-rules",children:"New rules"}),"\n",(0,i.jsxs)(n.p,{children:["If your rule is ",(0,i.jsx)(n.strong,{children:"not"})," already in Buck1, then you can define it wherever you\nlike, with a preference for it not being in ",(0,i.jsx)(n.code,{children:"fbcode/buck2/prelude"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["The only advantage of the ",(0,i.jsx)(n.code,{children:"prelude"})," is that rules can be used without a\ncorresponding ",(0,i.jsx)(n.code,{children:"load"}),", which is generally considered a misfeature. The attributes\nshould usually be placed adjacent to the rule itself."]}),"\n",(0,i.jsxs)(n.p,{children:["As an example, just below the ",(0,i.jsx)(n.code,{children:"pascal_binary_impl"})," function, you could write:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'pascal_binary = rule(\n    impl = pascal_binary_impl,\n    attrs = {\n        "deps": attrs.list(attrs.dep()),\n        "src": attrs.source(),\n    }\n)\n'})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}}}]);