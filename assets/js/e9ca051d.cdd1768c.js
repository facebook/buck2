"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[23323],{28453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>r});var c=i(96540);const s={},l=c.createContext(s);function a(e){const n=c.useContext(l);return c.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),c.createElement(l.Provider,{value:n},e.children)}},63749:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>c,toc:()=>t});const c=JSON.parse('{"id":"concepts/build_file","title":"Build File","description":"A build file is a file, typically named BUCK, that defines one or more","source":"@site/../docs/concepts/build_file.md","sourceDirName":"concepts","slug":"/concepts/build_file","permalink":"/docs/concepts/build_file","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"build_file","title":"Build File"},"sidebar":"main","previous":{"title":"Build Rule","permalink":"/docs/concepts/build_rule"},"next":{"title":"Build Target","permalink":"/docs/concepts/build_target"}}');var s=i(74848),l=i(28453);const a={id:"build_file",title:"Build File"},r="Build File",o={},t=[{value:"Key concepts",id:"key-concepts",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Syntax restrictions",id:"syntax-restrictions",level:3},{value:"Mini BUCK example",id:"mini-buck-example",level:3},{value:"Targets",id:"targets",level:3},{value:"Build file naming configuration",id:"build-file-naming-configuration",level:3},{value:"Cross-referencing (source files &amp; packages)",id:"cross-referencing-source-files--packages",level:2},{value:"Source file referencing",id:"source-file-referencing",level:3},{value:"Packages dependencies",id:"packages-dependencies",level:3},{value:"An example of cross-package dependencies",id:"an-example-of-cross-package-dependencies",level:4},{value:"Invalid referencing example",id:"invalid-referencing-example",level:4}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"build-file",children:"Build File"})}),"\n",(0,s.jsxs)(n.p,{children:["A ",(0,s.jsx)(n.em,{children:"build file"})," is a file, typically named ",(0,s.jsx)(n.code,{children:"BUCK"}),", that defines one or more\n",(0,s.jsx)(n.a,{href:"/docs/concepts/build_rule",children:"build rule"}),"s. Buck2 takes a ",(0,s.jsx)(n.code,{children:"BUCK"})," file as input and evaluates\nthe file to declare ",(0,s.jsx)(n.a,{href:"/docs/concepts/build_target",children:"target"}),"s, which are then used to create a\ngraph of dependencies and to derive the actions that must be completed to build\nintermediate and final software outputs."]}),"\n",(0,s.jsx)(n.h2,{id:"key-concepts",children:"Key concepts"}),"\n",(0,s.jsx)(n.p,{children:"Build files are written in Starlark and follow these core principles:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Build files are syntactically Starlark files, containing a set of\n",(0,s.jsx)(n.a,{href:"/docs/concepts/build_target",children:"target"})," definitions (i.e. invocations of functions where the\nname of the function is the type of the target, and the arguments to the\nfunction are the attributes of the target)."]}),"\n",(0,s.jsx)(n.li,{children:"Each build file can contain multiple target definitions and is uniquely\nidentified by the directory it is in."}),"\n",(0,s.jsx)(n.li,{children:"Relative order of these target definitions is not important; all that matters\nis which target definitions were declared, and with what values, by the time\nevaluation of the build file completes."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"syntax",children:"Syntax"}),"\n",(0,s.jsx)(n.h3,{id:"syntax-restrictions",children:"Syntax restrictions"}),"\n",(0,s.jsx)(n.p,{children:"In order to enforce a clean separation between code and data, build files have\nthe following restrictions:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Cannot contain arbitrary function definitions or conditional/for statements."}),"\n",(0,s.jsxs)(n.li,{children:["Do not support ",(0,s.jsx)(n.code,{children:"*args"})," and ",(0,s.jsx)(n.code,{children:"**kwargs"})," arguments; all arguments must be listed\nexplicitly."]}),"\n",(0,s.jsxs)(n.li,{children:["Custom functions must be defined in ",(0,s.jsx)(n.code,{children:".bzl"})," files and loaded explicitly at the\ntop of the build file."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"mini-buck-example",children:"Mini BUCK example"}),"\n",(0,s.jsxs)(n.p,{children:["Here is a mini example of a build file containing two targets, one refers to a\nfile ",(0,s.jsx)(n.code,{children:"main.c"})," as its inputs and the other two files ",(0,s.jsx)(n.code,{children:"greeting.c"})," and\n",(0,s.jsx)(n.code,{children:"greeting.h"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"cxx_binary(\n    name = 'hello',\n    srcs = [\n        'main.c',\n    ],\n    deps = [\n        ':greeting',\n    ],\n)\n\ncxx_library(\n    name = 'greeting',\n    srcs = [\n        'greeting.c',\n    ],\n    exported_headers = [\n        'greeting.h',\n    ],\n)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"targets",children:"Targets"}),"\n",(0,s.jsxs)(n.p,{children:["Each ",(0,s.jsx)(n.a,{href:"/docs/concepts/build_target",children:"target"})," has a name, identifying it uniquely in the same\nbuild file. Additionally, it has a set of named attributes depending on the type\nof the target."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Target naming rules:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Attribute names can only have alphanumeric characters and underscores"}),"\n",(0,s.jsx)(n.li,{children:"Attribute names cannot start with a digit"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"build-file-naming-configuration",children:"Build file naming configuration"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["You can change the name that Buck2 uses for the build file in the ",(0,s.jsx)(n.code,{children:"buildfile"}),"\nsection of ",(0,s.jsx)(n.a,{href:"/docs/concepts/glossary#buckconfig",children:"buckconfig"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"cross-referencing-source-files--packages",children:"Cross-referencing (source files & packages)"}),"\n",(0,s.jsx)(n.p,{children:"Understanding Buck2's referencing model is crucial for building correct and\nefficient projects. Buck2 approaches dependencies from two essential\nperspectives:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Source file referencing"})," - Defines which build file has authority over\nspecific source files"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Build package dependencies"})," - Establishes how targets from different\npackages can depend on each other"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"These rules ensure clean dependency management and enable Buck2 to create\nefficient, reproducible builds."}),"\n",(0,s.jsx)(n.h3,{id:"source-file-referencing",children:"Source file referencing"}),"\n",(0,s.jsx)(n.p,{children:'A source file in your project can only be referenced by rules in its "nearest"\nbuild file, where:'}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:'"Nearest" means its closest direct ancestor in your project\'s file tree.'}),"\n",(0,s.jsx)(n.li,{children:"If a source file has a build file as a sibling, then that is its nearest\nancestor."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["For example, if your project had the following ",(0,s.jsx)(n.code,{children:"BUCK"})," files:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"java/com/facebook/base/BUCK\njava/com/facebook/common/BUCK\njava/com/facebook/common/collect/BUCK\n"})}),"\n",(0,s.jsx)(n.p,{children:"Then your build rules would have the following constraints:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Rules in ",(0,s.jsx)(n.code,{children:"java/com/facebook/base/BUCK"})," can reference any file under\n",(0,s.jsx)(n.code,{children:"java/com/facebook/base/"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Rules in ",(0,s.jsx)(n.code,{children:"java/com/facebook/common/BUCK"})," can reference any files under that\ndirectory, except for those under ",(0,s.jsx)(n.code,{children:"java/com/facebook/common/collect/"}),', as\nthose "belong" to the ',(0,s.jsx)(n.code,{children:"BUCK"})," file in the ",(0,s.jsx)(n.code,{children:"collect"})," directory."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"packages-dependencies",children:"Packages dependencies"}),"\n",(0,s.jsxs)(n.p,{children:["The set of source files accessible to a build file is also known as its\n",(0,s.jsx)(n.a,{href:"/docs/concepts/key_concepts#packages",children:(0,s.jsx)(n.em,{children:"build package"})}),". The way to refer to code across\nbuild packages is to create build rules and use ",(0,s.jsx)(n.code,{children:"deps"})," to refer to that code."]}),"\n",(0,s.jsx)(n.h4,{id:"an-example-of-cross-package-dependencies",children:"An example of cross-package dependencies"}),"\n",(0,s.jsxs)(n.p,{children:["Going back to the previous example, suppose code in\n",(0,s.jsx)(n.code,{children:"java/com/facebook/common/concurrent/"})," wants to depend on code in\n",(0,s.jsx)(n.code,{children:"java/com/facebook/common/collect/"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["First, the ",(0,s.jsx)(n.code,{children:"java/com/facebook/common/collect/BUCK"})," file would have a build rule\nlike:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"java_library(\n  name = 'collect',\n  srcs = glob(['*.java']),\n  deps = ['//java/com/facebook/base:base',],\n)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Then ",(0,s.jsx)(n.code,{children:"java/com/facebook/common/BUCK"})," could have a rule like:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"java_library(\n  name = 'concurrent',\n  srcs = glob(['concurrent/*.java']),\n  deps = [\n    '//java/com/facebook/base:base',\n    '//java/com/facebook/common/collect:collect',\n  ],\n)\n"})}),"\n",(0,s.jsx)(n.h4,{id:"invalid-referencing-example",children:"Invalid referencing example"}),"\n",(0,s.jsxs)(n.p,{children:["The following ",(0,s.jsx)(n.strong,{children:"would be invalid"})," because ",(0,s.jsx)(n.code,{children:"java/com/facebook/common/collect/"}),"\nhas its own build file, so ",(0,s.jsx)(n.code,{children:"//java/com/facebook/common/collect:concurrent"}),"\ncannot list ",(0,s.jsx)(n.code,{children:"java/com/facebook/common/collect/*.java"})," in its ",(0,s.jsx)(n.code,{children:"srcs"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"java_library(\n  name = 'concurrent',\n  srcs = glob(['collect/*.java', 'concurrent/*.java']),  # Invalid reference\n  deps = ['//java/com/facebook/base:base',],\n)\n"})})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);