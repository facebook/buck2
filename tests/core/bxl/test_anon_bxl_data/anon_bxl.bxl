# Copyright (c) Meta Platforms, Inc. and affiliates.
#
# This source code is licensed under both the MIT license found in the
# LICENSE-MIT file in the root directory of this source tree and the Apache
# License, Version 2.0 found in the LICENSE-APACHE file in the root directory
# of this source tree.

def _assert_eq(a, b):
    if a != b:
        fail("Expected {} == {}".format(a, b))

Info = provider(fields = {
    "hello": provider_field(Artifact),
    "world": provider_field(Artifact),
    "x": int,
})

def _my_anon_impl(bxl_ctx: bxl.Context, attrs: struct) -> list[Provider]:
    action = bxl_ctx.bxl_actions().actions
    out = action.write("res.txt", "foo_bar")
    hello = action.write("hello.txt", "hello" + str(attrs.x))
    world = action.write("world.txt", "world" + str(attrs.x))
    info = Info(
        x = attrs.x,
        hello = hello,
        world = world,
    )
    return [DefaultInfo(default_output = out), info]

anon = bxl.anon_rule(
    impl = _my_anon_impl,
    attrs = {
        "x": attrs.int(),
    },
)

def _define_anon(_ctx: bxl.Context):
    _assert_eq(type(anon), "rule")

define_anon = bxl_main(
    impl = _define_anon,
    cli_args = {},
)

def _eval_anon_bxl(ctx: bxl.Context):
    actions = ctx.bxl_actions().actions

    promise0 = actions.anon_target(anon, attrs = {"x": 2}).promise
    anon_res0 = ctx.resolve(actions, promise0)
    _assert_eq(anon_res0[Info].x, 2)

    promise1 = actions.anon_target(anon, attrs = {"x": 42}).promise
    anon_res1 = ctx.resolve(actions, promise1)
    _assert_eq(anon_res1[Info].x, 42)

eval_anon_bxl = bxl_main(
    impl = _eval_anon_bxl,
    cli_args = {},
)

def _check_content_impl(bxl_ctx: bxl.Context, src: ArtifactValue, content: str, out: OutputArtifact):
    src = src.read_string()
    _assert_eq(src, content)
    bxl_actions = bxl_ctx.bxl_actions().actions
    bxl_actions.write(out, src + "bar")
    return []

_check_content = bxl.dynamic_actions(
    impl = _check_content_impl,
    attrs = {
        "content": dynattrs.value(str),
        "out": dynattrs.output(),
        "src": dynattrs.artifact_value(),
    },
)

def _check_anon_ouput_artifact(ctx: bxl.Context):
    actions = ctx.bxl_actions().actions
    promise = actions.anon_target(anon, attrs = {"x": 42}).promise
    anon_res = ctx.resolve(actions, promise)

    output = actions.declare_output("output")

    actions.dynamic_output_new(_check_content(
        src = anon_res[Info].hello,
        out = output.as_output(),
        content = "hello42",
    ))
    ctx.output.ensure(output)

check_anon_ouput_artifact = bxl_main(
    impl = _check_anon_ouput_artifact,
    cli_args = {},
)

def _eval_lost_of_anon_bxl(ctx: bxl.Context):
    actions = ctx.bxl_actions().actions

    promise = actions.anon_targets([(
        anon,
        {
            "x": i,
        },
    ) for i in range(0, 2000)]).promise

    outputs = []
    for anon_res in ctx.resolve(actions, promise):
        outputs.append(anon_res[Info].hello)

    ensured = ctx.output.ensure_multiple(outputs)
    for ensure in ensured:
        ctx.output.print(ensure.abs_path())

eval_lost_of_anon_bxl = bxl_main(
    impl = _eval_lost_of_anon_bxl,
    cli_args = {},
)

def _anon_with_arg_impl(bxl_ctx: bxl.Context, attrs: struct) -> list[Provider]:
    action = bxl_ctx.bxl_actions().actions
    out, _ = action.write("out.txt", attrs.arg, allow_args = True)
    return [DefaultInfo(default_output = out)]

anon_with_arg = bxl.anon_rule(
    impl = _anon_with_arg_impl,
    attrs = {
        "arg": attrs.list(attrs.arg()),
    },
)

def _eval_of_anon_with_arg_bxl(ctx: bxl.Context):
    targets = ctx.cquery().eval("//:simple")
    attrs = targets[0].attrs_eager()
    actions = ctx.bxl_actions().actions
    promise = actions.anon_target(anon_with_arg, attrs = {"arg": attrs.arg_attr.value()}).promise
    ctx.resolve(actions, promise)

eval_of_anon_with_arg_bxl = bxl_main(
    impl = _eval_of_anon_with_arg_bxl,
    cli_args = {
    },
)
