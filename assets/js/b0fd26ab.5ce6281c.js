"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[89298],{28453:(e,t,s)=>{s.d(t,{R:()=>l,x:()=>c});var n=s(96540);const i={},r=n.createContext(i);function l(e){const t=n.useContext(r);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),n.createElement(r.Provider,{value:t},e.children)}},39322:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>n,toc:()=>o});const n=JSON.parse('{"id":"prelude/rules/git/git_fetch","title":"git_fetch","description":"Checkout a commit from a git repository.","source":"@site/../docs/prelude/rules/git/git_fetch.md","sourceDirName":"prelude/rules/git","slug":"/prelude/rules/git/git_fetch","permalink":"/docs/prelude/rules/git/git_fetch","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"ruleSidebar","previous":{"title":"git","permalink":"/docs/prelude/rules/git/"},"next":{"title":"go","permalink":"/docs/prelude/rules/go/"}}');var i=s(74848),r=s(28453);s(56289);const l={},c="git_fetch",d={},o=[{value:"Function Signature",id:"function-signature",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Examples",id:"examples",level:3}];function a(e){const t={a:"a",code:"code",h1:"h1",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"git_fetch",children:"git_fetch"})}),"\n",(0,i.jsx)(t.p,{children:"Checkout a commit from a git repository."}),"\n",(0,i.jsx)(t.h3,{id:"function-signature",children:"Function Signature"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'def git_fetch(\n    *,\n    name: str,\n    default_target_platform: None | str = None,\n    target_compatible_with: list[str] = [],\n    compatible_with: list[str] = [],\n    exec_compatible_with: list[str] = [],\n    visibility: list[str] = [],\n    within_view: list[str] = ["PUBLIC"],\n    metadata: OpaqueMetadata = {},\n    tests: list[str] = [],\n    modifiers: OpaqueMetadata = [],\n    _apple_platforms: dict[str, str] = {},\n    _git_fetch_tool: str = "prelude//git/tools:git_fetch",\n    allow_cache_upload: bool = True,\n    contacts: list[str] = [],\n    default_host_platform: None | str = None,\n    labels: list[str] = [],\n    licenses: list[str] = [],\n    repo: str,\n    rev: str,\n    sub_targets: list[str] = [],\n) -> None\n'})}),"\n",(0,i.jsx)(t.h3,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"name"}),": (required)"]}),"\n",(0,i.jsx)(t.p,{children:"name of the target"}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"default_target_platform"}),": (defaults to: ",(0,i.jsx)(t.code,{children:"None"}),")"]}),"\n",(0,i.jsx)(t.p,{children:"specifies the default target platform, used when no platforms are specified on the command line"}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"target_compatible_with"}),": (defaults to: ",(0,i.jsx)(t.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(t.p,{children:"a list of constraints that are required to be satisfied for this target to be compatible with a configuration"}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"compatible_with"}),": (defaults to: ",(0,i.jsx)(t.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(t.p,{children:"a list of constraints that are required to be satisfied for this target to be compatible with a configuration"}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"exec_compatible_with"}),": (defaults to: ",(0,i.jsx)(t.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(t.p,{children:"a list of constraints that are required to be satisfied for this target to be compatible with an execution platform"}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"visibility"}),": (defaults to: ",(0,i.jsx)(t.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(t.p,{children:"a list of visibility patterns restricting what targets can depend on this one"}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"within_view"}),": (defaults to: ",(0,i.jsx)(t.code,{children:'["PUBLIC"]'}),")"]}),"\n",(0,i.jsx)(t.p,{children:"a list of visibility patterns restricting what this target can depend on"}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"metadata"}),": (defaults to: ",(0,i.jsx)(t.code,{children:"{}"}),")"]}),"\n",(0,i.jsx)(t.p,{children:"a key-value map of metadata associated with this target"}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"tests"}),": (defaults to: ",(0,i.jsx)(t.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(t.p,{children:"a list of targets that provide tests for this one"}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"modifiers"}),": (defaults to: ",(0,i.jsx)(t.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(t.p,{children:"an array of modifiers associated with this target"}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"allow_cache_upload"}),": (defaults to: ",(0,i.jsx)(t.code,{children:"True"}),")"]}),"\n",(0,i.jsx)(t.p,{children:"Whether the results of the fetch can be written to the action cache and CAS."}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"contacts"}),": (defaults to: ",(0,i.jsx)(t.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(t.p,{children:"A list of organizational contacts for this rule. These could be individuals who you would contact in the event of a failure or other issue with the rule."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"contacts = [ 'Joe Sixpack', 'Erika Mustermann' ]\n"})}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"labels"}),": (defaults to: ",(0,i.jsx)(t.code,{children:"[]"}),")"]}),"\n",(0,i.jsxs)(t.p,{children:["Set of arbitrary strings which allow you to annotate a ",(0,i.jsx)(t.a,{href:"https://buck2.build/docs/concepts/build_rule/",children:"build rule"})," with tags that can be searched for over an entire dependency tree using ",(0,i.jsx)(t.code,{children:"buck query()"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"licenses"}),": (defaults to: ",(0,i.jsx)(t.code,{children:"[]"}),")"]}),"\n",(0,i.jsxs)(t.p,{children:["Set of license files for this library. To get the list of license files for a given build rule and all of its dependencies, you can use ",(0,i.jsx)(t.a,{href:"https://buck2.build/docs/users/commands/query/",children:"buck query"})]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"repo"}),": (required)"]}),"\n",(0,i.jsx)(t.p,{children:"Url suitable as a git remote."}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"rev"}),": (required)"]}),"\n",(0,i.jsx)(t.p,{children:"40-digit hex SHA-1 of the git commit."}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"sub_targets"}),": (defaults to: ",(0,i.jsx)(t.code,{children:"[]"}),")"]}),"\n",(0,i.jsxs)(t.p,{children:["A list of paths within the remote repo to be made accessible as sub-targets. For example if we have a git_fetch with ",(0,i.jsx)(t.code,{children:'name = "serde.git"'})," and ",(0,i.jsx)(t.code,{children:'sub_targets = ["serde_derive"]'}),", then other targets would be able to refer to the serde_derive subdirectory of the repo as ",(0,i.jsx)(t.code,{children:'":serde.git[serde_derive]"'}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'\ngit_fetch(\n    name = "serde.git",\n    repo = "https://github.com/serde-rs/serde",\n    rev = "fccb9499bccbaca0b7eef91a3a82dfcb31e0b149",\n)\n\n'})})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}}}]);