"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[33850],{28453:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>c});var i=t(96540);const r={},s=i.createContext(r);function d(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),i.createElement(s.Provider,{value:n},e.children)}},81860:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>d,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"api/starlark/dict","title":"dict","description":"def dict(\\\\args, \\\\\\\\*kwargs) -> dict","source":"@site/../docs/api/starlark/dict.md","sourceDirName":"api/starlark","slug":"/api/starlark/dict","permalink":"/docs/api/starlark/dict","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"apiSidebar","previous":{"title":"bool","permalink":"/docs/api/starlark/bool"},"next":{"title":"float","permalink":"/docs/api/starlark/float"}}');var r=t(74848),s=t(28453);t(56289);const d={},c="dict",a={},l=[{value:"dict.clear",id:"dictclear",level:2},{value:"dict.get",id:"dictget",level:2},{value:"dict.items",id:"dictitems",level:2},{value:"dict.keys",id:"dictkeys",level:2},{value:"dict.pop",id:"dictpop",level:2},{value:"dict.popitem",id:"dictpopitem",level:2},{value:"dict.setdefault",id:"dictsetdefault",level:2},{value:"dict.update",id:"dictupdate",level:2},{value:"dict.values",id:"dictvalues",level:2}];function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"dict",children:"dict"})}),"\n",(0,r.jsx)("pre",{class:"language-python",children:(0,r.jsx)("code",{children:"def dict(*args, **kwargs) -> dict"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://github.com/bazelbuild/starlark/blob/master/spec.md#dict",children:"dict"}),": creates a dictionary."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"dict"})," creates a dictionary. It accepts up to one positional argument,\nwhich is interpreted as an iterable of two-element sequences\n(pairs), each specifying a key/value pair in the\nresulting dictionary."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"dict"})," also accepts any number of keyword arguments, each of which\nspecifies a key/value pair in the resulting dictionary; each keyword\nis treated as a string."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"dict() == {}\ndict(**{'a': 1}) == {'a': 1}\ndict({'a': 1}) == {'a': 1}\ndict([(1, 2), (3, 4)]) == {1: 2, 3: 4}\ndict([(1, 2), ['a', 'b']]) == {1: 2, 'a': 'b'}\ndict(one=1, two=2) == {'one': 1, 'two': 2}\ndict([(1, 2)], x=3) == {1: 2, 'x': 3}\ndict([('x', 2)], x=3) == {'x': 3}\nx = {'a': 1}\ny = dict([('x', 2)], **x)\nx == {'a': 1} and y == {'x': 2, 'a': 1}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"dictclear",children:"dict.clear"}),"\n",(0,r.jsx)("pre",{class:"language-python",children:(0,r.jsx)("code",{children:"def dict.clear() -> None"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://github.com/bazelbuild/starlark/blob/master/spec.md#dict%C2%B7clear",children:"dict.clear"}),": clear a dictionary"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"D.clear()"})," removes all the entries of dictionary D and returns ",(0,r.jsx)(n.code,{children:"None"}),".\nIt fails if the dictionary is frozen or if there are active iterators."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'x = {"one": 1, "two": 2}\nx.clear()\nx == {}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"dictget",children:"dict.get"}),"\n",(0,r.jsx)("pre",{class:"language-python",children:(0,r.jsx)("code",{children:"def dict.get(key, default = ..., /)"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://github.com/bazelbuild/starlark/blob/master/spec.md#dict%C2%B7get",children:"dict.get"}),": return an element from the dictionary."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"D.get(key[, default])"})," returns the dictionary value corresponding to\nthe given key. If the dictionary contains no such value, ",(0,r.jsx)(n.code,{children:"get"}),"\nreturns ",(0,r.jsx)(n.code,{children:"None"}),", or the value of the optional ",(0,r.jsx)(n.code,{children:"default"})," parameter if\npresent."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"get"})," fails if ",(0,r.jsx)(n.code,{children:"key"})," is unhashable."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'x = {"one": 1, "two": 2}\nx.get("one") == 1\nx.get("three") == None\nx.get("three", 0) == 0\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"dictitems",children:"dict.items"}),"\n",(0,r.jsx)("pre",{class:"language-python",children:(0,r.jsx)("code",{children:"def dict.items() -> list[(typing.Any, typing.Any)]"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://github.com/bazelbuild/starlark/blob/master/spec.md#dict%C2%B7items",children:"dict.items"}),": get list of (key, value) pairs."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"D.items()"})," returns a new list of key/value pairs, one per element in\ndictionary D, in the same order as they would be returned by a ",(0,r.jsx)(n.code,{children:"for"}),"\nloop."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'x = {"one": 1, "two": 2}\nx.items() == [("one", 1), ("two", 2)]\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"dictkeys",children:"dict.keys"}),"\n",(0,r.jsx)("pre",{class:"language-python",children:(0,r.jsx)("code",{children:"def dict.keys() -> list"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://github.com/bazelbuild/starlark/blob/master/spec.md#dict%C2%B7keys",children:"dict.keys"}),": get the list of keys of the dictionary."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"D.keys()"})," returns a new list containing the keys of dictionary D, in\nthe same order as they would be returned by a ",(0,r.jsx)(n.code,{children:"for"})," loop."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'x = {"one": 1, "two": 2}\nx.keys() == ["one", "two"]\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"dictpop",children:"dict.pop"}),"\n",(0,r.jsx)("pre",{class:"language-python",children:(0,r.jsx)("code",{children:"def dict.pop(key, default = ..., /)"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://github.com/bazelbuild/starlark/blob/master/spec.md#dict%C2%B7pop",children:"dict.pop"}),": return an element and remove it from a dictionary."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"D.pop(key[, default])"})," returns the value corresponding to the specified\nkey, and removes it from the dictionary.  If the dictionary contains no\nsuch value, and the optional ",(0,r.jsx)(n.code,{children:"default"})," parameter is present, ",(0,r.jsx)(n.code,{children:"pop"}),"\nreturns that value; otherwise, it fails."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"pop"})," fails if ",(0,r.jsx)(n.code,{children:"key"})," is unhashable, or the dictionary is frozen or has\nactive iterators."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'x = {"one": 1, "two": 2}\nx.pop("one") == 1\nx == {"two": 2}\nx.pop("three", 0) == 0\nx.pop("three", None) == None\n'})}),"\n",(0,r.jsx)(n.p,{children:"Failure:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"{'one': 1}.pop('four')   # error: not found\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"dictpopitem",children:"dict.popitem"}),"\n",(0,r.jsx)("pre",{class:"language-python",children:(0,r.jsx)("code",{children:"def dict.popitem() -> (typing.Any, typing.Any)"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://github.com/bazelbuild/starlark/blob/master/spec.md#dict%C2%B7popitem",children:"dict.popitem"}),": returns and removes the first key/value pair of a dictionary."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"D.popitem()"})," returns the first key/value pair, removing it from the\ndictionary."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"popitem"})," fails if the dictionary is empty, frozen, or has active\niterators."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'x = {"one": 1, "two": 2}\nx.popitem() == ("one", 1)\nx.popitem() == ("two", 2)\nx == {}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Failure:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"{}.popitem()   # error: empty dict\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"dictsetdefault",children:"dict.setdefault"}),"\n",(0,r.jsx)("pre",{class:"language-python",children:(0,r.jsx)("code",{children:"def dict.setdefault(key, default = ..., /)"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://github.com/bazelbuild/starlark/blob/master/spec.md#dict%C2%B7setdefault",children:"dict.setdefault"}),": get a value from a dictionary, setting it to a new value if not present."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"D.setdefault(key[, default])"})," returns the dictionary value\ncorresponding to the given key. If the dictionary contains no such\nvalue, ",(0,r.jsx)(n.code,{children:"setdefault"}),", like ",(0,r.jsx)(n.code,{children:"get"}),", returns ",(0,r.jsx)(n.code,{children:"None"})," or the value of the\noptional ",(0,r.jsx)(n.code,{children:"default"})," parameter if present; ",(0,r.jsx)(n.code,{children:"setdefault"})," additionally\ninserts the new key/value entry into the dictionary."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"setdefault"})," fails if the key is unhashable or if the dictionary is\nfrozen."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'x = {"one": 1, "two": 2}\nx.setdefault("one") == 1\nx.setdefault("three", 0) == 0\nx == {"one": 1, "two": 2, "three": 0}\nx.setdefault("four") == None\nx == {"one": 1, "two": 2, "three": 0, "four": None}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"dictupdate",children:"dict.update"}),"\n",(0,r.jsx)("pre",{class:"language-python",children:(0,r.jsx)("code",{children:"def dict.update(\npairs: typing.Iterable[(typing.Any, typing.Any)] | dict = ...,\n/,\n**kwargs,\n) -> None"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://github.com/bazelbuild/starlark/blob/master/spec.md#dict%C2%B7update",children:"dict.update"}),": update values in the dictionary."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"D.update([pairs][, name=value[, ...])"})," makes a sequence of key/value\ninsertions into dictionary D, then returns ",(0,r.jsx)(n.code,{children:"None."})]}),"\n",(0,r.jsxs)(n.p,{children:["If the positional argument ",(0,r.jsx)(n.code,{children:"pairs"})," is present, it must be\nanother ",(0,r.jsx)(n.code,{children:"dict"}),", or some other iterable.\nIf it is another ",(0,r.jsx)(n.code,{children:"dict"}),", then its key/value pairs are inserted into D.\nIf it is an iterable, it must provide a sequence of pairs (or other\niterables of length 2), each of which is treated as a key/value pair\nto be inserted into D."]}),"\n",(0,r.jsxs)(n.p,{children:["For each ",(0,r.jsx)(n.code,{children:"name=value"})," argument present, the name is converted to a\nstring and used as the key for an insertion into D, with its\ncorresponding value being ",(0,r.jsx)(n.code,{children:"value"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"update"})," fails if the dictionary is frozen."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'x = {}\nx.update([("a", 1), ("b", 2)], c=3)\nx.update({"d": 4})\nx.update(e=5)\nx == {"a": 1, "b": 2, "c": 3, "d": 4, "e": 5}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"dictvalues",children:"dict.values"}),"\n",(0,r.jsx)("pre",{class:"language-python",children:(0,r.jsx)("code",{children:"def dict.values() -> list"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://github.com/bazelbuild/starlark/blob/master/spec.md#dict%C2%B7values",children:"dict.values"}),": get the list of values of the dictionary."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"D.values()"})," returns a new list containing the dictionary's values, in\nthe same order as they would be returned by a ",(0,r.jsx)(n.code,{children:"for"})," loop over the\ndictionary."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'x = {"one": 1, "two": 2}\nx.values() == [1, 2]\n'})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}}}]);