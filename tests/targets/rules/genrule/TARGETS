# @noautodeps

load("@fbcode_macros//build_defs:native_rules.bzl", "buck_genrule")
load("@fbsource//tools/build_defs:glob_defs.bzl", "glob")
load("//buck2/tests/targets/rules:bzl_native.bzl", "bzl_native")

# Simplest possible
bzl_native.genrule(
    name = "my_genrule0",
    srcs = [],
    out = "out.txt",
    bash = "echo HELLO > $OUT",
    cmd_exe = "echo HELLO> %OUT%",
)

# Using the fbcode wrapper
buck_genrule(
    name = "my_genrule1",
    srcs = [],
    out = "out.txt",
    bash = "echo HELLO > $OUT",
    cmd_exe = "echo HELLO> %OUT%",
)

# Add a `srcs`
buck_genrule(
    name = "my_genrule2",
    srcs = ["src.txt"],
    out = "out.txt",
    bash = "cat $SRCDIR/src.txt > $OUT",
    cmd_exe = "type %SRCDIR%\\src.txt > %OUT%",
)

# Add a dependency
buck_genrule(
    name = "my_genrule3",
    srcs = [":my_genrule1"],
    out = "out.txt",
    bash = "cat $SRCDIR/out.txt > $OUT",
    cmd_exe = "type %SRCDIR%\\out.txt > %OUT%",
)

# Use `.` as the output directory
buck_genrule(
    name = "my_genrule4",
    srcs = [],
    out = ".",
    bash = "echo HELLO > $OUT/out.txt",
    cmd_exe = "echo HELLO> %OUT%\\out.txt",
)

# Use cmd to invoke restricted_bin logic
buck_genrule(
    name = "my_genrule5",
    srcs = [],
    out = "out.txt",
    cmd = "echo HELLO > $OUT",
    cmd_exe = "echo HELLO> %OUT%",
)

# $(location) needs to be relative to the cd location
buck_genrule(
    name = "my_genrule6",
    srcs = [],
    out = "out.txt",
    bash = "cat $(location :my_genrule1) > $OUT",
    cmd_exe = "type $(location :my_genrule1) > %OUT%",
)

# use srcs as a map
buck_genrule(
    name = "my_genrule7",
    srcs = {"src_renamed": "src.txt"},
    out = "out.txt",
    bash = "cat src_renamed > $OUT",
    cmd_exe = "type src_renamed > %OUT%",
)

# use GVFS
buck_genrule(
    name = "my_genrule10",
    srcs = {"myclang": "symlink_to_gvfs/clang"},
    out = "out.txt",
    bash = "./myclang --version > $OUT",
    # GVFS only available on linux hosts
) if host_info().os.is_linux else None

# Requires absolute output
buck_genrule(
    name = "my_genrule11",
    srcs = ["src.txt"],
    out = "out.txt",
    bash = "stat fbcode/buck2/tests/targets/rules/genrule/src.txt && echo Hello > $OUT",
    cmd_exe = "dir fbcode\\buck2\\tests\\targets\\rules\\genrule\\src.txt && echo Hello> %OUT%",
    labels = ["buck2_test_build_root"],
)

# Requires absolute sources
buck_genrule(
    name = "my_genrule12",
    srcs = ["src.txt"],
    out = "out.txt",
    bash = "stat fbcode/buck2/tests/targets/rules/genrule/src.txt && cat $SRCS > $OUT",
    cmd_exe = "dir fbcode\\buck2\\tests\\targets\\rules\\genrule\\src.txt && type %SRCS% > %OUT%",
    labels = ["buck2_test_build_root"],
)

# Requires absolute dependencies
buck_genrule(
    name = "my_genrule13",
    srcs = ["src.txt"],
    out = "out.txt",
    bash = "stat fbcode/buck2/tests/targets/rules/genrule/src.txt && cat $(location :my_genrule1) > $OUT",
    cmd_exe = "dir fbcode\\buck2\\tests\\targets\\rules\\genrule\\src.txt && type $(location :my_genrule1) > %OUT%",
    labels = ["buck2_test_build_root"],
)

bzl_native.sh_binary(
    name = "run",
    main = select({
        "DEFAULT": "run.sh",
        "ovr_config//os:windows": "run.bat",
    }),
)

# Uses $(location-platform). Has the same effect as $(exe)
buck_genrule(
    name = "my_genrule14",
    srcs = [],
    out = "out.txt",
    bash = "$(location-platform :run) > $OUT",
    cmd_exe = "$(location-platform :run) > %OUT%",
)

# Srcs which are inside directories
buck_genrule(
    name = "directory_srcs",
    srcs = ["directory/another.txt"],
    out = "out.txt",
    bash = "cat directory/another.txt > $OUT",
    cmd_exe = "type directory\\another.txt > %OUT%",
)

# Both globs and src files in nested directories
buck_genrule(
    name = "recursive_glob",
    srcs = glob(["directory/**/*.txt"]),
    out = "out.txt",
    bash = "(cat directory/another.txt && cat directory/inner/inner.txt) > $OUT",
    cmd_exe = "(type directory\\another.txt && type directory\\inner\\inner.txt) > %OUT%",
)

# Used to test we cleanup things properly
# See test_buck2.py, test_cleanup
buck_genrule(
    name = "cleanup",
    srcs = [],
    out = "dir1/dir2/output.txt",
    bash = "echo x > $OUT",
    cmd_exe = "echo x> %OUT%",
)

buck_genrule(
    name = "executable_helper",
    srcs = [],
    out = select({
        "DEFAULT": "output.sh",
        "ovr_config//os:windows": "output.bat",
    }),
    bash = "echo '#!/usr/bin/env bash\necho hello' > $OUT && chmod +x $OUT",
    cmd_exe = "echo @echo off ^&^& echo hello> %OUT%",
    executable = True,
)

# Used to test `buck run <target> -- <target_args>`
# See e2e/test_run_inplace.py
buck_genrule(
    name = "executable_echo_args",
    srcs = [],
    out = select({
        "DEFAULT": "output.sh",
        "ovr_config//os:windows": "output.bat",
    }),
    bash = "echo '#!/usr/bin/env bash\necho \"${@:1}\"' > $OUT && chmod +x $OUT",
    cmd_exe = "echo @echo off ^&^& echo %*> %OUT%",
    executable = True,
)

# Check that we can do $(exe) on a genrule
buck_genrule(
    name = "executable",
    srcs = [],
    out = "output.txt",
    bash = "$(exe :executable_helper) > $OUT",
    cmd_exe = "$(exe :executable_helper) > %OUT%",
)

# Ensure that mktemp works
buck_genrule(
    name = "mktemp",
    srcs = [],
    out = "output.txt",
    cmd = "python3 -c \"import os, tempfile; print(os.getenv('TMPDIR')); tempfile.mkstemp(); open(os.getenv('OUT'), 'w')\"",
    labels = ["buck2_test_local_exec"],
)

# Ensure that 1MB of output doesn't break
buck_genrule(
    name = "verbose",
    srcs = [],
    out = "out.txt",
    cmd = "python3 -c \"import os, sys; print(chr(97) * 1024 * 1024, file=sys.stderr); open(os.getenv('OUT'), 'w')\"",
)

# Ensure that 10MB of output doesn't break either.
buck_genrule(
    name = "very-verbose",
    srcs = [],
    out = "out.txt",
    cmd = "python3 -c \"import os, sys; print(chr(97) * 1024 * 1024 * 10, file=sys.stderr); open(os.getenv('OUT'), 'w')\"",
)

# Ensure that output '.' doesn't break subsequent uses
buck_genrule(
    name = "genrule-dot-output",
    srcs = [],
    out = ".",
    bash = "echo HELLO > $OUT/out.txt",
    cmd_exe = "echo HELLO> %OUT%\\out.txt",
)

buck_genrule(
    name = "genrule-dot-input",
    srcs = [":genrule-dot-output"],
    out = "out.txt",
    bash = "echo HELLO > $OUT",
    cmd_exe = "echo HELLO> %OUT%",
)
