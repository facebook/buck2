"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[93418],{28453:(t,e,r)=>{r.d(e,{R:()=>s,x:()=>c});var n=r(96540);const a={},i=n.createContext(a);function s(t){const e=n.useContext(i);return n.useMemo(function(){return"function"==typeof t?t(e):{...e,...t}},[e,t])}function c(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(a):t.components||a:s(t.components),n.createElement(i.Provider,{value:e},t.children)}},93100:(t,e,r)=>{r.r(e),r.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>c,metadata:()=>n,toc:()=>u});const n=JSON.parse('{"id":"api/bxl/EnsuredArtifact","title":"EnsuredArtifact","description":"An artifact that will be materialized to buck-out at the end of the bxl invocation. These artifacts can be printed to bxl\'s results. Doing so will print the path of the artifact rather than the standard representation.","source":"@site/../docs/api/bxl/EnsuredArtifact.md","sourceDirName":"api/bxl","slug":"/api/bxl/EnsuredArtifact","permalink":"/docs/api/bxl/EnsuredArtifact","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"apiSidebar","previous":{"title":"CqueryContext","permalink":"/docs/api/bxl/CqueryContext"},"next":{"title":"Error","permalink":"/docs/api/bxl/Error"}}');var a=r(74848),i=r(28453),s=r(56289);const c={},o="EnsuredArtifact",l={},u=[{value:"EnsuredArtifact.abs_path",id:"ensuredartifactabs_path",level:2},{value:"EnsuredArtifact.rel_path",id:"ensuredartifactrel_path",level:2}];function d(t){const e={code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",p:"p",pre:"pre",...(0,i.R)(),...t.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"ensuredartifact",children:"EnsuredArtifact"})}),"\n",(0,a.jsx)(e.p,{children:"An artifact that will be materialized to buck-out at the end of the bxl invocation. These artifacts can be printed to bxl's results. Doing so will print the path of the artifact rather than the standard representation."}),"\n",(0,a.jsx)(e.p,{children:"Ensured artifacts are serializable and hashable."}),"\n",(0,a.jsx)(e.h2,{id:"ensuredartifactabs_path",children:"EnsuredArtifact.abs_path"}),"\n",(0,a.jsx)("pre",{class:"language-python",children:(0,a.jsxs)("code",{children:["def EnsuredArtifact.abs_path(\n) -> ",(0,a.jsx)(s.default,{to:"/docs/api/bxl/EnsuredArtifact",children:"bxl.EnsuredArtifact"})]})}),"\n",(0,a.jsxs)(e.p,{children:["Converts this artifact to be printed by its absolute path. Note that this will only print out the absolute path via ",(0,a.jsx)(e.code,{children:"ctx.output.print()"}),". Starlark's ",(0,a.jsx)(e.code,{children:"print()"})," will print out the display info for an ensured artifact."]}),"\n",(0,a.jsx)(e.p,{children:"Sample usage:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'def _impl_abs_path(ctx):\n    actions = ctx.bxl_actions().actions\n    output = actions.write("my_output", "my_content")\n    ensured = ctx.output.ensure(output) # currently defaults to creating an EnsuredArtifact with a relative path\n\n    ensured_with_abs_path = ensured.abs_path() # create a new EnsuredArtifact with absolute path to reuse\n    print(ensured_with_abs_path) # should return something like <ensured artifact ... >\n    ctx.output.print(ensured_with_abs_path) # should return the absolute path of the artifact\n'})}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.h2,{id:"ensuredartifactrel_path",children:"EnsuredArtifact.rel_path"}),"\n",(0,a.jsx)("pre",{class:"language-python",children:(0,a.jsxs)("code",{children:["def EnsuredArtifact.rel_path(\n) -> ",(0,a.jsx)(s.default,{to:"/docs/api/bxl/EnsuredArtifact",children:"bxl.EnsuredArtifact"})]})}),"\n",(0,a.jsxs)(e.p,{children:["Converts this artifact to be printed by its path relative to the project root. Note that this will only print out the relative path via ",(0,a.jsx)(e.code,{children:"ctx.output.print()"}),". Starlark's ",(0,a.jsx)(e.code,{children:"print()"})," will print out the display info for an ensured artifact."]}),"\n",(0,a.jsx)(e.p,{children:"Sample usage:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'def _impl_rel_path(ctx):\n    actions = ctx.bxl_actions().actions\n    output = actions.write("my_output", "my_content")\n    ensured = ctx.output.ensure(output) # currently defaults to creating an EnsuredArtifact with a relative path\n\n    ensured_with_rel_path = ensured.rel_path() # create a new EnsuredArtifact with relative path to reuse\n    print(ensured_with_rel_path) # should return something like <ensured artifact ... >\n    ctx.output.print(ensured_with_rel_path) # should return the relative path of the artifact\n'})})]})}function h(t={}){const{wrapper:e}={...(0,i.R)(),...t.components};return e?(0,a.jsx)(e,{...t,children:(0,a.jsx)(d,{...t})}):d(t)}}}]);