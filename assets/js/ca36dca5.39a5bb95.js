"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[56753],{28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>t});var i=s(96540);const l={},r=i.createContext(l);function o(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:o(e.components),i.createElement(r.Provider,{value:n},e.children)}},95984:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>t,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"users/commands/lsp","title":"lsp","description":"This document provides an overview of the commands and options available under buck2 lsp.","source":"@site/../docs/users/commands/lsp.generated.md","sourceDirName":"users/commands","slug":"/users/commands/lsp","permalink":"/docs/users/commands/lsp","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"lsp","title":"lsp"},"sidebar":"main","previous":{"title":"log","permalink":"/docs/users/commands/log"},"next":{"title":"profile","permalink":"/docs/users/commands/profile"}}');var l=s(74848),r=s(28453);const o={id:"lsp",title:"lsp"},t="lsp",d={},c=[{value:"<code>buck2 lsp</code>",id:"buck2-lsp",level:2},{value:"Options:",id:"options",level:3}];function a(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"lsp",children:"lsp"})}),"\n",(0,l.jsxs)(n.p,{children:["This document provides an overview of the commands and options available under ",(0,l.jsx)(n.code,{children:"buck2 lsp"}),"."]}),"\n",(0,l.jsx)(n.h2,{id:"buck2-lsp",children:(0,l.jsx)(n.code,{children:"buck2 lsp"})}),"\n",(0,l.jsx)(n.p,{children:"Start an LSP server for starlark files"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Usage"}),": ",(0,l.jsx)(n.code,{children:"buck2 lsp [OPTIONS]"})]}),"\n",(0,l.jsx)(n.h3,{id:"options",children:"Options:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"-c, --config <SECTION.OPTION=VALUE>"}),"\nList of config options"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"--config-file <PATH>"}),"\nList of config file paths"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"--fake-host <HOST>"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Possible values:","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"default"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"linux"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"macos"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"windows"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"--fake-arch <ARCH>"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Possible values:","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"default"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"aarch64"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"x8664"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"--fake-xcode-version <VERSION-BUILD>"}),"\nValue must be formatted as: version-build (e.g., 14.3.0-14C18 or 14.1-14B47b)"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"--reuse-current-config"}),"\nRe-uses any ",(0,l.jsx)(n.code,{children:"--config"})," values (inline or via modefiles) if there's a previous command, otherwise the flag is ignored."]}),"\n",(0,l.jsxs)(n.p,{children:["If there is a previous command and ",(0,l.jsx)(n.code,{children:"--reuse-current-config"})," is set, then the old config is used, ignoring any overrides."]}),"\n",(0,l.jsx)(n.p,{children:"If there is no previous command but the flag was set, then the flag is ignored, the command behaves as if the flag was not set at all."}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"--preemptible <PREEMPTIBLE>"}),"\nUsed to configure when this command could be preempted by another command for the same isolation dir."]}),"\n",(0,l.jsx)(n.p,{children:"Normally, when you run two commands - from different terminals, say - buck2 will attempt to run them in parallel. However, if the two commands are based on different state, that is they either have different configs or different filesystem states, buck2 cannot run them in parallel. The default behavior in this case is to block the second command until the first completes."}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Possible values:","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"never"}),": (default) When another command starts that cannot run in parallel with this one, block that command"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"always"}),": When another command starts, interrupt this command, ",(0,l.jsx)(n.em,{children:"even if they could run in parallel"}),". There is no good reason to use this other than that it provides slightly nicer superconsole output"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"ondifferentstate"}),": When another command starts that cannot run in parallel with this one, interrupt this command"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"--exit-when <EXIT_WHEN>"}),"\nWhether to proceed with or fail this invocation based on the daemon state"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Possible values:","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"never"}),": (default) Execute this command normally"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"differentstate"}),": Fail this command if another command is already running with a different state"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"notidle"}),": Fail this command if another command is already running (regardless of daemon state)"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"--disable-starlark-types"}),"\nDisable runtime type checking in Starlark interpreter."]}),"\n",(0,l.jsx)(n.p,{children:"This option is not stable, and can be used only locally to diagnose evaluation performance problems."}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"--stack"}),"\nRecord or show target call stacks."]}),"\n",(0,l.jsx)(n.p,{children:"Starlark call stacks will be included in duplicate targets error."}),"\n",(0,l.jsxs)(n.p,{children:["If a command outputs targets (like ",(0,l.jsx)(n.code,{children:"targets"})," command), starlark call stacks will be printed after the targets."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"--profile-patterns <PROFILE_PATTERNS>"}),"\nEnables profiling for all evaluations whose evaluation identifier matches one of the provided patterns."]}),"\n",(0,l.jsxs)(n.p,{children:["Some examples identifiers: analysis/cell//buck2/app/buck2_action_impl",":buck2_action_impl"," (cfg",":linux-x86_64","#27ac5723e0c99706) load/cell//build_defs/json.bzl load/prelude//playground/test.bxl load/cell//build_defs/json.bzl@other_cell load_buildfile/fbcode//third-party-buck/platform010/build/ncurses load_packagefile/fbcode//cli/rust/cli_delegate anon_analysis/anon//:_anon_link_rule (anon: 766183dc9b6f680a) (fbcode//buck2/platform/execution",":linux-x86_64","#08961b14cfb182aa) bxl/prelude//playground/test.bxl",":playground"]}),"\n",(0,l.jsxs)(n.p,{children:["You can pass ",(0,l.jsx)(n.code,{children:"--profile-patterns=.*"})," to enable no-op profiling for everything (additionally pass ",(0,l.jsx)(n.code,{children:"--profile-patterns-mode=none"})," to use no-op profiling to just get a list of all the identifiers)."]}),"\n",(0,l.jsxs)(n.p,{children:["The profile results will be written to individual .profile files in ",(0,l.jsx)(n.code,{children:"<ROOT_OUTPUT>/<data+time>-<uuid>/"})," where ROOT_OUTPUT comes from the --profile-patterns-output flag. In that directory there will also be a file listing all the identifiers that were profiled."]}),"\n",(0,l.jsx)(n.p,{children:"Enabling/disabling profiling of an evaluation will invalidate the results of that evaluation and it will be recomputed. In some cases, this will cause other work to also need to be redone (for example, invalidating the result of loading PACKAGE files causes all consumers to be recomputed). But if you keep profiling options consistent between commands, only the work that is otherwise invalidated will be redone (and only for those would profiling results be created)."}),"\n",(0,l.jsx)(n.p,{children:"You must also pass --profile-patterns-mode and --profile-patterns-output."}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"--profile-patterns-output <PATH>"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"--profile-patterns-mode <PROFILE_PATTERNS_MODE>"}),"\nProfile mode."]}),"\n",(0,l.jsxs)(n.p,{children:["Memory profiling modes have suffixes either ",(0,l.jsx)(n.code,{children:"-allocated"})," or ",(0,l.jsx)(n.code,{children:"-retained"}),"."]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"-retained"})," means memory kept in frozen starlark heaps after analysis completes. ",(0,l.jsx)(n.code,{children:"-retained"})," does not work when profiling loading, because no memory is retained after loading and frozen heap is not even created. This is probably what you want when profiling analysis."]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"-allocated"})," means allocated memory, including memory which is later garbage collected."]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Possible values:","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"time-flame"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"heap-allocated"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"heap-retained"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"heap-flame-allocated"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"heap-flame-retained"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"heap-summary-allocated"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"heap-summary-retained"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"statement"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"bytecode"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"bytecode-pairs"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"typecheck"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"coverage"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"none"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"--event-log <PATH>"}),"\nWrite events to this log file"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"--write-build-id <PATH>"}),"\nWrite command invocation id into this file"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"--unstable-write-invocation-record <PATH>"}),"\nWrite the invocation record (as JSON) to this path. No guarantees whatsoever are made regarding the stability of the format"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"--command-report-path <PATH>"}),"\nWrite the command report to this path. A command report is always written to ",(0,l.jsx)(n.code,{children:"buck-out/v2/<uuid>/command_report"})," even without this flag"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(a,{...e})}):a(e)}}}]);