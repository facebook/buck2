"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[91512],{7878:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"rfcs/drafts/oss-observability","title":"Observability for Buck2 OSS","description":"Context","source":"@site/../docs/rfcs/drafts/oss-observability.md","sourceDirName":"rfcs/drafts","slug":"/rfcs/drafts/oss-observability","permalink":"/docs/rfcs/drafts/oss-observability","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}}');var s=n(74848),o=n(28453);const l={},a="Observability for Buck2 OSS",r={},d=[{value:"Context",id:"context",level:2},{value:"Prior Art",id:"prior-art",level:2},{value:"Bazel - BEP",id:"bazel---bep",level:3},{value:"Open Telemetry / Prometheus",id:"open-telemetry--prometheus",level:3},{value:"Buck2&#39;s existing BuckEvent",id:"buck2s-existing-buckevent",level:2},{value:"Others",id:"others",level:2},{value:"Tools using BEP",id:"tools-using-bep",level:4},{value:"Open problems",id:"open-problems",level:2},{value:"Sync Vs Async event stream",id:"sync-vs-async-event-stream",level:3},{value:"Using bazel&#39;s events or creating custom new ones?",id:"using-bazels-events-or-creating-custom-new-ones",level:3},{value:"Proposal",id:"proposal",level:2},{value:"Approaches",id:"approaches",level:3},{value:"Links",id:"links",level:2},{value:"Glossary",id:"glossary",level:2}];function c(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"observability-for-buck2-oss",children:"Observability for Buck2 OSS"})}),"\n",(0,s.jsx)(t.h2,{id:"context",children:"Context"}),"\n",(0,s.jsxs)(t.p,{children:["In large organizations building software is a fundamental part of a developer's\njourney and can significantly impact productivity. As such, being able to\nmonitor and debug builds is a fundamental ability every user and power-user must\nhave. This ability is further limited by the remote nature of CI builds where\ninstances are usually remote and most of the times inaccessible due to security\nrequirements (see\n",(0,s.jsx)(t.a,{href:"https://slsa.dev/spec/v1.0/levels#build-l2",children:"SLSA L2 and above"}),")."]}),"\n",(0,s.jsx)(t.p,{children:"Meta already seems to support an internal version of this based on thrift."}),"\n",(0,s.jsx)(t.h2,{id:"prior-art",children:"Prior Art"}),"\n",(0,s.jsx)(t.h3,{id:"bazel---bep",children:"Bazel - BEP"}),"\n",(0,s.jsx)(t.p,{children:"Bazel provides multiple tools to monitor and debug various aspects of a build,\nbut most importantly it supports a protocol called BEP (Build Event Protocol) to\nsend events to a remote server. The API is tool agnostic and only provides a\nmethod to send events of some kind. The type of the events though can be defined\non a per tool basis. Bazel comes with its own set of events that should be\nalmost completely applicable to Buck2 as well, given the similarities between\nthe two."}),"\n",(0,s.jsx)(t.p,{children:"File uploads are performed using the same ByteStream API the RBE protocol uses."}),"\n",(0,s.jsx)(t.h3,{id:"open-telemetry--prometheus",children:"Open Telemetry / Prometheus"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://github.com/mvisonneau/gitlab-ci-pipelines-exporter",children:"gitlab-ci-pipelines-exporter"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://github.com/craigatk/opentelemetry-gradle-plugin",children:"opentelemetry-gradle-plugin"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://github.com/inception-health/otel-export-trace-action",children:"otel-export-trace-action"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://github.com/zoidyzoidzoid/gitlab-honeycomb-buildevents-webhooks-sink",children:"gitlab-honeycomb-buildevents-webhooks-sink"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://github.com/craigatk/opentelemetry-gradle-plugin",children:"opentelemetry-gradle-plugin"})}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"There are a variety of other build systems and CIs that instead of implementing\ntheir own telemetry, rely on a more standardised approach using OTEL or\nPrometheus. Though this is potentially a good idea in terms of maintainability,\nit does not come with build debugging tooling out of the box, unlike BES."}),"\n",(0,s.jsx)(t.h2,{id:"buck2s-existing-buckevent",children:"Buck2's existing BuckEvent"}),"\n",(0,s.jsxs)(t.p,{children:["Buck2 already has a ",(0,s.jsx)(t.code,{children:"BuckEvent"})," it defines. This could be transformed into a\nformat supported by other APIs or a new API and combined with other options\ndescribed in this document."]}),"\n",(0,s.jsx)(t.h2,{id:"others",children:"Others"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://github.com/googleapis/googleapis/blob/master/google/devtools/resultstore/v2/resultstore_upload.proto",children:"Chromium Siso's ResultStore"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://github.com/bazelbuild/reclient/blob/ed0afeddb1b5f0d001a6c8578f000217f06534dc/internal/pkg/event/event.go#L19",children:"Reclient's Event"})}),"\n"]}),"\n",(0,s.jsx)(t.h4,{id:"tools-using-bep",children:"Tools using BEP"}),"\n",(0,s.jsxs)(t.p,{children:["The biggest advantage in adopting this protocol is the number of already\nexisting tools already able to process it. Anecdotally there are various\ninternal users, especially large corporations, using BEP to create integrations\nand tools of all kinds (eg:\n",(0,s.jsx)(t.a,{href:"https://youtu.be/qboJOW1vZLA?si=w7uC-ZxhGtHHM_m6",children:"Salesforce's talk during 'Build Meetup 2021'"}),").\nThis, combined with the already existing similarities with Bazel, could be a\ndriver for adoption. Furtheremore, there are some commercial and free-OSS\noptions available:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://www.engflow.com/",children:"EngFlow (commercial)"})}),"\n",(0,s.jsxs)(t.li,{children:["BuildBuddy:\n",(0,s.jsx)(t.a,{href:"https://github.com/buildbuddy-io/buildbuddy",children:"limited free OSS offering"})," and\n",(0,s.jsx)(t.a,{href:"https://www.buildbuddy.io/",children:"fully featured commercial"})]}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://bzl.io/",children:"Bzl and stackb's build UI (commercial)"})}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"open-problems",children:"Open problems"}),"\n",(0,s.jsx)(t.h3,{id:"sync-vs-async-event-stream",children:"Sync Vs Async event stream"}),"\n",(0,s.jsx)(t.p,{children:"Sending events to a remote end may cause a build to incur delays. The most clear\nof which is when a user wants to ensure that by the end of a command's\ninvocation all events have been successfully uploaded or the command exits\nunsuccessfully. Doing this within the command itself will always add additional\ntime to the build. At a minimum that delay will be the time it takes to send the\nlast event, but in the worst case scenario this could cause the build to wait\nfor multiple large blobs to be uploaded. This could take several minute and have\na profound impact on performances."}),"\n",(0,s.jsx)(t.p,{children:"Alternatively, the events could be send asynchronously. This works really well\nwhen the instance the command is run from can be guaranteed to stay alive for as\nlong as it takes to upload all the events. This is typically not the case with\nephemeral CI instances which are becoming more and more common. Furthermore,\nconsecutive invocations that do not wait for the previous events to be sent may\nincur higher network latency. Finally, mutating the file system during an\nasynchronous stream of events may cause inconsistent uploads and thus incorrect\nresults."}),"\n",(0,s.jsxs)(t.p,{children:["Bazel implements both options. A third option could be to use async but provide\na ",(0,s.jsx)(t.code,{children:"buck2 flush events"})," subcommand that waits until all the existing events have\nbeen sent, retried if necessary and returns success or failure depending on the\noutcome of the upload of events."]}),"\n",(0,s.jsxs)(t.p,{children:["All these options are ",(0,s.jsx)(t.strong,{children:"NOT"})," mutually exclusive and do in fact combine quite\nwell."]}),"\n",(0,s.jsx)(t.h3,{id:"using-bazels-events-or-creating-custom-new-ones",children:"Using bazel's events or creating custom new ones?"}),"\n",(0,s.jsxs)(t.p,{children:["As previously mentioned, were we to adopt BES, then there'd still be an open\nquestion: should buck2 reuse Bazel's events or should we create new ones? There\nare\n",(0,s.jsx)(t.a,{href:"https://github.com/bazelbuild/remote-apis/issues/318",children:"some generalization efforts"}),"\nhappening at the moment, however Bazel and Buck2 share lots of similarities.\nEnough that all events are almost perfectly applicable to Buck2, though less\nuseful at times, like with command line options. On the other hand, a new set of\nevents would perfectly describe a buck2 build, but would be prone to more issues\ninitially and would require a bigger investment upfront in terms of design and\ndevelopment. Alternatively, we could start with a smaller subset of Bazel events\nthat are equivalent in Buck2 and then proceed to add the additional events\nneeded to properly express the unique behaviours of a Buck2 build."]}),"\n",(0,s.jsx)(t.h2,{id:"proposal",children:"Proposal"}),"\n",(0,s.jsx)(t.p,{children:"Since this observability stack will be needed exclusively by the community, I\nreckon adopting an already existing generic protocol would be the best option.\nThis way contributions on each end would benefit the other and the support and\ndevelopment burden can be implicitly shared by the contributors of the protocol.\nIn this case, as it's probably already obvious in the document, said protocol I\nam referring to is BES."}),"\n",(0,s.jsx)(t.p,{children:"The protocol is by nature very generic and the first iteration could be\ncompletely based on a subset of events Bazel uses that apply to Buck2:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Phase 1: create an invocation and send logs to a remote server"}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://github.com/bazelbuild/bazel/blob/38ad73402b213b2a623d0953500b1cfc47c0e851/src/main/java/com/google/devtools/build/lib/buildeventstream/proto/build_event_stream.proto#L291C9-L291C17",children:"Progress"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://github.com/bazelbuild/bazel/blob/38ad73402b213b2a623d0953500b1cfc47c0e851/src/main/java/com/google/devtools/build/lib/buildeventstream/proto/build_event_stream.proto#L309",children:"Aborted"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://github.com/bazelbuild/bazel/blob/38ad73402b213b2a623d0953500b1cfc47c0e851/src/main/java/com/google/devtools/build/lib/buildeventstream/proto/build_event_stream.proto#L361",children:"BuildStarted"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://github.com/bazelbuild/bazel/blob/38ad73402b213b2a623d0953500b1cfc47c0e851/src/main/java/com/google/devtools/build/lib/buildeventstream/proto/build_event_stream.proto#L852C9-L852C22",children:"BuildFinished"})}),"\n",(0,s.jsx)(t.li,{children:"Phase 2: Add information about the command line and what targets it expands to"}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://github.com/bazelbuild/bazel/blob/38ad73402b213b2a623d0953500b1cfc47c0e851/src/main/java/com/google/devtools/build/lib/buildeventstream/proto/build_event_stream.proto#L406",children:"UnstructuredCommandLine"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://github.com/bazelbuild/bazel/blob/38ad73402b213b2a623d0953500b1cfc47c0e851/src/main/java/com/google/devtools/build/lib/buildeventstream/proto/build_event_stream.proto#L462",children:"PatternExpanded"})}),"\n",(0,s.jsx)(t.li,{children:"Phase 3: Add target level status and information"}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://github.com/bazelbuild/bazel/blob/38ad73402b213b2a623d0953500b1cfc47c0e851/src/main/java/com/google/devtools/build/lib/buildeventstream/proto/build_event_stream.proto#L539C9-L539C24",children:"NamedSetOfFiles"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://github.com/bazelbuild/bazel/blob/38ad73402b213b2a623d0953500b1cfc47c0e851/src/main/java/com/google/devtools/build/lib/buildeventstream/proto/build_event_stream.proto#L623C9-L623C23",children:"TargetComplete"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://github.com/bazelbuild/bazel/blob/38ad73402b213b2a623d0953500b1cfc47c0e851/src/main/java/com/google/devtools/build/lib/buildeventstream/proto/build_event_stream.proto#L494C9-L494C25",children:"TargetConfigured"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://github.com/bazelbuild/bazel/blob/38ad73402b213b2a623d0953500b1cfc47c0e851/src/main/java/com/google/devtools/build/lib/buildeventstream/proto/build_event_stream.proto#L843C9-L843C22",children:"TargetSummary"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://github.com/bazelbuild/bazel/blob/38ad73402b213b2a623d0953500b1cfc47c0e851/src/main/java/com/google/devtools/build/lib/buildeventstream/proto/build_event_stream.proto#L682",children:"TestResult"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://github.com/bazelbuild/bazel/blob/38ad73402b213b2a623d0953500b1cfc47c0e851/src/main/java/com/google/devtools/build/lib/buildeventstream/proto/build_event_stream.proto#L781C9-L781C20",children:"TestSummary"})}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["Additionally, as part of ",(0,s.jsx)(t.code,{children:"Phase 1"})," we would need to implement the client itself,\na basic streaming strategy (which to begin with could be the simple sync\napproach discussed in ",(0,s.jsx)(t.code,{children:"Sync VS Async"}),") and provide an invocation-id to correlate\nevents that may be sent to different servers into a single invocation (this is\nvery similar to Buck2's trace id and could in fact be the same, but we should\nmake it possible for the user to provide it when invoking the CLI and/or print\nit visibly in the logs)."]}),"\n",(0,s.jsxs)(t.p,{children:["Once this is done, I suggest we look into async uploads and add a\n",(0,s.jsx)(t.code,{children:"buck2 flush events"})," command to wait for all events (or those of a specific\ninvocation) to be flushed out."]}),"\n",(0,s.jsx)(t.h3,{id:"approaches",children:"Approaches"}),"\n",(0,s.jsx)(t.p,{children:"There are multiple ways in which this proposal can be implemented:"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsx)(t.li,{children:"Buck2 directly sends Bazel's BEP events and implements the BES protocol"}),"\n",(0,s.jsx)(t.li,{children:"Buck2 implements the BES protocol but sends BuckEvent events but a shim can\nbe built inside Buck2 to turn these events into Bazel's BEP events"}),"\n",(0,s.jsx)(t.li,{children:"Same as above but the shim lives outside of Buck2, so as far as Buck2 is\nconcerned it sends Buck2 BuckEvent via BES"}),"\n",(0,s.jsx)(t.li,{children:"Same as 2 but we implement a new API that is BES-like, but not BES"}),"\n",(0,s.jsx)(t.li,{children:"Same as 3 but we implement a new API that is BES-like, but not BES"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"My current preference is for approach 1 as it is the simplest, but alternatively\nmy second favourite option is 3."}),"\n",(0,s.jsx)(t.h2,{id:"links",children:"Links"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://bazel.build/remote/bep",children:"BEP explanation"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://bazel.build/remote/bep-glossary",children:"Bazel's BEP events and glossary"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://github.com/googleapis/googleapis/blob/master/google/devtools/build/v1/publish_build_event.proto",children:"BES proto definition"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://github.com/bazelbuild/bazel/blob/master/src/main/java/com/google/devtools/build/lib/buildeventstream/proto/build_event_stream.proto",children:"Bazel's events proto definition"})}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"glossary",children:"Glossary"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"BES (Build Event Service): refers to the generic service used to send/receive\nbuild events by Bazel"}),"\n",(0,s.jsx)(t.li,{children:"BEP (Build Event Protocol): refers to the combination of BES and Bazel\nspecific events"}),"\n",(0,s.jsx)(t.li,{children:"Invocation: a single execution of a Buck2/Bazel command. An invocation usually\ncontains a single build or execution of a command, but may contain many in\ncase of multiple retries. Initially, build and invocations overlap"}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>a});var i=n(96540);const s={},o=i.createContext(s);function l(e){const t=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(o.Provider,{value:t},e.children)}}}]);