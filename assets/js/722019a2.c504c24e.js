"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[44573],{28453:(e,s,i)=>{i.d(s,{R:()=>d,x:()=>c});var n=i(96540);const t={},r=n.createContext(t);function d(e){const s=n.useContext(r);return n.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),n.createElement(r.Provider,{value:s},e.children)}},80999:(e,s,i)=>{i.r(s),i.d(s,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>d,metadata:()=>n,toc:()=>o});const n=JSON.parse('{"id":"prelude/rules/cxx/windows_resource","title":"windows_resource","description":"A windows_resource() rule specifies a set of Window\'s Resource File (.rc) that are compiled into object files.","source":"@site/../docs/prelude/rules/cxx/windows_resource.md","sourceDirName":"prelude/rules/cxx","slug":"/prelude/rules/cxx/windows_resource","permalink":"/docs/prelude/rules/cxx/windows_resource","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"ruleSidebar","previous":{"title":"transformation_spec","permalink":"/docs/prelude/rules/cxx/transformation_spec"},"next":{"title":"d","permalink":"/docs/prelude/rules/d/"}}');var t=i(74848),r=i(28453);i(56289);const d={},c="windows_resource",a={},o=[{value:"Details",id:"details",level:3},{value:"Function Signature",id:"function-signature",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Examples",id:"examples",level:3}];function l(e){const s={a:"a",code:"code",h1:"h1",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"windows_resource",children:"windows_resource"})}),"\n",(0,t.jsxs)(s.p,{children:["A ",(0,t.jsx)(s.code,{children:"windows_resource()"})," rule specifies a set of Window's Resource File (.rc) that are compiled into object files."]}),"\n",(0,t.jsx)(s.h3,{id:"details",children:"Details"}),"\n",(0,t.jsx)(s.p,{children:"The files are compiled into .res files using rc.exe and then compiled into object files\nusing cvtres.exe.\nThey are not part of cxx_library because Microsoft's linker ignores the resources\nunless they are specified as an object file, meaning including them in a possibly static\nlibrary is unintuitive."}),"\n",(0,t.jsx)(s.h3,{id:"function-signature",children:"Function Signature"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:'def windows_resource(\n    *,\n    name: str,\n    default_target_platform: None | str = None,\n    target_compatible_with: list[str] = [],\n    compatible_with: list[str] = [],\n    exec_compatible_with: list[str] = [],\n    visibility: list[str] = [],\n    within_view: list[str] = ["PUBLIC"],\n    metadata: OpaqueMetadata = {},\n    tests: list[str] = [],\n    modifiers: OpaqueMetadata = [],\n    _apple_platforms: dict[str, str] = {},\n    _cxx_toolchain: str = "gh_facebook_buck2_shims_meta//:cxx",\n    deps: list[str] = [],\n    header_namespace: None | str = None,\n    headers: list[str] | dict[str, str] = [],\n    include_directories: list[str] = [],\n    labels: list[str] = [],\n    platform_headers: list[(str, list[str] | dict[str, str])] = [],\n    raw_headers: list[str] = [],\n    srcs: list[str | (str, list[str])] = [],\n) -> None\n'})}),"\n",(0,t.jsx)(s.h3,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"name"}),": (required)"]}),"\n",(0,t.jsx)(s.p,{children:"name of the target"}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"default_target_platform"}),": (defaults to: ",(0,t.jsx)(s.code,{children:"None"}),")"]}),"\n",(0,t.jsx)(s.p,{children:"specifies the default target platform, used when no platforms are specified on the command line"}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"target_compatible_with"}),": (defaults to: ",(0,t.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,t.jsx)(s.p,{children:"a list of constraints that are required to be satisfied for this target to be compatible with a configuration"}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"compatible_with"}),": (defaults to: ",(0,t.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,t.jsx)(s.p,{children:"a list of constraints that are required to be satisfied for this target to be compatible with a configuration"}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"exec_compatible_with"}),": (defaults to: ",(0,t.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,t.jsx)(s.p,{children:"a list of constraints that are required to be satisfied for this target to be compatible with an execution platform"}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"visibility"}),": (defaults to: ",(0,t.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,t.jsx)(s.p,{children:"a list of visibility patterns restricting what targets can depend on this one"}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"within_view"}),": (defaults to: ",(0,t.jsx)(s.code,{children:'["PUBLIC"]'}),")"]}),"\n",(0,t.jsx)(s.p,{children:"a list of visibility patterns restricting what this target can depend on"}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"metadata"}),": (defaults to: ",(0,t.jsx)(s.code,{children:"{}"}),")"]}),"\n",(0,t.jsx)(s.p,{children:"a key-value map of metadata associated with this target"}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"tests"}),": (defaults to: ",(0,t.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,t.jsx)(s.p,{children:"a list of targets that provide tests for this one"}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"modifiers"}),": (defaults to: ",(0,t.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,t.jsx)(s.p,{children:"an array of modifiers associated with this target"}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"header_namespace"}),": (defaults to: ",(0,t.jsx)(s.code,{children:"None"}),")"]}),"\n",(0,t.jsxs)(s.p,{children:["A path prefix when including headers of this target. Defaults to the path from the root of the repository to the directory where this target is defined. Can contain forward slashes (",(0,t.jsx)(s.code,{children:"/"}),"), but cannot start with one. See ",(0,t.jsx)(s.code,{children:"headers"})," for more information."]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"headers"}),": (defaults to: ",(0,t.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,t.jsxs)(s.p,{children:["The set of header files that are made available for inclusion to the source files in this target. These should be specified as either a list of header files or a dictionary of header names to header files. The header name can contain forward slashes (",(0,t.jsx)(s.code,{children:"/"}),"). The headers can be included with ",(0,t.jsx)(s.code,{children:'#include "$HEADER_NAMESPACE/$HEADER_NAME"'})," or ",(0,t.jsx)(s.code,{children:"#include <$HEADER_NAMESPACE/$HEADER_NAME>"})," , where ",(0,t.jsx)(s.code,{children:"$HEADER_NAMESPACE"})," is the value of the target's ",(0,t.jsx)(s.code,{children:"header_namespace"}),"  attribute, and ",(0,t.jsx)(s.code,{children:"$HEADER_NAME"})," is the header name if specified, and the filename of the header file otherwise. See ",(0,t.jsx)(s.code,{children:"header_namespace"})," for more information."]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"include_directories"}),": (defaults to: ",(0,t.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,t.jsxs)(s.p,{children:["A list of include directories (with ",(0,t.jsx)(s.code,{children:"raw_headers"}),") to be added to the compile command for compiling this target (via ",(0,t.jsx)(s.code,{children:"-I"}),"). An include directory is relative to the current package."]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"labels"}),": (defaults to: ",(0,t.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,t.jsxs)(s.p,{children:["Set of arbitrary strings which allow you to annotate a ",(0,t.jsx)(s.a,{href:"https://buck2.build/docs/concepts/build_rule/",children:"build rule"})," with tags that can be searched for over an entire dependency tree using ",(0,t.jsx)(s.code,{children:"buck query()"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"platform_headers"}),": (defaults to: ",(0,t.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,t.jsxs)(s.p,{children:["Platform specific header files. These should be specified as a list of pairs where the first element is an un-anchored regex (in java.util.regex.Pattern syntax) against which the platform name is matched, and the second element is either a list of header files or a dictionary of header names to header files that will be made available for inclusion to the source files in the target if the platform matches the regex. See ",(0,t.jsx)(s.code,{children:"headers"})," for more information."]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"raw_headers"}),": (defaults to: ",(0,t.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,t.jsxs)(s.p,{children:["The set of header files that can be used for inclusion to the source files in the target and all targets that transitively depend on it. Buck doesn't add raw headers to the search path of a compiler/preprocessor automatically. ",(0,t.jsx)(s.code,{children:"include_directories"})," and ",(0,t.jsx)(s.code,{children:"public_include_directories"})," are the recommended way to add raw headers to the search path (they will be added via ",(0,t.jsx)(s.code,{children:"-I"}),"). ",(0,t.jsx)(s.code,{children:"compiler_flags"}),", ",(0,t.jsx)(s.code,{children:"preprocessor_flags"})," and ",(0,t.jsx)(s.code,{children:"exported_preprocessor_flags"})," can also be used to add such raw headers to the search path if inclusion via ",(0,t.jsx)(s.code,{children:"-isystem"})," or ",(0,t.jsx)(s.code,{children:"-iquote"})," is needed. ",(0,t.jsx)(s.code,{children:"raw_headers"})," cannot be used together with ",(0,t.jsx)(s.code,{children:"headers"})," or ",(0,t.jsx)(s.code,{children:"exported_headers"})," in the same target."]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"srcs"}),": (defaults to: ",(0,t.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,t.jsxs)(s.p,{children:["The set of C, C++, Objective-C, Objective-C++, or assembly source files to be preprocessed, compiled, and assembled by this rule. We determine which stages to run on each input source based on its file extension. See the ",(0,t.jsx)(s.a,{href:"https://gcc.gnu.org/onlinedocs/gcc/Overall-Options.html",children:"GCC documentation"})," for more detail on how file extensions are interpreted. Each element can be either a string specifying a source file (e.g. ",(0,t.jsx)(s.code,{children:"''"}),") or a tuple of a string specifying a source file and a list of compilation flags (e.g. ",(0,t.jsx)(s.code,{children:"('', ['-Wall', '-Werror'])"})," ). In the latter case the specified flags will be used in addition to the rule's other flags when preprocessing and compiling that file (if applicable)."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"examples",children:"Examples"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:'\n# A rule that includes a single .rc file and compiles it into an object file.\nwindows_resource(\n  name = "resources",\n  srcs = [\n    "resources.rc",\n  ],\n)\n\n# A rule that links against the above windows_resource rule.\ncxx_binary(\n  name = "app",\n  srcs = [\n    "main.cpp",\n  ],\n  deps = [\n    ":resources"\n  ],\n)\n\n'})})]})}function h(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}}}]);