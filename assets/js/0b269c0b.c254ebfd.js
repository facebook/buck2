"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[74455],{28453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>d});var i=s(96540);const r={},o=i.createContext(r);function t(e){const n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),i.createElement(o.Provider,{value:n},e.children)}},48244:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>t,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"prelude/rules/android/android_library","title":"android_library","description":"An androidlibrary() rule is used to define a set of Java files that can be compiled together against the Android SDK. The main output of an androidlibrary() rule is a single JAR file containing all of the compiled class files and resources.","source":"@site/../docs/prelude/rules/android/android_library.md","sourceDirName":"prelude/rules/android","slug":"/prelude/rules/android/android_library","permalink":"/docs/prelude/rules/android/android_library","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"ruleSidebar","previous":{"title":"android_instrumentation_test","permalink":"/docs/prelude/rules/android/android_instrumentation_test"},"next":{"title":"android_manifest","permalink":"/docs/prelude/rules/android/android_manifest"}}');var r=s(74848),o=s(28453);s(56289);const t={},d="android_library",l={},a=[{value:"Function Signature",id:"function-signature",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Examples",id:"examples",level:3}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"android_library",children:"android_library"})}),"\n",(0,r.jsxs)(n.p,{children:["An ",(0,r.jsx)(n.code,{children:"android_library()"})," rule is used to define a set of Java files that can be compiled together against the Android SDK. The main output of an ",(0,r.jsx)(n.code,{children:"android_library()"})," rule is a single JAR file containing all of the compiled class files and resources."]}),"\n",(0,r.jsx)(n.h3,{id:"function-signature",children:"Function Signature"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def android_library(\n    *,\n    name: str,\n    default_target_platform: None | str = None,\n    target_compatible_with: list[str] = [],\n    compatible_with: list[str] = [],\n    exec_compatible_with: list[str] = [],\n    visibility: list[str] = [],\n    within_view: list[str] = ["PUBLIC"],\n    metadata: OpaqueMetadata = {},\n    tests: list[str] = [],\n    modifiers: OpaqueMetadata = [],\n    _android_toolchain: str = "gh_facebook_buck2_shims_meta//:android",\n    _apple_platforms: dict[str, str] = {},\n    _build_only_native_code: bool = select({"prelude//android/constraints:build_only_native_code": True, "DEFAULT": False}),\n    _dex_min_sdk_version: None | int = select({"prelude//android/constraints:min_sdk_version_19": 19, "prelude//android/constraints:min_sdk_version_20": 20, "prelude//android/constraints:min_sdk_version_21": 21, "prelude//android/constraints:min_sdk_version_22": 22, "prelude//android/constraints:min_sdk_version_23": 23, "prelude//android/constraints:min_sdk_version_24": 24, "prelude//android/constraints:min_sdk_version_25": 25, "prelude//android/constraints:min_sdk_version_26": 26, "prelude//android/constraints:min_sdk_version_27": 27, "prelude//android/constraints:min_sdk_version_28": 28, "prelude//android/constraints:min_sdk_version_29": 29, "prelude//android/constraints:min_sdk_version_30": 30, "prelude//android/constraints:min_sdk_version_31": 31, "prelude//android/constraints:min_sdk_version_32": 32, "prelude//android/constraints:min_sdk_version_33": 33, "prelude//android/constraints:min_sdk_version_34": 34, "prelude//android/constraints:min_sdk_version_35": 35, "DEFAULT": None}),\n    _dex_toolchain: str = "gh_facebook_buck2_shims_meta//:dex",\n    _exec_os_type: str = "prelude//os_lookup/targets:os_lookup",\n    _is_building_android_binary: bool = select({"prelude//os:building_android_binary": True, "DEFAULT": False}),\n    _java_toolchain: str = "gh_facebook_buck2_shims_meta//:java_for_android",\n    _kotlin_toolchain: str = "gh_facebook_buck2_shims_meta//:kotlin_for_android",\n    abi_generation_mode: None | str = None,\n    android_optional_jars: None | list[str] = None,\n    annotation_processing_tool: None | str = None,\n    annotation_processor_deps: list[str] = [],\n    annotation_processor_params: list[str] = [],\n    annotation_processors: list[str] = [],\n    attrs_validators: None | list[str] = None,\n    contacts: list[str] = [],\n    default_host_platform: None | str = None,\n    deps: list[str] = [],\n    enable_used_classes: bool = True,\n    exported_deps: list[str] = [],\n    exported_provided_deps: list[str] = [],\n    extra_arguments: list[str] = [],\n    extra_kotlinc_arguments: list[str] = [],\n    friend_paths: list[str] = [],\n    incremental: bool = True,\n    jar_postprocessor: None | str = None,\n    java_version: None | str = None,\n    javac: None | str = None,\n    k2: bool = False,\n    kotlin_compiler_plugins: list[(str, dict[str, str])] = [],\n    labels: list[str] = [],\n    language: None | str = None,\n    licenses: list[str] = [],\n    manifest: None | str = None,\n    manifest_file: None | str = None,\n    maven_coords: None | str = None,\n    never_mark_as_unused_dependency: None | bool = None,\n    non_exec_dep_plugins_deprecated: list[str | (str, list[str])] = [],\n    on_unused_dependencies: None | str = None,\n    plugins: list[str | (str, list[str])] = [],\n    proguard_config: None | str = None,\n    provided_deps: list[str] = [],\n    provided_deps_query: None | str = None,\n    remove_classes: list[str] = [],\n    required_for_source_only_abi: bool = False,\n    resource_union_package: None | str = None,\n    resources: list[str] = [],\n    resources_root: None | str = None,\n    runtime_deps: list[str] = [],\n    should_kosabi_jvm_abi_gen_use_k2: None | bool = None,\n    source: None | str = None,\n    source_abi_verification_mode: None | str = None,\n    source_only_abi_deps: list[str] = [],\n    srcs: list[str] = [],\n    target: None | str = None,\n    use_jvm_abi_gen: None | bool = None,\n    uses_content_based_path_for_jar_snapshot: bool = select({"DEFAULT": False}),\n    uses_content_based_paths_for_classic_java: bool = select({"DEFAULT": False}),\n    uses_content_based_paths_for_kotlincd: bool = select({"DEFAULT": False}),\n    validation_deps: list[str] = [],\n    validation_specs: dict[str, str] = {},\n) -> None\n'})}),"\n",(0,r.jsx)(n.h3,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"name"}),": (required)"]}),"\n",(0,r.jsx)(n.p,{children:"name of the target"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"default_target_platform"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"None"}),")"]}),"\n",(0,r.jsx)(n.p,{children:"specifies the default target platform, used when no platforms are specified on the command line"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"target_compatible_with"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,r.jsx)(n.p,{children:"a list of constraints that are required to be satisfied for this target to be compatible with a configuration"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"compatible_with"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,r.jsx)(n.p,{children:"a list of constraints that are required to be satisfied for this target to be compatible with a configuration"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"exec_compatible_with"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,r.jsx)(n.p,{children:"a list of constraints that are required to be satisfied for this target to be compatible with an execution platform"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"visibility"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,r.jsx)(n.p,{children:"a list of visibility patterns restricting what targets can depend on this one"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"within_view"}),": (defaults to: ",(0,r.jsx)(n.code,{children:'["PUBLIC"]'}),")"]}),"\n",(0,r.jsx)(n.p,{children:"a list of visibility patterns restricting what this target can depend on"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"metadata"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"{}"}),")"]}),"\n",(0,r.jsx)(n.p,{children:"a key-value map of metadata associated with this target"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"tests"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,r.jsx)(n.p,{children:"a list of targets that provide tests for this one"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"modifiers"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,r.jsx)(n.p,{children:"an array of modifiers associated with this target"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"annotation_processing_tool"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"None"}),")"]}),"\n",(0,r.jsx)(n.p,{children:'Specifies the tool to use for annotation processing. Possible values: "kapt" or "javac". "kapt" allows running Java annotation processors against Kotlin sources while backporting it for Java sources too. "javac" works only against Java sources, Kotlin sources won\'t have access to generated classes at compile time.'}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"contacts"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,r.jsx)(n.p,{children:"A list of organizational contacts for this rule. These could be individuals who you would contact in the event of a failure or other issue with the rule."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"contacts = [ 'Joe Sixpack', 'Erika Mustermann' ]\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"deps"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,r.jsxs)(n.p,{children:["Rules (usually other ",(0,r.jsx)(n.code,{children:"android_library"})," rules) that are used to generate the classpath required to compile this ",(0,r.jsx)(n.code,{children:"android_library"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"enable_used_classes"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"True"}),")"]}),"\n",(0,r.jsx)(n.p,{children:"Deprecated: for an experiment only, will be removed"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"exported_deps"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,r.jsxs)(n.p,{children:["Other  rules that depend on this rule will also include its ",(0,r.jsx)(n.code,{children:"exported_deps"})," in their classpaths. This is useful when the public API of a rule has return types or checked exceptions that are defined in another rule, which would otherwise require callers to add an extra dependency. It's also useful for exposing e.g. a collection of ",(0,r.jsx)(n.code,{children:"prebuilt_jar"})," rules as a single target for callers to depend on. Targets in ",(0,r.jsx)(n.code,{children:"exported_deps"})," are implicitly included in the ",(0,r.jsx)(n.code,{children:"deps"})," of this rule, so they don't need to be repeated there."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"exported_provided_deps"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,r.jsxs)(n.p,{children:["This is a combination of ",(0,r.jsx)(n.code,{children:"provided_deps"})," and ",(0,r.jsx)(n.code,{children:"exported_deps"}),". Rules listed in this parameter will be added to classpath of rules that depend on this rule, but they will not be included in a binary if binary depends on a such target."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"extra_arguments"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,r.jsxs)(n.p,{children:["List of additional arguments to pass into the Java compiler. These arguments follow the ones specified in ",(0,r.jsx)(n.code,{children:".buckconfig"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"extra_kotlinc_arguments"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,r.jsx)(n.p,{children:"List of additional arguments to pass into the Kotlin compiler."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"incremental"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"True"}),")"]}),"\n",(0,r.jsx)(n.p,{children:"Enables Kotlin incremental compilation."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"javac"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"None"}),")"]}),"\n",(0,r.jsxs)(n.p,{children:["Specifies the Java compiler program to use for this rule. The value is a source path or an execution dep (e.g., //foo/bar",":bar",'). Overrides the value in "javac" in the "tools" section of ',(0,r.jsx)(n.code,{children:".buckconfig"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"k2"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"False"}),")"]}),"\n",(0,r.jsx)(n.p,{children:"Enables the Kotlin K2 compiler."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"kotlin_compiler_plugins"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,r.jsxs)(n.p,{children:["Use this to specify ",(0,r.jsx)(n.a,{href:"https://kotlinlang.org/docs/reference/compiler-plugins.html",children:"Kotlin compiler plugins"})," to use when compiling this library. This takes a map, with each entry specify one plugin. Entry's key is plugin source path, and value is a map of plugin option key value pair. Unlike ",(0,r.jsx)(n.code,{children:"extra_kotlinc_arguments"}),", these can be ",(0,r.jsx)(n.em,{children:"source paths"}),", not just strings."]}),"\n",(0,r.jsxs)(n.p,{children:["A special option value is\n",(0,r.jsx)(n.code,{children:"__codegen_dir__"}),", in which case Buck will provide a default codegen folder's path as\noption value instead.\nE.g."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'fbcode/buck2/prelude/decls/jvm_common.bzl\nkotlin_compiler_plugins = {\n    "somePluginSourcePath": {\n        "plugin:somePluginId:somePluginOptionKey": "somePluginOptionValue",\n        "plugin:somePluginId:someDirectoryRelatedOptionKey": "__codegen_dir__",\n    },\n},\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Each plugin source path will be prefixed with ",(0,r.jsx)(n.code,{children:"-Xplugin="})," and passed as extra\narguments to the compiler. Plugin options will be appended after its plugin with ",(0,r.jsx)(n.code,{children:"-P"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["A specific example is, if you want to use ",(0,r.jsx)(n.a,{href:"https://github.com/Kotlin/kotlinx.serialization",children:"kotlinx.serialization"}),"\nwith ",(0,r.jsx)(n.code,{children:"kotlin_library()"}),", you need to specify ",(0,r.jsx)(n.code,{children:"kotlinx-serialization-compiler-plugin.jar"})," under ",(0,r.jsx)(n.code,{children:"kotlin_compiler_plugins"})," and ",(0,r.jsx)(n.code,{children:"kotlinx-serialization-runtime.jar"})," (which you may have to fetch from Maven) in your ",(0,r.jsx)(n.code,{children:"deps"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'kotlin_library(\n    name = "example",\n    srcs = glob(["*.kt"]),\n    deps = [\n        ":kotlinx-serialization-runtime",\n    ],\n    kotlin_compiler_plugins = {\n        # Likely copied from your $KOTLIN_HOME directory.\n        "kotlinx-serialization-compiler-plugin.jar": {},\n    },\n)\n\nprebuilt_jar(\n    name = "kotlinx-serialization-runtime",\n    binary_jar = ":kotlinx-serialization-runtime-0.10.0",\n)\n\n# Note you probably want to set\n# maven_repo=http://jcenter.bintray.com/ in your .buckconfig until\n# https://github.com/Kotlin/kotlinx.serialization/issues/64\n# is closed.\nremote_file(\n    name = "kotlinx-serialization-runtime-0.10.0",\n    out = "kotlinx-serialization-runtime-0.10.0.jar",\n    url = "mvn:org.jetbrains.kotlinx:kotlinx-serialization-runtime:jar:0.10.0",\n    sha1 = "23d777a5282c1957c7ce35946374fff0adab114c"\n)\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"labels"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,r.jsxs)(n.p,{children:["Set of arbitrary strings which allow you to annotate a ",(0,r.jsx)(n.a,{href:"https://buck2.build/docs/concepts/build_rule/",children:"build rule"})," with tags that can be searched for over an entire dependency tree using ",(0,r.jsx)(n.code,{children:"buck query()"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"licenses"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,r.jsxs)(n.p,{children:["Set of license files for this library. To get the list of license files for a given build rule and all of its dependencies, you can use ",(0,r.jsx)(n.a,{href:"https://buck2.build/docs/users/commands/query/",children:"buck query"})]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"manifest"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"None"}),")"]}),"\n",(0,r.jsxs)(n.p,{children:["An optional ",(0,r.jsx)(n.a,{href:"http://developer.android.com/guide/topics/manifest/manifest-intro.html",children:"Android Manifest"})," for the to declare any permissions or intents it may need or want to handle. May either be a file or an ",(0,r.jsx)(n.code,{children:"android_manifest()"})," target."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"non_exec_dep_plugins_deprecated"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,r.jsxs)(n.p,{children:["Plugins that do not use the execution platform. This exists for historical reasons, and should not be used. Use ",(0,r.jsx)(n.code,{children:"plugins"})," instead - plugins should be configured for the execution platform since that is where they are used."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"plugins"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,r.jsx)(n.p,{children:"List of plugins that should be run during compilation of the target. A list of strings may additionally be provided in order to pass additional arguments to the plugin."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"provided_deps"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,r.jsxs)(n.p,{children:["These represent dependencies that are known to be provided at run time, but are required in order for the code to compile. Examples of ",(0,r.jsx)(n.code,{children:"provided_deps"})," include the JEE servlet APIs. When this rule is included in a , the ",(0,r.jsx)(n.code,{children:"provided_deps"})," will not be packaged into the output."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"provided_deps_query"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"None"}),")"]}),"\n",(0,r.jsxs)(n.p,{children:["Status: ",(0,r.jsx)(n.strong,{children:"experimental/unstable"}),". The provided deps query functions in the same way as the deps query, but the results of the query are appended to the declared provided deps."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"remove_classes"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,r.jsx)(n.p,{children:"List of classes to remove from the output jar. It only removes classes from the target's own sources, not from any of its dependencies."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"required_for_source_only_abi"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"False"}),")"]}),"\n",(0,r.jsxs)(n.p,{children:["Indicates that this rule must be present on the classpath during ",(0,r.jsx)(n.code,{children:"source-only ABI generation"})," of any rule that depends on it. Typically this is done when a rule contains annotations, enums, constants, or interfaces."]}),"\n",(0,r.jsx)(n.p,{children:"Having rules present on the classpath during source-only ABI generation prevents Buck from\ncompletely flattening the build graph, thus reducing the performance win from source-only\nABI generation. These rules should be kept small (ideally just containing annotations,\nconstants, enums, and interfaces) and with minimal dependencies of their own."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"resources"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,r.jsxs)(n.p,{children:["Static files to include among the compiled ",(0,r.jsx)(n.code,{children:".class"})," files. These files can be loaded via ",(0,r.jsx)(n.a,{href:"http://docs.oracle.com/javase/7/docs/api/java/lang/Class.html#getResource(java.lang.String)",children:"Class.getResource()"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note:"})," Buck uses the ",(0,r.jsx)(n.code,{children:"src_roots"})," property in\n",(0,r.jsx)(n.code,{children:".buckconfig"}),"\nto help determine where resources should be placed within the generated JAR file."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"source"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"None"}),")"]}),"\n",(0,r.jsxs)(n.p,{children:['Specifies the version of Java (as a string) to interpret source files as. Overrides the value in "source_level" in the "java" section of ',(0,r.jsx)(n.code,{children:".buckconfig"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"source_only_abi_deps"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,r.jsxs)(n.p,{children:["These are dependencies that must be present during ",(0,r.jsx)(n.code,{children:"source-only ABI generation"}),". Typically such dependencies are added when some property of the code in this rule prevents source-only ABI generation from being correct without these dependencies being present."]}),"\n",(0,r.jsxs)(n.p,{children:["Having ",(0,r.jsx)(n.code,{children:"source_only_abi_deps"})," prevents Buck from\ncompletely flattening the build graph, thus reducing the performance win from source-only\nABI generation. They should be avoided when possible. Often only a small code change is needed to avoid them.\nFor more information on such code changes, read about\n",(0,r.jsx)(n.code,{children:"source-only ABI generation"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"srcs"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,r.jsxs)(n.p,{children:["The set of ",(0,r.jsx)(n.code,{children:".java"})," files to compile for this rule."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"target"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"None"}),")"]}),"\n",(0,r.jsxs)(n.p,{children:['Specifies the version of Java (as a string) for which to generate code. Overrides the value in "target_level" in the "java" section of ',(0,r.jsx)(n.code,{children:".buckconfig"}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"examples",children:"Examples"}),"\n",(0,r.jsxs)(n.p,{children:["An ",(0,r.jsx)(n.code,{children:"android_library"})," rule used in concert with an\n",(0,r.jsx)(n.code,{children:"android_resource()"})," rule.\nThis would be a common arrangement for a standard Android Library project\nas defined by\n",(0,r.jsx)(n.a,{href:"http://developer.android.com/tools/projects/index.html",children:"http://developer.android.com/tools/projects/index.html"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"\nandroid_resource(\n  name = 'res',\n  res = 'res',\n  package = 'com.example',\n)\n\nandroid_library(\n  name = 'my_library',\n  srcs = glob(['src/**/*.java']),\n  deps = [\n    ':res',\n  ],\n)\n\n"})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);