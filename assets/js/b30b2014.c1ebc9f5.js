"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[36433],{28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>t});var l=s(96540);const i={},r=l.createContext(i);function a(e){const n=l.useContext(r);return l.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),l.createElement(r.Provider,{value:n},e.children)}},83655:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>u,frontMatter:()=>t,metadata:()=>l,toc:()=>c});const l=JSON.parse('{"id":"api/build/index","title":"Build APIs","description":"ExecutionPlatformInfo","source":"@site/../docs/api/build/index.md","sourceDirName":"api/build","slug":"/api/build/","permalink":"/docs/api/build/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"apiSidebar","previous":{"title":"typing","permalink":"/docs/api/starlark/typing"},"next":{"title":"ActionErrorCtx","permalink":"/docs/api/build/ActionErrorCtx"}}');var i=s(74848),r=s(28453),a=s(56289);const t={},d="Build APIs",o={},c=[{value:"ExecutionPlatformInfo",id:"executionplatforminfo",level:2},{value:"ExecutionPlatformRegistrationInfo",id:"executionplatformregistrationinfo",level:2},{value:"InstallInfo",id:"installinfo",level:2},{value:"Provider",id:"provider",level:2},{value:"anon_rule",id:"anon_rule",level:2},{value:"dedupe",id:"dedupe",level:2},{value:"dynamic_actions",id:"dynamic_actions",level:2},{value:"get_base_path",id:"get_base_path",level:2},{value:"get_cell_name",id:"get_cell_name",level:2},{value:"get_parent_modifiers",id:"get_parent_modifiers",level:2},{value:"glob",id:"glob",level:2},{value:"host_info",id:"host_info",level:2},{value:"implicit_package_symbol",id:"implicit_package_symbol",level:2},{value:"load_symbols",id:"load_symbols",level:2},{value:"oncall",id:"oncall",level:2},{value:"package",id:"package",level:2},{value:"package_name",id:"package_name",level:2},{value:"provider",id:"provider-1",level:2},{value:"provider_field",id:"provider_field",level:2},{value:"read_config",id:"read_config",level:2},{value:"read_oncall",id:"read_oncall",level:2},{value:"read_package_value",id:"read_package_value",level:2},{value:"read_parent_package_value",id:"read_parent_package_value",level:2},{value:"read_root_config",id:"read_root_config",level:2},{value:"regex_match",id:"regex_match",level:2},{value:"repository_name",id:"repository_name",level:2},{value:"rule",id:"rule",level:2},{value:"rule_exists",id:"rule_exists",level:2},{value:"select",id:"select",level:2},{value:"select_map",id:"select_map",level:2},{value:"select_test",id:"select_test",level:2},{value:"set_cfg_constructor",id:"set_cfg_constructor",level:2},{value:"set_modifiers",id:"set_modifiers",level:2},{value:"set_starlark_peak_allocated_byte_limit",id:"set_starlark_peak_allocated_byte_limit",level:2},{value:"sha1",id:"sha1",level:2},{value:"sha256",id:"sha256",level:2},{value:"soft_error",id:"soft_error",level:2},{value:"test_config_unification_rollout",id:"test_config_unification_rollout",level:2},{value:"transition",id:"transition",level:2},{value:"transitive_set",id:"transitive_set",level:2},{value:"warning",id:"warning",level:2},{value:"write_package_value",id:"write_package_value",level:2}];function h(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"build-apis",children:"Build APIs"})}),"\n",(0,i.jsx)(n.h2,{id:"executionplatforminfo",children:"ExecutionPlatformInfo"}),"\n",(0,i.jsx)("pre",{class:"language-python",children:(0,i.jsxs)("code",{children:["def ExecutionPlatformInfo(\n*,\nlabel: ",(0,i.jsx)(a.default,{to:"/docs/api/build/TargetLabel",children:"TargetLabel"}),",\nconfiguration: ConfigurationInfo,\nexecutor_config: ",(0,i.jsx)(a.default,{to:"/docs/api/build/CommandExecutorConfig",children:"CommandExecutorConfig"}),",\n) -> ExecutionPlatformInfo"]})}),"\n",(0,i.jsx)(n.p,{children:"Provider that signals that a target represents an execution platform."}),"\n",(0,i.jsx)(n.p,{children:"Provides a number of fields that can be accessed:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"label: TargetLabel"})," - label of the defining rule, used in informative messages"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"configuration: ConfigurationInfo"})," - The configuration of the execution platform"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"executor_config: CommandExecutorConfig"})," - The executor config"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"executionplatformregistrationinfo",children:"ExecutionPlatformRegistrationInfo"}),"\n",(0,i.jsx)("pre",{class:"language-python",children:(0,i.jsx)("code",{children:"def ExecutionPlatformRegistrationInfo(\n*,\nplatforms: list[ExecutionPlatformInfo],\nfallback = None,\n) -> ExecutionPlatformRegistrationInfo"})}),"\n",(0,i.jsx)(n.p,{children:"Provider that gives the list of all execution platforms available for this build."}),"\n",(0,i.jsx)(n.p,{children:"Provides a number of fields that can be accessed:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"platforms: list[ExecutionPlatformInfo]"})," - field"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"fallback: typing.Any"})," - field"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"installinfo",children:"InstallInfo"}),"\n",(0,i.jsx)("pre",{class:"language-python",children:(0,i.jsxs)("code",{children:["def InstallInfo(\ninstaller: ",(0,i.jsx)(a.default,{to:"/docs/api/build/Label",children:"Label"}),",\nfiles: dict[",(0,i.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"}),", ",(0,i.jsx)(a.default,{to:"/docs/api/build/PromiseArtifact",children:"Artifact"}),"],\n) -> InstallInfo"]})}),"\n",(0,i.jsx)(n.p,{children:"A provider that can be constructed and have its fields accessed. Returned by rules."}),"\n",(0,i.jsx)(n.p,{children:"Provides a number of fields that can be accessed:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"installer: Label"})," - field"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"files: dict[str, Artifact]"})," - field"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"provider",children:"Provider"}),"\n",(0,i.jsx)("pre",{class:"language-python",children:(0,i.jsx)("code",{children:"Provider: type"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"anon_rule",children:"anon_rule"}),"\n",(0,i.jsx)("pre",{class:"language-python",children:(0,i.jsxs)("code",{children:["def anon_rule(\n*,\nimpl: typing.Callable[[typing.Any], list],\nattrs: dict[",(0,i.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"}),", ",(0,i.jsx)(a.default,{to:"/docs/api/build/Attr",children:"Attr"}),"],\ndoc: ",(0,i.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"}),' = "",\nartifact_promise_mappings: dict[',(0,i.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"}),", typing.Callable[[typing.Any], list]],\n) -> def(**kwargs: typing.Any) -> None"]})}),"\n",(0,i.jsxs)(n.p,{children:["Define an anon rule, similar to how a normal rule is defined, except with an extra ",(0,i.jsx)(n.code,{children:"artifact_promise_mappings"})," field. This is a dict where the keys are the string name of the artifact, and the values are the callable functions that produce the artifact. This is only intended to be used with anon targets."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"dedupe",children:"dedupe"}),"\n",(0,i.jsx)("pre",{class:"language-python",children:(0,i.jsx)("code",{children:"def dedupe(val, /)"})}),"\n",(0,i.jsx)(n.p,{children:"Remove duplicates in a list. Uses identity of value (pointer), rather than by equality. In many cases you should use a transitive set instead."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"dynamic_actions",children:"dynamic_actions"}),"\n",(0,i.jsx)("pre",{class:"language-python",children:(0,i.jsxs)("code",{children:['def dynamic_actions(\n*,\nimpl: typing.Callable["*, actions: ',(0,i.jsx)(a.default,{to:"/docs/api/build/AnalysisActions",children:"AnalysisActions"}),', **kwargs: typing.Any", list[Provider]],\nattrs: dict[',(0,i.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"}),", ",(0,i.jsx)(a.default,{to:"/docs/api/build/dynattrs/DynamicAttrType",children:"DynamicAttrType"}),"],\n) -> ",(0,i.jsx)(a.default,{to:"/docs/api/build/DynamicActionsCallable",children:"DynamicActionCallable"})]})}),"\n",(0,i.jsxs)(n.p,{children:["Create new dynamic action callable. Returned object will be callable, and the result of calling it can be passed to ",(0,i.jsx)(n.code,{children:"ctx.actions.dynamic_output_new"}),"."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"get_base_path",children:"get_base_path"}),"\n",(0,i.jsx)("pre",{class:"language-python",children:(0,i.jsxs)("code",{children:["def get_base_path() -> ",(0,i.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"})]})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"get_base_path()"})," can only be called in buildfiles (e.g. BUCK files) or PACKAGE files, and returns the name of the package. E.g. inside ",(0,i.jsx)(n.code,{children:"foo//bar/baz/BUCK"})," the output will be ",(0,i.jsx)(n.code,{children:"bar/baz"}),". E.g. inside ",(0,i.jsx)(n.code,{children:"foo//bar/PACKAGE"})," the output will be ",(0,i.jsx)(n.code,{children:"bar"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["This function is identical to ",(0,i.jsx)(n.code,{children:"package_name"}),"."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"get_cell_name",children:"get_cell_name"}),"\n",(0,i.jsx)("pre",{class:"language-python",children:(0,i.jsxs)("code",{children:["def get_cell_name() -> ",(0,i.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"})]})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"get_cell_name()"})," can be called from either a ",(0,i.jsx)(n.code,{children:"BUCK"})," file or a ",(0,i.jsx)(n.code,{children:".bzl"})," file, and returns the name of the cell where the ",(0,i.jsx)(n.code,{children:"BUCK"})," file that started the call lives."]}),"\n",(0,i.jsxs)(n.p,{children:["For example, inside ",(0,i.jsx)(n.code,{children:"foo//bar/baz/BUCK"})," the output will be ",(0,i.jsx)(n.code,{children:"foo"}),".\nIf that ",(0,i.jsx)(n.code,{children:"BUCK"})," file does a ",(0,i.jsx)(n.code,{children:'load("hello//world.bzl", "something")'})," then\nthe result in that ",(0,i.jsx)(n.code,{children:".bzl"})," file will also be ",(0,i.jsx)(n.code,{children:"foo"}),"."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"get_parent_modifiers",children:"get_parent_modifiers"}),"\n",(0,i.jsx)("pre",{class:"language-python",children:(0,i.jsx)("code",{children:"def get_parent_modifiers()"})}),"\n",(0,i.jsxs)(n.p,{children:["Get a configuration modifiers defined in a parent ",(0,i.jsx)(n.code,{children:"PACKAGE"})," file."]}),"\n",(0,i.jsx)(n.p,{children:"This function can only be called in a Package context."}),"\n",(0,i.jsxs)(n.p,{children:["Returns ",(0,i.jsx)(n.code,{children:"None"})," if value is not set."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"glob",children:"glob"}),"\n",(0,i.jsx)("pre",{class:"language-python",children:(0,i.jsxs)("code",{children:["def glob(\ninclude: list[",(0,i.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"}),"] | tuple[",(0,i.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"}),", ...],\n*,\nexclude: list[",(0,i.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"}),"] | tuple[",(0,i.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"}),", ...] = [],\n) -> list[",(0,i.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"}),"]"]})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"glob()"})," function specifies a set of files using patterns. Only available from ",(0,i.jsx)(n.code,{children:"BUCK"})," files."]}),"\n",(0,i.jsxs)(n.p,{children:["A typical ",(0,i.jsx)(n.code,{children:"glob"})," call looks like:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'glob(["foo/**/*.h"])\n'})}),"\n",(0,i.jsxs)(n.p,{children:["This call will match all header files in the ",(0,i.jsx)(n.code,{children:"foo"})," directory, recursively."]}),"\n",(0,i.jsxs)(n.p,{children:["You can also pass a named ",(0,i.jsx)(n.code,{children:"exclude"})," parameter to remove files matching a pattern:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'glob(["foo/**/*.h"], exclude = ["**/config.h"])\n'})}),"\n",(0,i.jsxs)(n.p,{children:["This call will remove all ",(0,i.jsx)(n.code,{children:"config.h"})," files from the initial match."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"glob()"})," call is evaluated against the list of files owned by this ",(0,i.jsx)(n.code,{children:"BUCK"})," file.\nA file is owned by whichever ",(0,i.jsx)(n.code,{children:"BUCK"})," file is closest above it - so given ",(0,i.jsx)(n.code,{children:"foo/BUCK"})," and\n",(0,i.jsx)(n.code,{children:"foo/bar/BUCK"})," the file ",(0,i.jsx)(n.code,{children:"foo/file.txt"})," would be owned by ",(0,i.jsx)(n.code,{children:"foo/BUCK"})," (and available from\nits ",(0,i.jsx)(n.code,{children:"glob"})," results) but the file ",(0,i.jsx)(n.code,{children:"foo/bar/file.txt"})," would be owned by ",(0,i.jsx)(n.code,{children:"foo/bar/BUCk"}),"\nand ",(0,i.jsx)(n.em,{children:"not"})," appear in the glob result of ",(0,i.jsx)(n.code,{children:"foo/BUCK"}),", even if you write ",(0,i.jsx)(n.code,{children:'glob(["bar/file.txt"])'}),".\nAs a consequence of this rule, ",(0,i.jsx)(n.code,{children:'glob(["../foo.txt"])'})," will always return an empty list of files."]}),"\n",(0,i.jsxs)(n.p,{children:["Currently ",(0,i.jsx)(n.code,{children:"glob"})," is evaluated case-insensitively on all file systems, but we expect\nthat to change to case sensitive in the near future."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"host_info",children:"host_info"}),"\n",(0,i.jsx)("pre",{class:"language-python",children:(0,i.jsx)("code",{children:"def host_info() -> struct(..)"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"host_info()"})," function is used to get the current OS and processor architecture on the host. The structure returned is laid out thusly:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"struct(\n    os=struct(\n        is_linux=True|False,\n        is_macos=True|False,\n        is_windows=True|False,\n        is_freebsd=True|False,\n        is_unknown=True|False,\n    ),\n    arch=struct(\n        is_aarch64=True|False,\n        is_arm=True|False,\n        is_armeb=True|False,\n        is_i386=True|False,\n        is_mips=True|False,\n        is_mips64=True|False,\n        is_mipsel=True|False,\n        is_mipsel64=True|False,\n        is_powerpc=True|False,\n        is_ppc64=True|False,\n        is_x86_64=True|False,\n        is_unknown=True|False,\n    ),\n)\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"implicit_package_symbol",children:"implicit_package_symbol"}),"\n",(0,i.jsx)("pre",{class:"language-python",children:(0,i.jsxs)("code",{children:["def implicit_package_symbol(\nname: ",(0,i.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"}),",\ndefault = ...,\n)"]})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"load_symbols",children:"load_symbols"}),"\n",(0,i.jsx)("pre",{class:"language-python",children:(0,i.jsxs)("code",{children:["def load_symbols(\nsymbols: dict[",(0,i.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"}),", typing.Any],\n) -> None"]})}),"\n",(0,i.jsxs)(n.p,{children:["Used in a ",(0,i.jsx)(n.code,{children:".bzl"})," file to set exported symbols. In most cases just defining the symbol as a top-level binding is sufficient, but sometimes the names might be programatically generated."]}),"\n",(0,i.jsx)(n.p,{children:"It is undefined behaviour if you try and use any of the symbols exported\nhere later in the same module, or if they overlap with existing definitions.\nThis function should be used rarely."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"oncall",children:"oncall"}),"\n",(0,i.jsx)("pre",{class:"language-python",children:(0,i.jsxs)("code",{children:["def oncall(name: ",(0,i.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"}),", /) -> None"]})}),"\n",(0,i.jsxs)(n.p,{children:["Called in a ",(0,i.jsx)(n.code,{children:"BUCK"})," file to declare the oncall contact details for all the targets defined. Must be called at most once, before any targets have been declared. Errors if called from a ",(0,i.jsx)(n.code,{children:".bzl"})," file."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"package",children:"package"}),"\n",(0,i.jsx)("pre",{class:"language-python",children:(0,i.jsxs)("code",{children:["def package(\n*,\ninherit: ",(0,i.jsx)(a.default,{to:"/docs/api/starlark/bool",children:"bool"})," = False,\nvisibility: list[",(0,i.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"}),"] | tuple[",(0,i.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"}),", ...] = [],\nwithin_view: list[",(0,i.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"}),"] | tuple[",(0,i.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"}),", ...] = [],\n) -> None"]})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"package_name",children:"package_name"}),"\n",(0,i.jsx)("pre",{class:"language-python",children:(0,i.jsxs)("code",{children:["def package_name() -> ",(0,i.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"})]})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"package_name()"})," can only be called in buildfiles (e.g. BUCK files) or PACKAGE files, and returns the name of the package. E.g. inside ",(0,i.jsx)(n.code,{children:"foo//bar/baz/BUCK"})," the output will be ",(0,i.jsx)(n.code,{children:"bar/baz"}),". E.g. inside ",(0,i.jsx)(n.code,{children:"foo//bar/PACKAGE"})," the output will be ",(0,i.jsx)(n.code,{children:"bar"}),"."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"provider-1",children:"provider"}),"\n",(0,i.jsx)("pre",{class:"language-python",children:(0,i.jsxs)("code",{children:["def provider(\n*,\ndoc: ",(0,i.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"}),' = "",\nfields: list[',(0,i.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"}),"] | tuple[",(0,i.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"}),", ...] | dict[",(0,i.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"}),", typing.Any],\n) -> ProviderCallable"]})}),"\n",(0,i.jsxs)(n.p,{children:["Create a ",(0,i.jsx)(n.code,{children:'"provider"'})," type that can be returned from ",(0,i.jsx)(n.code,{children:"rule"})," implementations. Used to pass information from a rule to the things that depend on it. Typically named with an ",(0,i.jsx)(n.code,{children:"Info"})," suffix."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'GroovyLibraryInfo(fields = [\n    "objects",  # a list of artifacts\n    "options",  # a string containing compiler options\n])\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Given a dependency you can obtain the provider with ",(0,i.jsx)(n.code,{children:"my_dep[GroovyLibraryInfo]"}),"\nwhich returns either ",(0,i.jsx)(n.code,{children:"None"})," or a value of type ",(0,i.jsx)(n.code,{children:"GroovyLibraryInfo"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"For providers that accumulate upwards a transitive set is often a good choice."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"provider_field",children:"provider_field"}),"\n",(0,i.jsx)("pre",{class:"language-python",children:(0,i.jsx)("code",{children:"def provider_field(ty, /, *, default = ...) -> ProviderField"})}),"\n",(0,i.jsxs)(n.p,{children:["Create a field definition object which can be passed to ",(0,i.jsx)(n.code,{children:"provider"})," type constructor."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"read_config",children:"read_config"}),"\n",(0,i.jsx)("pre",{class:"language-python",children:(0,i.jsxs)("code",{children:["def read_config(\nsection: ",(0,i.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"}),",\nkey: ",(0,i.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"}),",\ndefault = ...,\n)"]})}),"\n",(0,i.jsxs)(n.p,{children:["Read a configuration from the nearest enclosing ",(0,i.jsx)(n.code,{children:".buckconfig"})," of the ",(0,i.jsx)(n.code,{children:"BUCK"})," file that started evaluation of this code."]}),"\n",(0,i.jsxs)(n.p,{children:["As an example, if you have a ",(0,i.jsx)(n.code,{children:".buckconfig"})," of:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",children:"[package_options]\ncompile = super_fast\n"})}),"\n",(0,i.jsx)(n.p,{children:"Then you would get the following results:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'read_config("package_options", "compile") == "super_fast"\nread_config("package_options", "linker") == None\nread_config("package_options", "linker", "a_default") == "a_default"\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In general the use of ",(0,i.jsx)(n.code,{children:".buckconfig"})," is discouraged in favour of ",(0,i.jsx)(n.code,{children:"select"}),",\nbut it can still be useful."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"read_oncall",children:"read_oncall"}),"\n",(0,i.jsx)("pre",{class:"language-python",children:(0,i.jsxs)("code",{children:["def read_oncall() -> None | ",(0,i.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"})]})}),"\n",(0,i.jsxs)(n.p,{children:["Called in a ",(0,i.jsx)(n.code,{children:"BUCK"})," file to retrieve the previously set ",(0,i.jsx)(n.code,{children:"oncall"}),", or ",(0,i.jsx)(n.code,{children:"None"})," if none has been set. It is an error to call ",(0,i.jsx)(n.code,{children:"oncall"})," after calling this function."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"read_package_value",children:"read_package_value"}),"\n",(0,i.jsx)("pre",{class:"language-python",children:(0,i.jsxs)("code",{children:["def read_package_value(key: ",(0,i.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"}),", /)"]})}),"\n",(0,i.jsxs)(n.p,{children:["Read value specified in the ",(0,i.jsx)(n.code,{children:"PACKAGE"})," file."]}),"\n",(0,i.jsxs)(n.p,{children:["Returns ",(0,i.jsx)(n.code,{children:"None"})," if value is not set."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"read_parent_package_value",children:"read_parent_package_value"}),"\n",(0,i.jsx)("pre",{class:"language-python",children:(0,i.jsxs)("code",{children:["def read_parent_package_value(\nkey: ",(0,i.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"}),",\n/,\n)"]})}),"\n",(0,i.jsxs)(n.p,{children:["Read a package value defined in a parent ",(0,i.jsx)(n.code,{children:"PACKAGE"})," file."]}),"\n",(0,i.jsx)(n.p,{children:"This function can only be called in a Package context."}),"\n",(0,i.jsxs)(n.p,{children:["Returns ",(0,i.jsx)(n.code,{children:"None"})," if value is not set."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"read_root_config",children:"read_root_config"}),"\n",(0,i.jsx)("pre",{class:"language-python",children:(0,i.jsxs)("code",{children:["def read_root_config(\nsection: ",(0,i.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"}),",\nkey: ",(0,i.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"}),",\ndefault: None | ",(0,i.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"})," = None,\n/,\n) -> None | ",(0,i.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"})]})}),"\n",(0,i.jsxs)(n.p,{children:["Like ",(0,i.jsx)(n.code,{children:"read_config"})," but the project root ",(0,i.jsx)(n.code,{children:".buckconfig"})," is always consulted, regardless of the cell of the originating ",(0,i.jsx)(n.code,{children:"BUCK"})," file."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"regex_match",children:"regex_match"}),"\n",(0,i.jsx)("pre",{class:"language-python",children:(0,i.jsxs)("code",{children:["def regex_match(\nregex: ",(0,i.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"}),",\nstr: ",(0,i.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"}),",\n/,\n) -> ",(0,i.jsx)(a.default,{to:"/docs/api/starlark/bool",children:"bool"})]})}),"\n",(0,i.jsx)(n.p,{children:"Test if a regular expression matches a string. Fails if the regular expression is malformed."}),"\n",(0,i.jsx)(n.p,{children:"As an example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'regex_match("^[a-z]*$", "hello") == True\nregex_match("^[a-z]*$", "1234") == False\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"repository_name",children:"repository_name"}),"\n",(0,i.jsx)("pre",{class:"language-python",children:(0,i.jsxs)("code",{children:["def repository_name() -> ",(0,i.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"})]})}),"\n",(0,i.jsxs)(n.p,{children:["Like ",(0,i.jsx)(n.code,{children:"get_cell_name()"})," but prepends a leading ",(0,i.jsx)(n.code,{children:"@"})," for compatibility with Buck1. You should call ",(0,i.jsx)(n.code,{children:"get_cell_name()"})," instead, and if you really want the ",(0,i.jsx)(n.code,{children:"@"}),", prepend it yourself."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"rule",children:"rule"}),"\n",(0,i.jsx)("pre",{class:"language-python",children:(0,i.jsxs)("code",{children:["def rule(\n*,\nimpl: typing.Callable[[",(0,i.jsx)(a.default,{to:"/docs/api/build/AnalysisContext",children:"AnalysisContext"}),"], ",(0,i.jsx)(a.default,{to:"/docs/api/build/Promise",children:"Promise"})," | list[Provider]],\nattrs: dict[",(0,i.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"}),", ",(0,i.jsx)(a.default,{to:"/docs/api/build/Attr",children:"Attr"}),"],\ncfg: Transition = ...,\nsupports_incoming_transition: ",(0,i.jsx)(a.default,{to:"/docs/api/starlark/bool",children:"bool"})," = ...,\ndoc: ",(0,i.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"}),' = "",\nis_configuration_rule: ',(0,i.jsx)(a.default,{to:"/docs/api/starlark/bool",children:"bool"})," = False,\nis_toolchain_rule: ",(0,i.jsx)(a.default,{to:"/docs/api/starlark/bool",children:"bool"})," = False,\nuses_plugins: list[",(0,i.jsx)(a.default,{to:"/docs/api/build/plugins/PluginKind",children:"PluginKind"}),"] | tuple[",(0,i.jsx)(a.default,{to:"/docs/api/build/plugins/PluginKind",children:"PluginKind"}),", ...] = [],\n) -> def(**kwargs: typing.Any) -> None"]})}),"\n",(0,i.jsx)(n.p,{children:"Define a rule. As a simple example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'def _my_rule(ctx: AnalysisContext) -> list[Provider]:\n    output = ctx.actions.write("hello.txt", ctx.attrs.contents, executable = ctx.attrs.exe)\n    return [DefaultInfo(outputs = [output])]\n\nMyRule = rule(impl = _my_rule, attrs = {\n    "contents": attrs.string(),\n    "exe": attrs.option(attrs.bool(), default = False),\n})\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"rule_exists",children:"rule_exists"}),"\n",(0,i.jsx)("pre",{class:"language-python",children:(0,i.jsxs)("code",{children:["def rule_exists(\nname: ",(0,i.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"}),",\n) -> ",(0,i.jsx)(a.default,{to:"/docs/api/starlark/bool",children:"bool"})]})}),"\n",(0,i.jsxs)(n.p,{children:["Check if the target with ",(0,i.jsx)(n.code,{children:"name"})," has already been defined, returns ",(0,i.jsx)(n.code,{children:"True"})," if it has."]}),"\n",(0,i.jsxs)(n.p,{children:["Note that this function checks for the existence of a ",(0,i.jsx)(n.em,{children:"target"})," rather than a ",(0,i.jsx)(n.em,{children:"rule"}),".\nIn general use of this function is discouraged, as it makes definitions of rules not compose."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"select",children:"select"}),"\n",(0,i.jsx)("pre",{class:"language-python",children:(0,i.jsxs)("code",{children:["def select(\nd: dict[",(0,i.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"}),", typing.Any],\n/,\n) -> ",(0,i.jsx)(a.default,{to:"/docs/api/build/Select",children:"Select"})]})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"select_map",children:"select_map"}),"\n",(0,i.jsx)("pre",{class:"language-python",children:(0,i.jsx)("code",{children:"def select_map(d, func, /)"})}),"\n",(0,i.jsx)(n.p,{children:"Maps a selector."}),"\n",(0,i.jsx)(n.p,{children:"Each value within a selector map and on each side of an addition will be passed to the\nmapping function. The returned selector will have the same structure as this one."}),"\n",(0,i.jsx)(n.p,{children:"Ex:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'def increment_items(a):\n    return [v + 1 for v in a]\n\nselect_map([1, 2] + select({"c": [2]}), increment_items) == [2, 3] + select({"c": [3]})\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"select_test",children:"select_test"}),"\n",(0,i.jsx)("pre",{class:"language-python",children:(0,i.jsxs)("code",{children:["def select_test(d, func, /) -> ",(0,i.jsx)(a.default,{to:"/docs/api/starlark/bool",children:"bool"})]})}),"\n",(0,i.jsx)(n.p,{children:"Test values in the select expression using the given function."}),"\n",(0,i.jsx)(n.p,{children:"Returns True, if any value in the select passes, else False."}),"\n",(0,i.jsx)(n.p,{children:"Ex:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'select_test([1] + select({"c": [1]}), lambda a: len(a) > 1) == False\nselect_test([1, 2] + select({"c": [1]}), lambda a: len(a) > 1) == True\nselect_test([1] + select({"c": [1, 2]}), lambda a: len(a) > 1) == True\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"set_cfg_constructor",children:"set_cfg_constructor"}),"\n",(0,i.jsx)("pre",{class:"language-python",children:(0,i.jsxs)("code",{children:["def set_cfg_constructor(\n*,\nstage0,\nstage1,\nkey: ",(0,i.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"}),",\naliases = None,\nextra_data = None,\n) -> None"]})}),"\n",(0,i.jsx)(n.p,{children:"Register global cfg constructor."}),"\n",(0,i.jsxs)(n.p,{children:["This function can only be called from the repository root ",(0,i.jsx)(n.code,{children:"PACKAGE"})," file."]}),"\n",(0,i.jsx)(n.p,{children:"Parameters:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"stage0"}),": The first cfg constructor that will be invoked before configuration rules are analyzed."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"stage1"}),": The second cfg constructor that will be invoked after configuration rules are analyzed."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"key"}),": The key for cfg modifiers on PACKAGE values and metadata."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"aliases"}),": The aliases map to use for input modifiers."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"extra_data"}),": Some extra data that may be used by ",(0,i.jsx)(n.code,{children:"set_cfg_constructor"})," implementation that is\ncustom to our implementation and may not be used in other context like open-source."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"set_modifiers",children:"set_modifiers"}),"\n",(0,i.jsx)("pre",{class:"language-python",children:(0,i.jsx)("code",{children:"def set_modifiers(value, /) -> None"})}),"\n",(0,i.jsxs)(n.p,{children:["Set configuration modifiers for ",(0,i.jsx)(n.code,{children:"PACKAGE"})," files."]}),"\n",(0,i.jsx)(n.p,{children:"This function can only be called in a Package context."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"set_starlark_peak_allocated_byte_limit",children:"set_starlark_peak_allocated_byte_limit"}),"\n",(0,i.jsx)("pre",{class:"language-python",children:(0,i.jsxs)("code",{children:["def set_starlark_peak_allocated_byte_limit(\nvalue: ",(0,i.jsx)(a.default,{to:"/docs/api/starlark/int",children:"int"}),",\n/,\n) -> None"]})}),"\n",(0,i.jsx)(n.p,{children:"Set the peak allocated bytes during evaluation of build ctx. Err if it has already been set"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"sha1",children:"sha1"}),"\n",(0,i.jsx)("pre",{class:"language-python",children:(0,i.jsxs)("code",{children:["def sha1(\nval: ",(0,i.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"}),",\n/,\n) -> ",(0,i.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"})]})}),"\n",(0,i.jsx)(n.p,{children:"Computes a sha1 digest for a string. Returns the hex representation of the digest."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'sha1("Buck2 is the best build system") == "d39e9f9030da819a5be667a409ea979551df6211"\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"sha256",children:"sha256"}),"\n",(0,i.jsx)("pre",{class:"language-python",children:(0,i.jsxs)("code",{children:["def sha256(\nval: ",(0,i.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"}),",\n/,\n) -> ",(0,i.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"})]})}),"\n",(0,i.jsx)(n.p,{children:"Computes a sha256 digest for a string. Returns the hex representation of the digest."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'sha256("Buck2 is the best build system") == "bb99a3f19ecba6c4d2c7cd321b63b669684c713881baae21a6b1d759b3ec6ac9"\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"soft_error",children:"soft_error"}),"\n",(0,i.jsx)("pre",{class:"language-python",children:(0,i.jsxs)("code",{children:["def soft_error(\ncategory: ",(0,i.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"}),",\nmessage: ",(0,i.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"}),",\n/,\n*,\nquiet: ",(0,i.jsx)(a.default,{to:"/docs/api/starlark/bool",children:"bool"})," = ...,\nstack: ",(0,i.jsx)(a.default,{to:"/docs/api/starlark/bool",children:"bool"})," = ...,\n) -> None"]})}),"\n",(0,i.jsx)(n.p,{children:"Produce an error that will become a hard error at some point in the future, but for now is a warning which is logged to the server. In the open source version of Buck2 this function always results in an error."}),"\n",(0,i.jsxs)(n.p,{children:["Called passing a stable key (must be ",(0,i.jsx)(n.code,{children:"snake_case"})," and start with ",(0,i.jsx)(n.code,{children:"starlark_"}),",\nused for consistent reporting) and an arbitrary message (used for debugging)."]}),"\n",(0,i.jsx)(n.p,{children:"As an example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'soft_error(\n    "starlark_rule_is_too_long",\n    "Length of property exceeds 100 characters in " + repr(ctx.label),\n)\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"test_config_unification_rollout",children:"test_config_unification_rollout"}),"\n",(0,i.jsx)("pre",{class:"language-python",children:(0,i.jsxs)("code",{children:["def test_config_unification_rollout(\nenabled: ",(0,i.jsx)(a.default,{to:"/docs/api/starlark/bool",children:"bool"}),",\n) -> None"]})}),"\n",(0,i.jsx)(n.p,{children:"DO NOT USE THIS FUNCTION!"}),"\n",(0,i.jsx)(n.p,{children:"It controls which test config to use in downstream systems. Mostly likely you don't want to specify it by yourself."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"transition",children:"transition"}),"\n",(0,i.jsx)("pre",{class:"language-python",children:(0,i.jsxs)("code",{children:['def transition(\n*,\nimpl: typing.Callable["*, platform: PlatformInfo, refs: struct(..), attrs: struct(..) = ...", dict[',(0,i.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"}),", PlatformInfo] | PlatformInfo],\nrefs: dict[",(0,i.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"}),", ",(0,i.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"}),"],\nattrs: list[",(0,i.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"}),"] | tuple[",(0,i.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"}),", ...] = ...,\nsplit: ",(0,i.jsx)(a.default,{to:"/docs/api/starlark/bool",children:"bool"})," = False,\n) -> Transition"]})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"transitive_set",children:"transitive_set"}),"\n",(0,i.jsx)("pre",{class:"language-python",children:(0,i.jsxs)("code",{children:["def transitive_set(\n*,\nargs_projections: dict[",(0,i.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"}),", typing.Callable[[typing.Any], typing.Any]] = ...,\njson_projections: dict[",(0,i.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"}),", typing.Callable[[typing.Any], typing.Any]] = ...,\nreductions: dict[",(0,i.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"}),", typing.Callable[[list, typing.Any], typing.Any]] = ...,\n) -> ",(0,i.jsx)(a.default,{to:"/docs/api/build/TransitiveSetDefinition",children:"TransitiveSetDefinition"})]})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"warning",children:"warning"}),"\n",(0,i.jsx)("pre",{class:"language-python",children:(0,i.jsxs)("code",{children:["def warning(x: ",(0,i.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"}),", /) -> None"]})}),"\n",(0,i.jsxs)(n.p,{children:["Print a warning. The line will be decorated with the timestamp and other details, including the word ",(0,i.jsx)(n.code,{children:"WARN"})," (colored, if the console supports it)."]}),"\n",(0,i.jsxs)(n.p,{children:["If you are not writing a warning, use ",(0,i.jsx)(n.code,{children:"print"})," instead. Be aware that printing\nlots of output (warnings or not) can be cause all information to be ignored by the user."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"write_package_value",children:"write_package_value"}),"\n",(0,i.jsx)("pre",{class:"language-python",children:(0,i.jsxs)("code",{children:["def write_package_value(\nkey: ",(0,i.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"}),",\nvalue,\n/,\n*,\noverwrite: ",(0,i.jsx)(a.default,{to:"/docs/api/starlark/bool",children:"bool"})," = False,\n) -> None"]})}),"\n",(0,i.jsxs)(n.p,{children:["Set the value to be accessible in the nested ",(0,i.jsx)(n.code,{children:"PACKAGE"})," files."]}),"\n",(0,i.jsxs)(n.p,{children:["If any parent ",(0,i.jsx)(n.code,{children:"PACKAGE"})," value has already set the same ",(0,i.jsx)(n.code,{children:"key"}),",\nit will raise an error unless you pass ",(0,i.jsx)(n.code,{children:"overwrite = True"}),",\nin which case it will replace the parent value."]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}}}]);