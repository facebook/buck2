/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is dual-licensed under either the MIT license found in the
 * LICENSE-MIT file in the root directory of this source tree or the Apache
 * License, Version 2.0 found in the LICENSE-APACHE file in the root directory
 * of this source tree. You may select, at your option, one of the
 * above-listed licenses.
 */

syntax = "proto3";

import "google/protobuf/duration.proto";
import "data.proto";

package buck.forkserver;

message CommandRequest {
  reserved 3, 4, 7, 10, 11, 13, 15, 16;
  // The executable that should be run.
  bytes exe = 1;
  // The arguments to give the executable.
  repeated bytes argv = 2;
  // The working directory of the command as it's being spawned.
  WorkingDirectory cwd = 5;
  // The max duration this command should be allowed to run for.
  google.protobuf.Duration timeout = 6;
  // Control the environment
  repeated EnvDirective env = 8;
  // Enable Miniperf if available?
  bool enable_miniperf = 9;

  message StdRedirectPaths {
    // reserved 10, 11
    string stdout = 1;
    string stderr = 2;
  }
  // Used to optionally redirect stdout and stderr to files.
  // If set, stdout and stderr events will not be streamed.
  optional StdRedirectPaths std_redirects = 12;
  // If set, how long to give the process time to shutdown after SIGTERM
  // before sending SIGKILL.
  // Should only be needed for daemonized processes (workers).
  optional uint32 graceful_shutdown_timeout_s = 14;
  // The cgroup that the command should be spawned into. Must already exist.
  optional string command_cgroup = 17;
}

message WorkingDirectory {
  bytes path = 1;
}

// Clear all the env
message EnvClear {}

// Remove one var
message EnvRemove {
  bytes key = 1;
}

// Set one var
message EnvSet {
  bytes key = 1;
  bytes value = 2;
}

message EnvDirective {
  oneof data {
    EnvClear clear = 1;
    EnvRemove remove = 2;
    EnvSet set = 3;
  }
}

message CommandEvent {
  reserved 8;
  oneof data {
    ExitEvent exit = 1;
    TimeoutEvent timeout = 2;
    StreamEvent stdout = 4;
    StreamEvent stderr = 5;
    CancelEvent cancel = 6;
    SpawnFailedEvent spawn_failed = 7;
  }
}

// Like `buck.data.CommandExecutionStats`, but without memory information
message CollectedExecutionStats {
  optional uint64 cpu_instructions_user = 1;
  optional uint64 cpu_instructions_kernel = 2;
  optional buck.data.CpuCounter userspace_events = 3;
  optional buck.data.CpuCounter kernel_events = 4;
}

message ExitEvent {
  reserved 2;
  int32 exit_code = 1;
  optional CollectedExecutionStats execution_stats = 3;
}

message TimeoutEvent {
  google.protobuf.Duration duration = 1;
}

message StreamEvent {
  bytes data = 1;
}

message CancelEvent {}

message CancelRequest {}

message SpawnFailedEvent {
  string reason = 1;
}

message Cgroup {
  string path = 1;
}

message RequestEvent {
  oneof data {
    CommandRequest command_request = 1;
    CancelRequest cancel_request = 2;
  }
}

message SetLogFilterRequest {
  string log_filter = 1;
}

message SetLogFilterResponse {}

service Forkserver {
  rpc Run(stream RequestEvent) returns (stream CommandEvent) {}

  // Update the daemon's log filter.
  rpc SetLogFilter(SetLogFilterRequest) returns (SetLogFilterResponse);
}
