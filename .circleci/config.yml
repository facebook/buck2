commands:
  print_versions:
    description: Version Info
    steps:
      - run:
          name: Version Info
          command: |
            rustup show
            rustc --version
            cargo --version
            rustup --version

  init_opam:
    description: Init Opam
    steps:
      - run:
          name: Init opam
          command: |
            opam init --disable-sandboxing -y
            opam install menhir ppxlib -y
      - run:
          name: OCaml Configuration Info
          command: |
            eval $(opam env --switch=default)
            env | grep OPAM_SWITCH_PREFIX
            ocamlopt.opt -config

  setup_linux_env:
    description: Setup env for Linux
    steps:
      - run: sudo apt-get update
      - run: sudo apt-get install libssl-dev cmake clang lld opam
      - print_versions

  setup_macos_env:
    description: Setup env for macOS
    steps:
      - run: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
      - run:
          name: Brew install
          command: |
            # Avoid: "Error: The `brew link` step did not complete
            # successfully" (for llvm dependency 'six').
            rm -f '/usr/local/lib/python3.9/site-packages/six.py'
            brew unlink python@3.9
            brew install cmake coreutils opam llvm
      - print_versions

  setup_windows_env:
    description: Setup env for Windows
    steps:
      - run:
          name: Install dependencies
          command: |
            choco install -y rustup.install llvm
            write-output "[net]`ngit-fetch-with-cli = true" | out-file -append -encoding utf8 $Env:USERPROFILE/.cargo/config
            type $Env:USERPROFILE/.cargo/config
      - print_versions

version: 2.1
orbs:
  win: circleci/windows@2.2.0
jobs:
  linux-build-and-test:
    description: |
      Build and test all with cargo for Linux
    docker:
      - image: cimg/rust:1.65.0
    resource_class: xlarge
    steps:
      - checkout
      - setup_linux_env
      - run:
          # the xlarge linux resource class has 8 CPUs, limit the number of jobs to 6 to avoid running out of resources
          name: "Set CARGO_BUILD_JOBS=6 to limit the number of CPUs used"
          command: echo 'export CARGO_BUILD_JOBS="6"' >> "$BASH_ENV"
      - run:
          name: Build buck2 binary (debug)
          command: |
            mkdir /tmp/artifacts
            cargo build --bin=buck2 -Z unstable-options --out-dir=/tmp/artifacts
      - run:
          name: Run test.py
          command: python3 test.py --ci --git --buck2=/tmp/artifacts/buck2

  linux-build-examples:
    description: Build example projects
    docker:
      - image: cimg/rust:1.65.0
    resource_class: xlarge
    steps:
      - checkout
      - setup_linux_env
      - init_opam
      - run:
          name: Build buck2 binary (release)
          command: |
            mkdir /tmp/artifacts
            cargo build --bin=buck2 --release -Z unstable-options --out-dir=/tmp/artifacts
      - run:
          name: Build example/prelude directory
          command: |
            cd examples/with_prelude
            /tmp/artifacts/buck2 init
            cp -r ../../prelude prelude
            # Additional setup for ocaml
            source ./setup.sh
            /tmp/artifacts/buck2 build //... -v 2
      - run:
          name: Build example/no_prelude directory
          command: |
            cd examples/no_prelude
            /tmp/artifacts/buck2 build //... -v 2

  macos-build:
    description: |
      Build all with cargo for macOS
    macos:
      xcode: 13.4.1
    resource_class: macos.x86.medium.gen2
    steps:
      - checkout
      - setup_macos_env
      - run:
          name: Build buck2 binary (debug)
          command: |
            mkdir /tmp/artifacts
            cargo build --bin=buck2 -Z unstable-options --out-dir=/tmp/artifacts
      - run:
          name: Run test.py
          command: python3 test.py --ci --git --buck2=/tmp/artifacts/buck2

  macos-build-examples:
    description: Build example projects
    macos:
      xcode: 13.4.1
    resource_class: macos.x86.medium.gen2
    steps:
      - checkout
      - setup_macos_env
      - init_opam
      - run:
          name: Build buck2 binary (release)
          command: |
            mkdir /tmp/artifacts
            # the large resource class has 8 CPUs, limit the number of jobs to 6 to avoid running out of resources
            cargo build -j 6 --bin=buck2 --release -Z unstable-options --out-dir=/tmp/artifacts
      - run:
          name: Build example/prelude directory
          command: |
            export PATH=/usr/local/opt/llvm/bin:"$PATH"
            cd examples/with_prelude
            /tmp/artifacts/buck2 init
            cp -r ../../prelude prelude
            # Additional setup for ocaml
            source ./setup.sh
            /tmp/artifacts/buck2 build //... -v 2
      - run:
          name: Build example/no_prelude directory
          command: |
            cd examples/no_prelude
            /tmp/artifacts/buck2 build //... -v 2

  windows-build-and-test:
    description: |
      Build and test all with cargo for Windows
    executor:
      name: win/default
      size: "xlarge"
      shell: powershell.exe
    steps:
      - checkout
      - setup_windows_env
      - run:
          name: Build buck2 binary (debug)
          command: |
            mkdir C:/tmp/artifacts
            cargo build --bin=buck2 -Z unstable-options --out-dir=C:/tmp/artifacts
      - run:
          name: Run test.py
          command: python test.py --ci --git --buck2=/tmp/artifacts/buck2

  windows-build-examples:
    description: Build example projects
    executor:
      name: win/default
      size: "xlarge"
      shell: powershell.exe
    steps:
      - checkout
      - setup_windows_env
      - run:
          name: Build buck2 binary (release)
          command: |
            mkdir C:/tmp/artifacts
            cargo build --bin=buck2 --release -Z unstable-options --out-dir=C:/tmp/artifacts
      - run:
          name: Build example/prelude directory
          command: |
            cd examples/with_prelude
            C:/tmp/artifacts/buck2.exe init
            copy-item -Path 'C:\Users\circleci\project\prelude' -Destination 'prelude' -Recurse
            C:/tmp/artifacts/buck2.exe build //... -v 2
      - run:
          name: Build example/no_prelude directory
          command: |
            cd examples/no_prelude
            # TODO: Fix //cpp on CircleCI, some C++ includes are missing from the system
            /tmp/artifacts/buck2 build //go/... -v 2
            /tmp/artifacts/buck2 build //rust/... -v 2

workflows:
  build-and-test:
    jobs:
      - linux-build-and-test
      - linux-build-examples
      - macos-build
      - macos-build-examples
      - windows-build-and-test
      - windows-build-examples
