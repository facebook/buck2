load("@fbcode//buck2/prelude/intellij_project:libraries.bxl", "get_library_xml")
load("@fbcode//buck2/prelude/java:java_providers.bzl", "JavaLibraryIntellijInfo")
load("@fbcode//buck2/prelude/utils:utils.bzl", "expect")

IjTargetNode = record(
    deps = ["configured_target_label"],
    label = "configured_target_label",
    directory_path = str.type,
    srcs = ["artifact"],
)

AggregatedIjTargetNode = record(
    deps = ["configured_target_label"],
    labels = ["configured_target_label"],
    name = str.type,
    srcs = ["artifact"],
)

IjModule = record(
    ij_target_node = AggregatedIjTargetNode.type,
    module_dependencies = [AggregatedIjTargetNode.type],
    module_libraries = ["IjLibrary"],
    project_libraries = ["IjLibrary"],
)

_ANDROID_LIBRARY_RULE_TYPE = "fbcode//buck2/prelude/rules.bzl:android_library"
_JAVA_LIBRARY_RULE_TYPE = "fbcode//buck2/prelude/rules.bzl:java_library"
_MODULE_RULE_TYPES = [
    _ANDROID_LIBRARY_RULE_TYPE,
    _JAVA_LIBRARY_RULE_TYPE,
]

def get_aggregated_ij_module_target_nodes(all_nodes: "target_set", analysis: dict.type) -> [AggregatedIjTargetNode.type]:
    ij_target_nodes = []
    for node in all_nodes:
        # TODO(T124404704) find a better way to exclude exec_deps()
        if node.label.cell != "fbsource":
            continue

        rule_type = node.rule_type
        if rule_type not in _MODULE_RULE_TYPES:
            continue

        if rule_type == _JAVA_LIBRARY_RULE_TYPE:
            providers = analysis[configured_sub_target(node.label)].providers()
            ij_target_nodes.append(_get_java_library_target_node(node, providers))
        elif rule_type == _ANDROID_LIBRARY_RULE_TYPE:
            providers = analysis[configured_sub_target(node.label)].providers()
            ij_target_nodes.append(_get_android_library_target_node(node, providers))
        else:
            fail("Should add if branch above for rule type: {}".format(rule_type))

    return _aggregate_ij_target_nodes(ij_target_nodes)

def _get_android_library_target_node(node: "target_node", providers: "provider_collection") -> IjTargetNode.type:
    expect(node.rule_type == _ANDROID_LIBRARY_RULE_TYPE, "Rule type must be {} but was {}".format(_JAVA_LIBRARY_RULE_TYPE, node.rule_type))
    java_library_intellij_info = providers[JavaLibraryIntellijInfo]
    return IjTargetNode(
        deps = [compiling_dep.owner.configured_target() for compiling_dep in java_library_intellij_info.compiling_classpath],
        label = node.label,
        directory_path = node.label.package,
        srcs = node.attrs().srcs.value(),
    )

def _get_java_library_target_node(node: "target_node", providers: "provider_collection") -> IjTargetNode.type:
    expect(node.rule_type == _JAVA_LIBRARY_RULE_TYPE, "Rule type must be {} but was {}".format(_JAVA_LIBRARY_RULE_TYPE, node.rule_type))
    java_library_intellij_info = providers[JavaLibraryIntellijInfo]
    return IjTargetNode(
        deps = [compiling_dep.owner.configured_target() for compiling_dep in java_library_intellij_info.compiling_classpath],
        label = node.label,
        directory_path = node.label.package,
        srcs = node.attrs().srcs.value(),
    )

def _get_name(directory_path: str.type) -> str.type:
    return directory_path.replace("/", "_")

def _aggregate_ij_target_nodes(ij_target_nodes: [IjTargetNode.type]) -> [AggregatedIjTargetNode.type]:
    directory_path_to_module_map = {}
    for ij_target_node in ij_target_nodes:
        if ij_target_node.directory_path in directory_path_to_module_map:
            aggregated_ij_target_node = directory_path_to_module_map[ij_target_node.directory_path]
            aggregated_ij_target_node.deps.extend(ij_target_node.deps)
            aggregated_ij_target_node.labels.append(ij_target_node.label)
            aggregated_ij_target_node.srcs.extend(ij_target_node.srcs)
        else:
            directory_path_to_module_map[ij_target_node.directory_path] = AggregatedIjTargetNode(
                deps = list(ij_target_node.deps),
                labels = [ij_target_node.label],
                name = _get_name(ij_target_node.directory_path),
                srcs = list(ij_target_node.srcs),
            )

    return directory_path_to_module_map.values()

def get_module_file_name(ij_target_node: AggregatedIjTargetNode.type) -> str.type:
    return "modules/{}.iml".format(ij_target_node.name)

# TODO(T124403530) Fill this in correctly
def get_module_file_contents(ij_module: IjModule.type) -> str.type:
    return """\
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="false">\
{module_dependencies}\
{module_libraries}\
{project_libraries}
  </component>
</project>
""".format(
        module_dependencies = _get_module_dependencies_xml(ij_module.module_dependencies, base_indentation = "    "),
        module_libraries = _get_module_libraries_xml(ij_module.module_libraries, base_indentation = "    "),
        project_libraries = _get_project_libraries_xml(ij_module.project_libraries, base_indentation = "    "),
    )

def _get_module_dependencies_xml(module_dependencies: [AggregatedIjTargetNode.type], base_indentation: str.type) -> str.type:
    xml = ""
    for module_dependency in module_dependencies:
        xml += _get_module_dependency_xml(module_dependency, base_indentation)

    return xml

def _get_module_dependency_xml(module_dependency: AggregatedIjTargetNode.type, base_indentation: str.type) -> str.type:
    return """
{base_indentation}<orderEntry type="module" module-name="{name}" scope="COMPILE" />""".format(
        base_indentation = base_indentation,
        name = module_dependency.name,
    )

def _get_module_libraries_xml(libraries: ["IjLibrary"], base_indentation: str.type) -> str.type:
    xml = ""
    for module_library in libraries:
        xml += _get_module_library_xml(module_library, base_indentation)

    return xml

def _get_module_library_xml(module_library: "IjLibrary", base_indentation: str.type) -> str.type:
    library_xml = get_library_xml(module_library, base_indentation = base_indentation + "  ")
    return """
{base_indentation}<orderEntry type="module-library" scope="COMPILE">{library_xml}
{base_indentation}</orderEntry>""".format(library_xml = library_xml, base_indentation = base_indentation)

def _get_project_libraries_xml(libraries: ["IjLibrary"], base_indentation: str.type) -> str.type:
    xml = ""
    for project_library in libraries:
        xml += _get_project_library_xml(project_library, base_indentation)

    return xml

def _get_project_library_xml(project_library: "IjLibrary", base_indentation: str.type) -> str.type:
    return """
{base_indentation}<orderEntry type="library" name="{name}" scope="COMPILE" level="project" />""".format(
        base_indentation = base_indentation,
        name = project_library.name,
    )
