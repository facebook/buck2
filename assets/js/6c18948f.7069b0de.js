"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[77640],{28453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>o});var s=i(96540);const c={},r=s.createContext(c);function t(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:t(e.components),s.createElement(r.Provider,{value:n},e.children)}},75028:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"concepts/key_concepts","title":"Key Concepts","description":"Buck2 has a number of fundamental concepts:","source":"@site/../docs/concepts/key_concepts.md","sourceDirName":"concepts","slug":"/concepts/key_concepts","permalink":"/docs/concepts/key_concepts","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"key_concepts","title":"Key Concepts"},"sidebar":"main","previous":{"title":"From Tutorial to Concepts","permalink":"/docs/getting_started/tutorial_to_concepts"},"next":{"title":"Concept Map","permalink":"/docs/concepts/concept_map"}}');var c=i(74848),r=i(28453),t=i(29030);const o={id:"key_concepts",title:"Key Concepts"},l="Key concepts",a={},d=[{value:"Packages",id:"packages",level:3},{value:"Cells",id:"cells",level:3},{value:"Projects",id:"projects",level:3},{value:"Buck2&#39;s dependency graph",id:"buck2s-dependency-graph",level:3},{value:"Multiple Buck2 projects in a single repository",id:"multiple-buck2-projects-in-a-single-repository",level:3},{value:"See also",id:"see-also",level:3}];function h(e){const n={a:"a",code:"code",em:"em",h1:"h1",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(n.header,{children:(0,c.jsx)(n.h1,{id:"key-concepts",children:"Key concepts"})}),"\n",(0,c.jsx)(n.p,{children:"Buck2 has a number of fundamental concepts:"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["A ",(0,c.jsx)(n.a,{href:"/docs/concepts/build_rule",children:(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.em,{children:"build rule"})})})," describes how to produce an output file\nfrom a set of input files. Most build rules are specific to a particular\nlanguage or platform. For example, you would use the\n",(0,c.jsx)(n.a,{href:"../../prelude/rules/cxx/cxx_binary",children:(0,c.jsx)(n.code,{children:"cxx_binary"})})," rule to create a C++\nbinary, but you would use the\n",(0,c.jsx)(n.a,{href:"../../prelude/rules/android/android_binary",children:(0,c.jsx)(n.code,{children:"android_binary"})})," rule to create\nan Android APK."]}),"\n",(0,c.jsxs)(n.li,{children:["A ",(0,c.jsx)(n.a,{href:"/docs/concepts/build_target",children:(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.em,{children:"build target"})})})," is a string that uniquely identifies a\nbuild rule. It can be thought of as a URI for the build rule within the Buck2\nproject."]}),"\n",(0,c.jsxs)(n.li,{children:["A ",(0,c.jsx)(n.a,{href:"/docs/concepts/build_rule",children:(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.em,{children:"build file"})})})," defines one or more build rules. In Buck2,\nbuild files are typically named ",(0,c.jsx)(n.code,{children:"BUCK"}),". A ",(0,c.jsx)(n.code,{children:"BUCK"})," file is analogous to the\n",(0,c.jsx)(n.code,{children:"Makefile"})," used by the Make utility. In your project, you will usually have a\nseparate ",(0,c.jsx)(n.code,{children:"BUCK"})," file for each buildable unit of software\u2014such as a binary or\nlibrary. For large projects, you could have hundreds of ",(0,c.jsx)(n.code,{children:"BUCK"})," files."]}),"\n"]}),"\n",(0,c.jsx)(n.h3,{id:"packages",children:"Packages"}),"\n",(0,c.jsxs)(n.p,{children:["A Buck2 ",(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.em,{children:"package"})})," is defined by:"]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["A Buck2 build file (a ",(0,c.jsx)(n.code,{children:"BUCK"})," file) that marks the root of the package"]}),"\n",(0,c.jsxs)(n.li,{children:["All files in the same directory as this ",(0,c.jsx)(n.code,{children:"BUCK"})," file"]}),"\n",(0,c.jsxs)(n.li,{children:["All files in subdirectories, ",(0,c.jsx)(n.em,{children:"unless"})," those subdirectories contain their own\n",(0,c.jsx)(n.code,{children:"BUCK"})," files"]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["In other words, Buck2 packages are hierarchical and non-overlapping: Each ",(0,c.jsx)(n.code,{children:"BUCK"}),"\nfile creates a new package boundary. A package does not include subdirectories\nthat contain their own ",(0,c.jsx)(n.code,{children:"BUCK"})," files. Those subdirectories with ",(0,c.jsx)(n.code,{children:"BUCK"})," files\nbecome roots of their own separate packages."]}),"\n",(0,c.jsxs)(n.p,{children:["For example, in the following diagram, the BUCK file in directory ",(0,c.jsx)(n.code,{children:"app-dir-1"}),"\ndefines that directory as the root of a package\u2014which is labeled ",(0,c.jsx)(n.strong,{children:"Package A"}),"\nin the diagram. The directory ",(0,c.jsx)(n.code,{children:"app-dir-2"})," is part of Package A because it is a\nsubdirectory of ",(0,c.jsx)(n.code,{children:"app-dir-1"}),", but does not itself contain a BUCK file. Now,\nconsider directory ",(0,c.jsx)(n.code,{children:"app-dir-3"}),". Because ",(0,c.jsx)(n.code,{children:"app-dir-3"})," contains a BUCK file it is\nthe root of a new package (",(0,c.jsx)(n.strong,{children:"Package B"}),"). Although ",(0,c.jsx)(n.code,{children:"app-dir-3"})," is a\nsubdirectory of ",(0,c.jsx)(n.code,{children:"app-dir-1"}),", it is ",(0,c.jsx)(n.em,{children:"not"})," part of Package A."]}),"\n",(0,c.jsx)("img",{src:(0,t.default)("/img/packages-1.png"),alt:"justifyContent"}),"\n",(0,c.jsx)(n.h3,{id:"cells",children:"Cells"}),"\n",(0,c.jsxs)(n.p,{children:["A Buck2 ",(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.em,{children:"cell"})})," is:"]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:"A directory tree containing one or more Buck2 packages"}),"\n",(0,c.jsxs)(n.li,{children:["Configured by a ",(0,c.jsx)(n.a,{href:"/docs/concepts/buckconfig",children:(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.code,{children:".buckconfig"})})})," file at ",(0,c.jsx)(n.strong,{children:"its root"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"[cells]\ncell_name = path_to_cell\n...\n"})}),"\n"]}),"\n",(0,c.jsx)(n.li,{children:"Often (but not necessarily) corresponding to a repository"}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["Note that although the cell root should contain a ",(0,c.jsx)(n.code,{children:".buckconfig"}),", the presence of\na ",(0,c.jsx)(n.code,{children:".buckconfig"})," file doesn't in itself define a cell. Rather, ",(0,c.jsx)(n.em,{children:"the cells\ninvolved in a build are defined at the time Buck2 is invoked"}),"; they are\nspecified in the ",(0,c.jsx)(n.code,{children:".buckconfig"})," for the Buck2 ",(0,c.jsx)(n.em,{children:"project"})," (see below)."]}),"\n",(0,c.jsx)(n.h3,{id:"projects",children:"Projects"}),"\n",(0,c.jsxs)(n.p,{children:["A Buck2 ",(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.em,{children:"project"})})," is:"]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:"The entry point for Buck2 builds"}),"\n",(0,c.jsxs)(n.li,{children:["Defined by the ",(0,c.jsx)(n.code,{children:".buckconfig"})," file in the directory where Buck2 is invoked (or\nin the nearest ancestor directory),"]}),"\n",(0,c.jsx)(n.li,{children:"The container that specifies which cells are part of the build"}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.em,{children:"How cells and projects relate."})})," The project's ",(0,c.jsx)(n.code,{children:".buckconfig"})," specifies all\ncells in the ",(0,c.jsx)(n.a,{href:"/docs/concepts/buckconfig#cells",children:"cells"})," section. The directory containing the\nproject's ",(0,c.jsx)(n.code,{children:".buckconfig"})," is automatically considered a cell. While not required,\nit's good practice to explicitly list the project cell in the configuration."]}),"\n",(0,c.jsx)(n.h3,{id:"buck2s-dependency-graph",children:"Buck2's dependency graph"}),"\n",(0,c.jsxs)(n.p,{children:["Every build rule can have zero or more dependencies. You can specify these\ndependencies using, for example, the ",(0,c.jsx)(n.code,{children:"deps"})," argument to the build rule. For more\ninformation about specifying dependencies, consult the reference page for the\nbuild rule you are using. These dependencies form a directed graph, called the\n",(0,c.jsx)(n.em,{children:"target graph"}),'. Buck2 requires the graph to be acyclic. When building the output\nof a build rule, all of the rule\'s transitive dependencies are built first. This\nmeans that the graph is built in a "bottom-up" fashion. A build rule knows only\nwhich rules it depends on, not which rules depend on it. This makes the graph\neasier to reason about and enables Buck2 to identify independent subgraphs that\ncan be built in parallel. It also enables Buck2 to determine the minimal set of\nbuild targets that need to be rebuilt.']}),"\n",(0,c.jsx)(n.h3,{id:"multiple-buck2-projects-in-a-single-repository",children:"Multiple Buck2 projects in a single repository"}),"\n",(0,c.jsxs)(n.p,{children:["Buck2 is designed to build multiple deliverables from a single repository\u2014that\nis, a ",(0,c.jsx)(n.em,{children:"monorepo"}),"\u2014rather than from multiple repositories. Support for the\nmonorepo design motivated Buck2's support for cells and projects. It is\nFacebook's experience that maintaining all dependencies in the same repository\nmakes it easier to ensure that all developers have the correct version of the\ncode and simplifies the process of making atomic commits."]}),"\n",(0,c.jsx)(n.h3,{id:"see-also",children:"See also"}),"\n",(0,c.jsxs)(n.p,{children:["Take a look at the ",(0,c.jsx)(n.a,{href:"/docs/concepts/concept_map",children:"Concept Map"})," for a visualization of how\nBuck2 concepts interact with each other. Also see the ",(0,c.jsx)(n.a,{href:"/docs/concepts/glossary",children:"Glossary"}),"."]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(h,{...e})}):h(e)}}}]);