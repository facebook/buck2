"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[53077],{28453:(e,s,n)=>{n.d(s,{R:()=>l,x:()=>o});var i=n(96540);const r={},t=i.createContext(r);function l(e){const s=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(t.Provider,{value:s},e.children)}},83054:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"prelude/rules/cxx/cxx_precompiled_header","title":"cxx_precompiled_header","description":"A cxxprecompiledheader rule specifies a single header file that can be precompiled and made available for use in other build rules such as a cxxlibrary() or a cxxbinary().","source":"@site/../docs/prelude/rules/cxx/cxx_precompiled_header.md","sourceDirName":"prelude/rules/cxx","slug":"/prelude/rules/cxx/cxx_precompiled_header","permalink":"/docs/prelude/rules/cxx/cxx_precompiled_header","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"ruleSidebar","previous":{"title":"cxx_library","permalink":"/docs/prelude/rules/cxx/cxx_library"},"next":{"title":"cxx_test","permalink":"/docs/prelude/rules/cxx/cxx_test"}}');var r=n(74848),t=n(28453);n(56289);const l={},o="cxx_precompiled_header",d={},a=[{value:"Details",id:"details",level:3},{value:"Function Signature",id:"function-signature",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Examples",id:"examples",level:3}];function c(e){const s={a:"a",code:"code",em:"em",h1:"h1",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"cxx_precompiled_header",children:"cxx_precompiled_header"})}),"\n",(0,r.jsxs)(s.p,{children:["A ",(0,r.jsx)(s.code,{children:"cxx_precompiled_header"})," rule specifies a single header file that can be precompiled and made available for use in other build rules such as a ",(0,r.jsx)(s.code,{children:"cxx_library()"})," or a ",(0,r.jsx)(s.code,{children:"cxx_binary()"}),"."]}),"\n",(0,r.jsx)(s.h3,{id:"details",children:"Details"}),"\n",(0,r.jsxs)(s.p,{children:["This header file is precompiled by the preprocessor on behalf of the\nC, C++, Objective-C, or Objective-C++ rule using it, via its ",(0,r.jsx)(s.code,{children:"precompiled_header"})," parameter.\nAfterwards the precompiled header is applied during the rule's own compilation\n(often with an appreciable reduction in build time, the main benefit of PCH)."]}),"\n",(0,r.jsxs)(s.p,{children:['This PCH is built once per combination of build flags which might affect the PCH\'s compatibility.\nFor example, a distinct pre-compilation of the header occurs per combination of flags related to\noptimization, debug, architecture, and so on, used by rules which employ PCH.\nThe flags used during the build of the dependent rule (that is, the "PCH-using rule")\nare in effect while building the PCH itself. Similarly, to the same end, the include paths used\nwhen building the PCH are applied to the dependent rule. For example, ',(0,r.jsx)(s.code,{children:"deps"})," in the\nPCH rule are propagated back to the dependent rule, and the PCH's header search paths\n(e.g. ",(0,r.jsx)(s.code,{children:"-I"})," or ",(0,r.jsx)(s.code,{children:"-isystem"})," options) are prefixed onto the list of\ninclude paths for the dependent rule."]}),"\n",(0,r.jsx)(s.h3,{id:"function-signature",children:"Function Signature"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'def cxx_precompiled_header(\n    *,\n    name: str,\n    default_target_platform: None | str = None,\n    target_compatible_with: list[str] = [],\n    compatible_with: list[str] = [],\n    exec_compatible_with: list[str] = [],\n    visibility: list[str] = [],\n    within_view: list[str] = ["PUBLIC"],\n    metadata: OpaqueMetadata = {},\n    tests: list[str] = [],\n    modifiers: OpaqueMetadata = [],\n    _apple_platforms: dict[str, str] = {},\n    _create_third_party_build_root: str = "prelude//third-party/tools:create_build",\n    _cxx_hacks: str = "prelude//cxx/tools:cxx_hacks",\n    _cxx_toolchain: str = "gh_facebook_buck2_shims_meta//:cxx",\n    _is_building_android_binary: bool = select({"prelude//os:building_android_binary": True, "DEFAULT": False}),\n    _meta_apple_library_validation_enabled: bool = False,\n    allow_cache_upload: None | bool = None,\n    archive_allow_cache_upload: bool = False,\n    auto_link_groups: bool = False,\n    bridging_header: None | str = None,\n    can_be_asset: None | bool = None,\n    compile_pch_file: bool = False,\n    compiler_flags: list[str] = [],\n    contacts: list[str] = [],\n    coverage_instrumentation_compiler_flags: list[str] = [],\n    cuda_compile_style: str = "mono",\n    cxx_runtime_type: None | str = None,\n    default_host_platform: None | str = None,\n    default_platform: None | str = None,\n    defaults: dict[str, str] = {},\n    deffile: None | str = None,\n    deps: list[str] = [],\n    deps_query: None | str = None,\n    devirt_enabled: bool = False,\n    diagnostics: dict[str, str] = {},\n    executable_name: None | str = None,\n    export_header_unit: None | str = None,\n    export_header_unit_filter: list[str] = [],\n    exported_deps: list[str] = [],\n    exported_header_style: str = "local",\n    exported_headers: list[str] | dict[str, str] = [],\n    exported_lang_platform_preprocessor_flags: dict[str, list[(str, list[str])]] = {},\n    exported_lang_preprocessor_flags: dict[str, list[str]] = {},\n    exported_linker_flags: list[str] = [],\n    exported_needs_coverage_instrumentation: bool = False,\n    exported_platform_deps: list[(str, list[str])] = [],\n    exported_platform_headers: list[(str, list[str] | dict[str, str])] = [],\n    exported_platform_linker_flags: list[(str, list[str])] = [],\n    exported_platform_preprocessor_flags: list[(str, list[str])] = [],\n    exported_post_linker_flags: list[str] = [],\n    exported_post_platform_linker_flags: list[(str, list[str])] = [],\n    exported_preprocessor_flags: list[str] = [],\n    extra_dwp_flags: list[str] = [],\n    extra_xcode_files: list[str] = [],\n    extra_xcode_sources: list[str] = [],\n    fat_lto: bool = False,\n    focused_list_target: None | str = None,\n    force_static: None | bool = None,\n    frameworks: list[str] = [],\n    header_mode: None | str = None,\n    header_namespace: None | str = None,\n    headers: list[str] | dict[str, str] = [],\n    headers_as_raw_headers_mode: None | str = None,\n    include_directories: list[str] = [],\n    include_in_android_merge_map_output: bool = True,\n    labels: list[str] = [],\n    lang_compiler_flags: dict[str, list[str]] = {},\n    lang_platform_compiler_flags: dict[str, list[(str, list[str])]] = {},\n    lang_platform_preprocessor_flags: dict[str, list[(str, list[str])]] = {},\n    lang_preprocessor_flags: dict[str, list[str]] = {},\n    libraries: list[str] = [],\n    licenses: list[str] = [],\n    link_deps_query_whole: bool = False,\n    link_execution_preference: None | str = None,\n    link_group: None | str = None,\n    link_group_map: None | str | list[(str, list[(None | str | list[None | str], str, None | str | list[str], None | str)], None | dict[str, typing.Any])] = None,\n    link_ordering: None | str = None,\n    link_style: None | str = None,\n    link_whole: None | bool = None,\n    linker_extra_outputs: list[str] = [],\n    linker_flags: list[str] = [],\n    local_linker_flags: list[str] = [],\n    module_name: None | str = None,\n    pch_clanguage: None | str = None,\n    platform_compiler_flags: list[(str, list[str])] = [],\n    platform_deps: list[(str, list[str])] = [],\n    platform_headers: list[(str, list[str] | dict[str, str])] = [],\n    platform_linker_flags: list[(str, list[str])] = [],\n    platform_preprocessor_flags: list[(str, list[str])] = [],\n    platform_srcs: list[(str, list[str | (str, list[str])])] = [],\n    post_linker_flags: list[str] = [],\n    post_platform_linker_flags: list[(str, list[str])] = [],\n    precompiled_header: None | str = None,\n    prefer_stripped_objects: bool = False,\n    preferred_linkage: str = "any",\n    prefix_header: None | str = None,\n    preprocessor_flags: list[str] = [],\n    public_include_directories: list[str] = [],\n    public_system_include_directories: list[str] = [],\n    raw_headers: list[str] = [],\n    raw_headers_as_headers_mode: None | str = None,\n    reexport_all_header_dependencies: None | bool = None,\n    resources: list[str] | dict[str, str] = [],\n    sdk_modules: list[str] = [],\n    separate_debug_info: bool = False,\n    soname: None | str = None,\n    src: str,\n    srcs: list[str | (str, list[str])] = [],\n    static_library_basename: None | str = None,\n    stub: bool = False,\n    supported_platforms_regex: None | str = None,\n    supports_header_symlink_subtarget: bool = False,\n    supports_merged_linking: None | bool = None,\n    supports_python_dlopen: None | bool = None,\n    supports_shlib_interfaces: bool = True,\n    supports_stripping: bool = True,\n    thin_lto: bool = False,\n    third_party_project: None | str = None,\n    use_archive: None | bool = None,\n    use_content_based_paths: bool = True,\n    use_fbcc_rust_wrapper: bool = False,\n    use_header_units: bool = False,\n    used_by_wrap_script: bool = False,\n    uses_cxx_explicit_modules: bool = False,\n    uses_explicit_modules: bool = False,\n    version: None | str = None,\n    version_universe: None | str = None,\n    weak_framework_names: list[str] = [],\n) -> None\n'})}),"\n",(0,r.jsx)(s.h3,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"name"}),": (required)"]}),"\n",(0,r.jsx)(s.p,{children:"name of the target"}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"default_target_platform"}),": (defaults to: ",(0,r.jsx)(s.code,{children:"None"}),")"]}),"\n",(0,r.jsx)(s.p,{children:"specifies the default target platform, used when no platforms are specified on the command line"}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"target_compatible_with"}),": (defaults to: ",(0,r.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,r.jsx)(s.p,{children:"a list of constraints that are required to be satisfied for this target to be compatible with a configuration"}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"compatible_with"}),": (defaults to: ",(0,r.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,r.jsx)(s.p,{children:"a list of constraints that are required to be satisfied for this target to be compatible with a configuration"}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"exec_compatible_with"}),": (defaults to: ",(0,r.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,r.jsx)(s.p,{children:"a list of constraints that are required to be satisfied for this target to be compatible with an execution platform"}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"visibility"}),": (defaults to: ",(0,r.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,r.jsx)(s.p,{children:"a list of visibility patterns restricting what targets can depend on this one"}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"within_view"}),": (defaults to: ",(0,r.jsx)(s.code,{children:'["PUBLIC"]'}),")"]}),"\n",(0,r.jsx)(s.p,{children:"a list of visibility patterns restricting what this target can depend on"}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"metadata"}),": (defaults to: ",(0,r.jsx)(s.code,{children:"{}"}),")"]}),"\n",(0,r.jsx)(s.p,{children:"a key-value map of metadata associated with this target"}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"tests"}),": (defaults to: ",(0,r.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,r.jsx)(s.p,{children:"a list of targets that provide tests for this one"}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"modifiers"}),": (defaults to: ",(0,r.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,r.jsx)(s.p,{children:"an array of modifiers associated with this target"}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"allow_cache_upload"}),": (defaults to: ",(0,r.jsx)(s.code,{children:"None"}),")"]}),"\n",(0,r.jsx)(s.p,{children:"Whether to allow uploading the output of this rule to be uploaded to cache when the action is executed locally if the configuration allows (i.e. there is a cache configured and the client has permission to write to it)."}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"compile_pch_file"}),": (defaults to: ",(0,r.jsx)(s.code,{children:"False"}),")"]}),"\n",(0,r.jsx)(s.p,{children:"Whether to compile the precompiled header file or use legacy mode."}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"compiler_flags"}),": (defaults to: ",(0,r.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,r.jsx)(s.p,{children:"Flags to use when compiling any of the above sources (which require compilation)."}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"contacts"}),": (defaults to: ",(0,r.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,r.jsx)(s.p,{children:"A list of organizational contacts for this rule. These could be individuals who you would contact in the event of a failure or other issue with the rule."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{children:"contacts = [ 'Joe Sixpack', 'Erika Mustermann' ]\n"})}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"deffile"}),": (defaults to: ",(0,r.jsx)(s.code,{children:"None"}),")"]}),"\n",(0,r.jsxs)(s.p,{children:["Specifies the *.def file used on windows to modify a dll's exports in place of explicit ",(0,r.jsx)(s.code,{children:"__declspec(dllexport)"})," declarations. The default is to not use a defile."]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"export_header_unit"}),": (defaults to: ",(0,r.jsx)(s.code,{children:"None"}),")"]}),"\n",(0,r.jsx)(s.p,{children:"If not None, export a C++20 header unit visible to dependants (including recursively) with use_header_units set to True."}),"\n",(0,r.jsx)(s.p,{children:'"include": replace includes of each file in exported_headers or\nraw_headers with an import of the precompiled header unit; files\nthat do not include any of those headers do not load the header\nunit.'}),"\n",(0,r.jsx)(s.p,{children:'"preload": automatically load the precompiled header unit in any\ndependant that uses header units.'}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"export_header_unit_filter"}),": (defaults to: ",(0,r.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,r.jsx)(s.p,{children:"A list of regexes. Each regex should match a set of headers in exported_headers or raw_headers to be precompiled together into one C++20 header unit."}),"\n",(0,r.jsx)(s.p,{children:'When used with export_header_unit="include", this allows different\nsubsets of headers to be loaded only by files that use them. Each group\nshould only depend on headers in previous groups.'}),"\n",(0,r.jsx)(s.p,{children:'If a header is not matched by any group, it is not precompiled and will\nbe included textually. If no filter is specified, the rule excludes\ninline headers based on a name heuristics (e.g. "-inl.h").'}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"exported_deps"}),": (defaults to: ",(0,r.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,r.jsxs)(s.p,{children:["Dependencies that will also appear to belong to any rules that depend on this one. This has two effects: * Exported dependencies will also be included in the link line of dependents of this rules, but normal dependencies will not. * When ",(0,r.jsx)(s.code,{children:"reexport_all_header_dependencies = False"}),", only exported headers of the rules specified here are re-exported."]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"exported_header_style"}),": (defaults to: ",(0,r.jsx)(s.code,{children:'"local"'}),")"]}),"\n",(0,r.jsxs)(s.p,{children:["How dependents should include exported headers from this rule. Can be either ",(0,r.jsx)(s.code,{children:"local"})," (e.g. ",(0,r.jsx)(s.code,{children:"-I"}),") or ",(0,r.jsx)(s.code,{children:"system"})," (e.g. ",(0,r.jsx)(s.code,{children:"-isystem"}),")."]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"exported_headers"}),": (defaults to: ",(0,r.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,r.jsxs)(s.p,{children:["The set of header files that are made available for inclusion to the source files in the target and all targets that transitively depend on it. These should be specified as either a list of header files or a dictionary of header names to header files. The headers can be included with ",(0,r.jsx)(s.code,{children:'#include "$HEADER_NAMESPACE/$HEADER_NAME"'})," or ",(0,r.jsx)(s.code,{children:"#include <$HEADER_NAMESPACE/$HEADER_NAME>"}),", where ",(0,r.jsx)(s.code,{children:"$HEADER_NAMESPACE"})," is the value of the target's ",(0,r.jsx)(s.code,{children:"header_namespace"})," attribute, and ",(0,r.jsx)(s.code,{children:"$HEADER_NAME"})," is the header name if specified, and the filename of the header file otherwise. Note that the header name can contain forward slashes (",(0,r.jsx)(s.code,{children:"/"}),"). See ",(0,r.jsx)(s.code,{children:"header_namespace"})," for more information."]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"exported_lang_platform_preprocessor_flags"}),": (defaults to: ",(0,r.jsx)(s.code,{children:"{}"}),")"]}),"\n",(0,r.jsxs)(s.p,{children:["Just as ",(0,r.jsx)(s.code,{children:"lang_platform_preprocessor_flags"}),", but these flags also apply to rules that transitively depend on this rule."]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"exported_lang_preprocessor_flags"}),": (defaults to: ",(0,r.jsx)(s.code,{children:"{}"}),")"]}),"\n",(0,r.jsxs)(s.p,{children:["Just as ",(0,r.jsx)(s.code,{children:"lang_preprocessor_flags"}),", but these flags also apply to rules that transitively depend on this rule."]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"exported_linker_flags"}),": (defaults to: ",(0,r.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,r.jsx)(s.p,{children:"Flags to add to the linker command line when the output from this rule, or the output from any rule that transitively depends on this rule, is used in a link operation."}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"exported_platform_deps"}),": (defaults to: ",(0,r.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,r.jsxs)(s.p,{children:["Platform specific dependencies that will also appear to belong to any rules that depend on this one. These should be specified as a list of pairs where the first element is an un-anchored regex (in java.util.regex.Pattern syntax) against which the platform name is matched, and the second element is a list of external dependencies (same format as ",(0,r.jsx)(s.code,{children:"exported_deps"}),") that are exported if the platform matches the regex. See ",(0,r.jsx)(s.code,{children:"exported_deps"})," for more information."]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"exported_platform_headers"}),": (defaults to: ",(0,r.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,r.jsxs)(s.p,{children:["Platform specific header files. These should be specified as a list of pairs where the first element is an un-anchored regex (in java.util.regex.Pattern syntax) against which the platform name is matched, and the second element is either a list of header files or a dictionary of header names to header files that will be made available for inclusion to the source files in the target and all targets that transitively depend on it if the platform matches the regex. See ",(0,r.jsx)(s.code,{children:"headers"})," for more information."]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"exported_platform_linker_flags"}),": (defaults to: ",(0,r.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,r.jsxs)(s.p,{children:["Platform-specific linker flags for this rule and for all rules that transitively depend on this rule. This argument is specified as a list of pairs where the first element in each pair is an un-anchored regex against which the platform name is matched. The regex should use ",(0,r.jsx)(s.code,{children:"java.util.regex.Pattern"})," syntax. The second element in each pair is a list of linker flags. If the regex matches the platform, these flags are added to the linker command line when the output from this rule, or the output from any rule that transitively depends on this rule, is used in a link operation."]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"exported_platform_preprocessor_flags"}),": (defaults to: ",(0,r.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,r.jsxs)(s.p,{children:["Platform specific exported preprocessor flags. These should be specified as a list of pairs where the first element is an un-anchored regex (in java.util.regex.Pattern syntax) against which the platform name is matched, and the second element is a list of flags to use when preprocessing the source files in the target and all targets that transitively depend on it if the platform matches the regex. See ",(0,r.jsx)(s.code,{children:"exported_preprocessor_flags"})," for more information."]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"exported_post_linker_flags"}),": (defaults to: ",(0,r.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,r.jsxs)(s.p,{children:["Flags to add to the linker command line when the output from this rule, or the output from any rule that transitively depends on this rule, is used in a link operation\u2014with the additional feature that these flags are guaranteed to be placed ",(0,r.jsx)(s.em,{children:"after"})," the compiled object (",(0,r.jsx)(s.code,{children:".o"}),") files on the linker command line."]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"exported_post_platform_linker_flags"}),": (defaults to: ",(0,r.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,r.jsxs)(s.p,{children:["Platform-specific linker flags for this rule and for all rules that transitively depend on this rule\u2014and that are guaranteed to be placed ",(0,r.jsx)(s.em,{children:"after"})," the compiled object (",(0,r.jsx)(s.code,{children:".o"}),") files on the linker command line. In other respects, the syntax and semantics of this argument are the same as for the ",(0,r.jsx)(s.code,{children:"exported_platform_linker_flags"})," argument."]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"extra_xcode_files"}),": (defaults to: ",(0,r.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,r.jsx)(s.p,{children:'When the project is generated, this is the list of files that will added to the project. Those files won\'t be added to the build phase "Compile Sources".'}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"extra_xcode_sources"}),": (defaults to: ",(0,r.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,r.jsx)(s.p,{children:'When the project is generated, this is the list of files that will added to the build phase "Compile Sources" of the given target.'}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"header_namespace"}),": (defaults to: ",(0,r.jsx)(s.code,{children:"None"}),")"]}),"\n",(0,r.jsxs)(s.p,{children:["A path prefix when including headers of this target. Defaults to the path from the root of the repository to the directory where this target is defined. Can contain forward slashes (",(0,r.jsx)(s.code,{children:"/"}),"), but cannot start with one. See ",(0,r.jsx)(s.code,{children:"headers"})," for more information."]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"headers"}),": (defaults to: ",(0,r.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,r.jsxs)(s.p,{children:["The set of header files that are made available for inclusion to the source files in this target. These should be specified as either a list of header files or a dictionary of header names to header files. The header name can contain forward slashes (",(0,r.jsx)(s.code,{children:"/"}),"). The headers can be included with ",(0,r.jsx)(s.code,{children:'#include "$HEADER_NAMESPACE/$HEADER_NAME"'})," or ",(0,r.jsx)(s.code,{children:"#include <$HEADER_NAMESPACE/$HEADER_NAME>"})," , where ",(0,r.jsx)(s.code,{children:"$HEADER_NAMESPACE"})," is the value of the target's ",(0,r.jsx)(s.code,{children:"header_namespace"}),"  attribute, and ",(0,r.jsx)(s.code,{children:"$HEADER_NAME"})," is the header name if specified, and the filename of the header file otherwise. See ",(0,r.jsx)(s.code,{children:"header_namespace"})," for more information."]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"include_directories"}),": (defaults to: ",(0,r.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,r.jsxs)(s.p,{children:["A list of include directories (with ",(0,r.jsx)(s.code,{children:"raw_headers"}),") to be added to the compile command for compiling this target (via ",(0,r.jsx)(s.code,{children:"-I"}),"). An include directory is relative to the current package."]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"labels"}),": (defaults to: ",(0,r.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,r.jsxs)(s.p,{children:["Set of arbitrary strings which allow you to annotate a ",(0,r.jsx)(s.a,{href:"https://buck2.build/docs/concepts/build_rule/",children:"build rule"})," with tags that can be searched for over an entire dependency tree using ",(0,r.jsx)(s.code,{children:"buck query()"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"lang_compiler_flags"}),": (defaults to: ",(0,r.jsx)(s.code,{children:"{}"}),")"]}),"\n",(0,r.jsxs)(s.p,{children:["Language-specific compiler flags. These should be specified as a map of C-family language short names to lists of flags and is used to target flags to sources files for a specific language in the C-family (C, C++, assembler, etc.). The keys in the map can be: * ",(0,r.jsx)(s.code,{children:"cpp-output"})," for C * ",(0,r.jsx)(s.code,{children:"c++-cpp-output"})," for C++ * ",(0,r.jsx)(s.code,{children:"objective-c-cpp-output"})," for Objective-C * ",(0,r.jsx)(s.code,{children:"objective-c++-cpp-output"})," for Objective-C++ * ",(0,r.jsx)(s.code,{children:"cuda-cpp-output"})," for Cuda * ",(0,r.jsx)(s.code,{children:"assembler"})," for Assembly * ",(0,r.jsx)(s.code,{children:"asm"})," for ASM"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"lang_platform_compiler_flags"}),": (defaults to: ",(0,r.jsx)(s.code,{children:"{}"}),")"]}),"\n",(0,r.jsxs)(s.p,{children:["Language- and platform-specific compiler flags. These should be specified as a map of C-family language short names, as described in ",(0,r.jsx)(s.code,{children:"lang_compiler_flags"}),", to lists of pairs, as described in ",(0,r.jsx)(s.code,{children:"platform_compiler_flags"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"lang_platform_preprocessor_flags"}),": (defaults to: ",(0,r.jsx)(s.code,{children:"{}"}),")"]}),"\n",(0,r.jsxs)(s.p,{children:["Language- and platform-specific preprocessor flags. These should be specified as a map of C-family language short names, as described in ",(0,r.jsx)(s.code,{children:"lang_preprocessor_flags"}),", to lists of pairs, as described in ",(0,r.jsx)(s.code,{children:"platform_preprocessor_flags"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"lang_preprocessor_flags"}),": (defaults to: ",(0,r.jsx)(s.code,{children:"{}"}),")"]}),"\n",(0,r.jsxs)(s.p,{children:["Language-specific preprocessor flags. These should be specified as a map of C-family language short names to lists of flags and is used to target flags to sources files for a specific language in the C-family (C, C++, assembler, etc.). The keys in the map can be: * ",(0,r.jsx)(s.code,{children:"c"})," for C * ",(0,r.jsx)(s.code,{children:"c++"})," for C++ * ",(0,r.jsx)(s.code,{children:"objective-c"})," for Objective-C * ",(0,r.jsx)(s.code,{children:"objective-c++"})," for Objective-C++ * ",(0,r.jsx)(s.code,{children:"cuda"})," for Cuda * ",(0,r.jsx)(s.code,{children:"assembler-with-cpp"})," for Assembly * ",(0,r.jsx)(s.code,{children:"asm-with-cpp"})," for ASM"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"licenses"}),": (defaults to: ",(0,r.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,r.jsxs)(s.p,{children:["Set of license files for this library. To get the list of license files for a given build rule and all of its dependencies, you can use ",(0,r.jsx)(s.a,{href:"https://buck2.build/docs/users/commands/query/",children:"buck query"})]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"link_execution_preference"}),": (defaults to: ",(0,r.jsx)(s.code,{children:"None"}),")"]}),"\n",(0,r.jsx)(s.p,{children:"The execution preference for linking. Options are:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"any : No preference is set, and the link action will be performed based on buck2's executor configuration."}),"\n",(0,r.jsx)(s.li,{children:"full_hybrid : The link action will execute both locally and remotely, regardless of buck2's executor configuration (if\nthe executor is capable of hybrid execution). The use_limited_hybrid setting of the hybrid executor is ignored."}),"\n",(0,r.jsx)(s.li,{children:"local : The link action will execute locally if compatible on current host platform."}),"\n",(0,r.jsx)(s.li,{children:"local_only : The link action will execute locally, and error if the current platform is not compatible."}),"\n",(0,r.jsx)(s.li,{children:"remote : The link action will execute remotely if a compatible remote platform exists, otherwise locally."}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:"The default is None, expressing that no preference has been set on the target itself."}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"link_style"}),": (defaults to: ",(0,r.jsx)(s.code,{children:"None"}),")"]}),"\n",(0,r.jsxs)(s.p,{children:["Determines whether to build and link this rule's dependencies statically or dynamically. Can be either ",(0,r.jsx)(s.code,{children:"static"}),", ",(0,r.jsx)(s.code,{children:"static_pic"})," or ",(0,r.jsx)(s.code,{children:"shared"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"linker_extra_outputs"}),": (defaults to: ",(0,r.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,r.jsxs)(s.p,{children:["Declares extra outputs that the linker emits. These identifiers can be used in ",(0,r.jsx)(s.code,{children:"$(output ...)"})," macros in ",(0,r.jsx)(s.code,{children:"linker_flags"})," to interpolate the output path into the linker command line. Useful for custom linkers that emit extra output files."]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"linker_flags"}),": (defaults to: ",(0,r.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,r.jsx)(s.p,{children:"Flags to add to the linker command line whenever the output from this rule is used in a link operation, such as linked into an executable or a shared library."}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"local_linker_flags"}),": (defaults to: ",(0,r.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,r.jsxs)(s.p,{children:["Flags to add to the linker command line whenever the output from this rule is used in a link operation ",(0,r.jsx)(s.em,{children:"driven by this rule"})," (e.g. when this rule links a shared library, but ",(0,r.jsx)(s.em,{children:"not"})," when the output is linked into a shared library by another rule's link group links)."]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"pch_clanguage"}),": (defaults to: ",(0,r.jsx)(s.code,{children:"None"}),")"]}),"\n",(0,r.jsx)(s.p,{children:"The c-language extension to use for the precompiled header. Eg. .c, .cpp, .m, .mm, etc."}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"platform_compiler_flags"}),": (defaults to: ",(0,r.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,r.jsxs)(s.p,{children:["Platform specific compiler flags. These should be specified as a list of pairs where the first element is an un-anchored regex (in java.util.regex.Pattern syntax) against which the platform name is matched, and the second element is a list of flags to use when compiling the target's sources. See ",(0,r.jsx)(s.code,{children:"compiler_flags"})," for more information."]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"platform_headers"}),": (defaults to: ",(0,r.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,r.jsxs)(s.p,{children:["Platform specific header files. These should be specified as a list of pairs where the first element is an un-anchored regex (in java.util.regex.Pattern syntax) against which the platform name is matched, and the second element is either a list of header files or a dictionary of header names to header files that will be made available for inclusion to the source files in the target if the platform matches the regex. See ",(0,r.jsx)(s.code,{children:"headers"})," for more information."]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"platform_linker_flags"}),": (defaults to: ",(0,r.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,r.jsxs)(s.p,{children:["Platform-specific linker flags. This argument is specified as a list of pairs where the first element in each pair is an un-anchored regex against which the platform name is matched. The regex should use ",(0,r.jsx)(s.code,{children:"java.util.regex.Pattern"})," syntax. The second element in each pair is a list of linker flags. If the regex matches the platform, these flags are added to the linker command line when the output from this rule is used in a link operation."]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"platform_preprocessor_flags"}),": (defaults to: ",(0,r.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,r.jsxs)(s.p,{children:["Platform specific preprocessor flags. These should be specified as a list of pairs where the first element is an un-anchored regex (in java.util.regex.Pattern syntax) against which the platform name is matched, and the second element is a list of flags to use when preprocessing the target's sources. See ",(0,r.jsx)(s.code,{children:"preprocessor_flags"})," for more information."]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"platform_srcs"}),": (defaults to: ",(0,r.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,r.jsxs)(s.p,{children:["Platform specific source files. These should be specified as a list of pairs where the first element is an un-anchored regex (in java.util.regex.Pattern syntax) against which the platform name is matched, and the second element is either a list of source files or a list of tuples of source files and a list of compilation flags to be preprocessed, compiled and assembled if the platform matches the regex. See ",(0,r.jsx)(s.code,{children:"srcs"})," for more information."]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"preferred_linkage"}),": (defaults to: ",(0,r.jsx)(s.code,{children:'"any"'}),")"]}),"\n",(0,r.jsxs)(s.p,{children:["Determines what linkage is used when the library is depended on by another target. To control how the dependencies of this library are linked, use ",(0,r.jsx)(s.code,{children:"link_style"})," instead."]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"preprocessor_flags"}),": (defaults to: ",(0,r.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,r.jsx)(s.p,{children:"Flags to use when preprocessing any of the above sources (which require preprocessing)."}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"public_include_directories"}),": (defaults to: ",(0,r.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,r.jsxs)(s.p,{children:["A list of include directories (with ",(0,r.jsx)(s.code,{children:"raw_headers"}),") to be added to the compile command for compiling this target and every target that depends on it (via ",(0,r.jsx)(s.code,{children:"-I"}),"). An include directory is relative to the current package."]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"public_system_include_directories"}),": (defaults to: ",(0,r.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,r.jsxs)(s.p,{children:["A list of include directories (with ",(0,r.jsx)(s.code,{children:"raw_headers"}),") to be added to the compile command for compiling this target and every target that depends on it (via ",(0,r.jsx)(s.code,{children:"-isystem"})," if the compiler supports it of via ",(0,r.jsx)(s.code,{children:"-I"})," otherwise). An include directory is relative to the current package."]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"raw_headers"}),": (defaults to: ",(0,r.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,r.jsxs)(s.p,{children:["The set of header files that can be used for inclusion to the source files in the target and all targets that transitively depend on it. Buck doesn't add raw headers to the search path of a compiler/preprocessor automatically. ",(0,r.jsx)(s.code,{children:"include_directories"})," and ",(0,r.jsx)(s.code,{children:"public_include_directories"})," are the recommended way to add raw headers to the search path (they will be added via ",(0,r.jsx)(s.code,{children:"-I"}),"). ",(0,r.jsx)(s.code,{children:"compiler_flags"}),", ",(0,r.jsx)(s.code,{children:"preprocessor_flags"})," and ",(0,r.jsx)(s.code,{children:"exported_preprocessor_flags"})," can also be used to add such raw headers to the search path if inclusion via ",(0,r.jsx)(s.code,{children:"-isystem"})," or ",(0,r.jsx)(s.code,{children:"-iquote"})," is needed. ",(0,r.jsx)(s.code,{children:"raw_headers"})," cannot be used together with ",(0,r.jsx)(s.code,{children:"headers"})," or ",(0,r.jsx)(s.code,{children:"exported_headers"})," in the same target."]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"raw_headers_as_headers_mode"}),": (defaults to: ",(0,r.jsx)(s.code,{children:"None"}),")"]}),"\n",(0,r.jsx)(s.p,{children:"Controls whether raw_headers and *include_directories attributes should be automatically converted to headers and symlink trees and/or header maps via headers. Only has an effect if the cxx_toolchain has explicitly opted into supporting this behavior via a non-default value, even if the value is disabled."}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"reexport_all_header_dependencies"}),": (defaults to: ",(0,r.jsx)(s.code,{children:"None"}),")"]}),"\n",(0,r.jsx)(s.p,{children:"Whether to automatically re-export the exported headers of all dependencies."}),"\n",(0,r.jsxs)(s.p,{children:["When this is set to false, only exported headers from\n",(0,r.jsx)(s.code,{children:"exported_deps"})," are re-exported."]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"soname"}),": (defaults to: ",(0,r.jsx)(s.code,{children:"None"}),")"]}),"\n",(0,r.jsxs)(s.p,{children:['Sets the soname ("shared object name") of any shared library produced from this rule. The default value is based on the full rule name. The macro ',(0,r.jsx)(s.code,{children:"$(ext)"})," will be replaced with a platform-appropriate extension. An argument can be provided, which is a library version. For example ",(0,r.jsx)(s.code,{children:"soname = 'libfoo.$(ext 2.3)'"})," will be ",(0,r.jsx)(s.code,{children:"libfoo.2.3.dylib"})," on Mac and ",(0,r.jsx)(s.code,{children:"libfoo.so.2.3"})," on Linux."]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"src"}),": (required)"]}),"\n",(0,r.jsxs)(s.p,{children:["The path to the header file that should be precompiled. Only one header file can be specified. But of course this header could include any number of other headers. The included headers could belong to -- that is, be ",(0,r.jsx)(s.code,{children:"exported_headers"})," from -- another rule, in which case, the rule would have to be added to ",(0,r.jsx)(s.code,{children:"deps"})," as usual."]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"srcs"}),": (defaults to: ",(0,r.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,r.jsxs)(s.p,{children:["The set of C, C++, Objective-C, Objective-C++, or assembly source files to be preprocessed, compiled, and assembled by this rule. We determine which stages to run on each input source based on its file extension. See the ",(0,r.jsx)(s.a,{href:"https://gcc.gnu.org/onlinedocs/gcc/Overall-Options.html",children:"GCC documentation"})," for more detail on how file extensions are interpreted. Each element can be either a string specifying a source file (e.g. ",(0,r.jsx)(s.code,{children:"''"}),") or a tuple of a string specifying a source file and a list of compilation flags (e.g. ",(0,r.jsx)(s.code,{children:"('', ['-Wall', '-Werror'])"})," ). In the latter case the specified flags will be used in addition to the rule's other flags when preprocessing and compiling that file (if applicable)."]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"supported_platforms_regex"}),": (defaults to: ",(0,r.jsx)(s.code,{children:"None"}),")"]}),"\n",(0,r.jsx)(s.p,{children:"If present, an un-anchored regex (in java.util.regex.Pattern syntax) that matches all platforms that this library supports. It will not be built for other platforms."}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"supports_stripping"}),": (defaults to: ",(0,r.jsx)(s.code,{children:"True"}),")"]}),"\n",(0,r.jsxs)(s.p,{children:["Whether this rule supports stripping outputs via ",(0,r.jsx)(s.code,{children:"strip"})," command for exporting."]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"use_fbcc_rust_wrapper"}),": (defaults to: ",(0,r.jsx)(s.code,{children:"False"}),")"]}),"\n",(0,r.jsx)(s.p,{children:"Opt-in for the rust version of the fbcode C++ Compiler wrapper (replacing the existing fbcc.py)"}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"use_header_units"}),": (defaults to: ",(0,r.jsx)(s.code,{children:"False"}),")"]}),"\n",(0,r.jsx)(s.p,{children:"If True, makes any header unit exported by a dependency (including recursively) through export_header_unit available to the compiler. If false, the compilation ignores header units, regardless of what is exported by dependencies."}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"used_by_wrap_script"}),": (defaults to: ",(0,r.jsx)(s.code,{children:"False"}),")"]}),"\n",(0,r.jsxs)(s.p,{children:["When using an exopackage Android, if this parameter is set to ",(0,r.jsx)(s.code,{children:"True"}),", then the library is included in the primary APK even if native libraries would otherwise not be placed in it. This is intended for native libraries that are used by a ",(0,r.jsx)(s.a,{href:"https://developer.android.com/ndk/guides/wrap-script",children:"wrap.sh"})," script, which must be placed in the primary APK. Only one of ",(0,r.jsx)(s.code,{children:"can_be_asset"})," and ",(0,r.jsx)(s.code,{children:"used_by_wrap_script"})," can be set for a rule."]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"version"}),": (defaults to: ",(0,r.jsx)(s.code,{children:"None"}),")"]}),"\n",(0,r.jsx)(s.p,{children:"A string denoting a meaningful version of this rule that is optionally passed to the linker as extra metadata."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"examples",children:"Examples"}),"\n",(0,r.jsxs)(s.p,{children:["The best way to see how the ",(0,r.jsx)(s.code,{children:"cxx_precompiled_header()"})," rule works is with an\nexample. Let there be a header called ",(0,r.jsx)(s.code,{children:"common.h"})," which has the following:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:"\n#pragma once\n\n/* Include common C++ files. */\n#include <string>\n#include <map>\n#include <set>\n#include <type_traits>\n#include <vector>\n\n/* Some frequently-used headers from the Folly project. */\n#include <folly/Conv.h>\n#include <folly/Executor.h>\n#include <folly/io/async/EventBase.h>\n\n"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:"\ncxx_precompiled_header(\n  name = 'common_pch',\n  src = 'common.h',\n  deps = [\n    # Needed for standard C++ headers:\n    '//external/libcxx:headers',\n    # Needed for the Folly includes:\n    '//folly:folly',\n    '//folly/io/async:async',\n  ],\n)\n\ncxx_binary(\n  name = 'main',\n  srcs = ['main.cpp'],\n  precompiled_header = ':common_pch',\n  deps = [ ... ],\n  compiler_flags = ['-g', '-O2', '-fPIC'],\n)\n\n"})}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"cxx_precompiled_header"}),' rule declares a precompiled header "template"\ncontaining the header file path, and dependencies.\nIn this example we indicate that ',(0,r.jsx)(s.code,{children:"common.h"})," is to be precompiled when used by another build rule."]}),"\n",(0,r.jsxs)(s.p,{children:["Note that, by itself, this ",(0,r.jsx)(s.code,{children:"cxx_precompiled_header"})," rule will not result\nin anything being built. The ",(0,r.jsx)(s.em,{children:"usage"}),' of this rule from another rule --\nan "instantiation" of this precompiled header template -- is what will trigger the\nPCH build.']}),"\n",(0,r.jsxs)(s.p,{children:["In the example above, the build for the binary named ",(0,r.jsx)(s.code,{children:'"main"'})," will depend on\nthe header being precompiled in a separate step, prior to compiling ",(0,r.jsx)(s.code,{children:"main.cpp"}),",\nand the resulting PCH will be used in ",(0,r.jsx)(s.code,{children:"main"}),"'s compilation."]}),"\n",(0,r.jsxs)(s.p,{children:["The dependencies specified in this precompiled header rule's ",(0,r.jsx)(s.code,{children:"deps"})," are transitive; they\nwill propagate to rules using this PCH, so that during link time, any libraries which are\nrequired by the code made available in the header will be included in the final binary build."]}),"\n",(0,r.jsxs)(s.p,{children:['The precompiled header dynamically created from the "template" will be built with flags\nwhich would be used in the dependent rule. In this case, ',(0,r.jsx)(s.code,{children:"main"}),"'s use of specific\ncompiler flags ",(0,r.jsx)(s.code,{children:"-g -O2 -fPIC"})," will result in the production of a precompiled header\nwith the same flags. This is so the precompiled code fully jives with rules using the PCH,\ni.e. they will have the same debug, optimization, CPU, etc. options. (The compiler is usually\nsmart enough to reject a bad PCH, fortunately. But we want to ensure we take the appropriate\nsteps to ensure we ",(0,r.jsx)(s.em,{children:"always have"})," a PCH which works with any build that uses it.)"]}),"\n",(0,r.jsxs)(s.p,{children:["Another effect of a rule using a precompiled header is that the rule's list of\nbuild flags will change; not just to employ PCH with e.g. ",(0,r.jsx)(s.code,{children:"-include-pch"}),' (if using Clang), but also, to alter the sequence of header search paths.\nThe rule using the precompiled header will "inherit" the lists of paths used\nduring the PCH build, applying them ',(0,r.jsx)(s.em,{children:"first"})," in its own search paths.\nThis is to ensure that an ",(0,r.jsx)(s.code,{children:"#include"})," directive will resolve in exactly\nthe same way in this build as it would have in the PCH, to ensure full compatibility\nbetween the PCH and other rule's builds. For example, if the PCH were to use one version\nof ",(0,r.jsx)(s.code,{children:"stdcxx"})," and another rule use a different version, the version differences\nwon't clash, thereby avoiding different versions of the ",(0,r.jsx)(s.code,{children:"<cstring>"})," header\nused between the precompiled header and the dependent rule, and preventing confused\nstructure definitions, ABI incompatibility, and so on (catastrophe, in other words)."]})]})}function h(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);