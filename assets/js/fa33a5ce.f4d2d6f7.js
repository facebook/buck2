"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4716],{28453:(e,s,i)=>{i.d(s,{R:()=>n,x:()=>d});var t=i(96540);const o={},r=t.createContext(o);function n(e){const s=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function d(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:n(e.components),t.createElement(r.Provider,{value:s},e.children)}},82828:(e,s,i)=>{i.r(s),i.d(s,{assets:()=>c,contentTitle:()=>d,default:()=>f,frontMatter:()=>n,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"users/how_tos/modifiers_package","title":"Add configuration modifiers to entire directories","description":"Modifiers can be set in PACKAGE files using","source":"@site/../docs/users/how_tos/modifiers_package.md","sourceDirName":"users/how_tos","slug":"/users/how_tos/modifiers_package","permalink":"/docs/users/how_tos/modifiers_package","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"modifiers_package","title":"Add configuration modifiers to entire directories"},"sidebar":"main","previous":{"title":"Setup configuration modifiers","permalink":"/docs/users/how_tos/modifiers_setup"},"next":{"title":"Add configuration modifiers to a specific target","permalink":"/docs/users/how_tos/modifiers_target"}}');var o=i(74848),r=i(28453);const n={id:"modifiers_package",title:"Add configuration modifiers to entire directories"},d=void 0,c={},a=[];function l(e){const s={a:"a",code:"code",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(s.p,{children:["Modifiers can be set in ",(0,o.jsxs)(s.a,{href:"/docs/rule_authors/package_files",children:[(0,o.jsx)(s.code,{children:"PACKAGE"})," files"]})," using\nthe prelude's ",(0,o.jsx)(s.code,{children:"set_cfg_modifiers"}),". In this case they will be applied to all\ntargets affected by that ",(0,o.jsx)(s.code,{children:"PACKAGE"})," file."]}),"\n",(0,o.jsxs)(s.p,{children:["For example, assuming that ",(0,o.jsx)(s.code,{children:"root//constraints:debug"})," is an existing constraint\nvalue and ",(0,o.jsx)(s.a,{href:"/docs/users/how_tos/modifiers_setup",children:"modifiers have been setup"}),", the following will\napply it by default to all targets defined in that ",(0,o.jsx)(s.code,{children:"PACKAGE"}),"'s directory:"]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-python",children:'load("@prelude//cfg/modifier/set_cfg_modifiers.bzl", "set_cfg_modifiers")\n\nset_cfg_modifiers([\n    "root//constraints:debug",\n])\n'})}),"\n",(0,o.jsxs)(s.p,{children:[(0,o.jsx)(s.code,{children:"set_cfg_modifiers"})," takes 2 arguments:"]}),"\n",(0,o.jsxs)(s.ul,{children:["\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.code,{children:"cfg_modifiers"}),", a list of modifiers to set."]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.code,{children:"extra_cfg_modifiers_per_rule"}),", a dictionary mapping rule names to lists of\nmodifiers that should be applied only for that rule. Note this is deprecated."]}),"\n"]})]})}function f(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,o.jsx)(s,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}}}]);