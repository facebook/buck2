"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1648],{24569:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>h});const i=JSON.parse('{"id":"bxl/tutorial","title":"Tutorial","description":"In this tutorial, we will use bxl to gather and generate all the index data of a","source":"@site/../docs/bxl/tutorial.md","sourceDirName":"bxl","slug":"/bxl/tutorial","permalink":"/docs/bxl/tutorial","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"tutorial","title":"Tutorial"},"sidebar":"main","previous":{"title":"Why BXL","permalink":"/docs/bxl/"},"next":{"title":"Basic How-Tos","permalink":"/docs/bxl/how_tos/basic_how_tos"}}');var r=t(74848),s=t(28453),a=t(78191),l=t(29030);const o={id:"tutorial",title:"Tutorial"},c=void 0,d={},h=[{value:"Environment",id:"environment",level:2},{value:"Part 0:",id:"part-0",level:2},{value:"Part 1:",id:"part-1",level:2},{value:"Part 2",id:"part-2",level:2},{value:"Part 3",id:"part-3",level:2},{value:"Conclusion",id:"conclusion",level:2}];function x(e){const n={a:"a",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["In this tutorial, we will use bxl to gather and generate all the index data of a\ntarget and its dependencies. Along the way we will cover query, analysis,\nextracting information from an analysis result, running an\n",(0,r.jsx)(n.a,{href:"../../concepts/glossary/#action",children:"action"})," and materializing\n",(0,r.jsx)(n.a,{href:"../../concepts/glossary/#artifact",children:"artifacts"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"This tutorial has 4 parts:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Part 0: Hello world"}),"\n",(0,r.jsx)(n.li,{children:"Part 1: Query the targets"}),"\n",(0,r.jsx)(n.li,{children:"Part 2: Do analysis and extract the information from the analysis result"}),"\n",(0,r.jsxs)(n.li,{children:["Part 3: Run ",(0,r.jsx)(n.a,{href:"../../concepts/glossary/#action",children:"action"})," and materialize the\n",(0,r.jsx)(n.a,{href:"../../concepts/glossary/#artifact",children:"artifacts"})]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"environment",children:"Environment"}),"\n",(0,r.jsxs)(n.p,{children:["For all following tutorial, we assume you are in [",(0,r.jsx)(n.code,{children:"examples/bxl_tutorial"}),"](\n",(0,r.jsx)(a.FbInternalOnly,{children:(0,r.jsx)(n.a,{href:"https://www.internalfb.com/code/fbsource/fbcode/buck2/examples/bxl_tutorial/",children:"https://www.internalfb.com/code/fbsource/fbcode/buck2/examples/bxl_tutorial/"})}),"\n",(0,r.jsx)(a.OssOnly,{children:(0,r.jsx)(n.a,{href:"https://github.com/facebook/buck2/tree/main/examples/bxl_tutorial",children:"https://github.com/facebook/buck2/tree/main/examples/bxl_tutorial"})}),"\n) folder."]}),"\n",(0,r.jsxs)(n.p,{children:["This folder contains a buck2 ",(0,r.jsx)(n.a,{href:"../../concepts/glossary/#project",children:"project"})," with\nseveral targets. These targets form this dependency graph:"]}),"\n",(0,r.jsx)("img",{src:(0,l.default)("/img/bxl_tutorial/target_dependencies_graph.png"),alt:"justifyContent"}),"\n",(0,r.jsx)(n.h2,{id:"part-0",children:"Part 0:"}),"\n",(0,r.jsx)(n.p,{children:'In this part, we will use bxl to write a "Hello world" program. We show how to\ndefine a function that receives arguments from the CLI and how to run it.'}),"\n",(0,r.jsxs)(n.p,{children:["First, let's create a file named ",(0,r.jsx)(n.code,{children:"hello_world.bxl"})," and open it."]}),"\n",(0,r.jsxs)(n.p,{children:["Then, we define a bxl function which can be called by ",(0,r.jsx)(n.code,{children:"buck2 bxl"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"main = bxl_main(\n    impl = _main,\n    cli_args = {},\n)\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"bxl_main"})," takes 2 arguments:"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"impl"})," implementation of this bxl main function"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"cli_args"})," we can define the arguments here"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Lets run the bxl script to give it a try. The command is in the format\n",(0,r.jsx)(n.code,{children:"buck2 bxl [file_path_to_bxl_file]:[bxl_main_function_name]"}),". For this case it\nlooks like this:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"buck2 bxl hello_world.bxl:main\n"})}),"\n",(0,r.jsx)(n.p,{children:"As expected, we get this error:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Error evaluating module: `root//hello_world.bxl`\n\nCaused by:\n    error: Variable `_main` not found, did you mean `main`?\n     --\x3e hello_world.bxl:2:12\n      |\n    2 |     impl = _main,\n      |            ^^^^^\n      |\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This is because we haven't defined the implementation function ",(0,r.jsx)(n.code,{children:"_main"})," here.\nLet's do that:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def _main(ctx: bxl.Context):\n    ctx.output.print("Hello world!")\n\nmain = bxl_main(\n    impl = _main,\n    cli_args = {},\n)\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Now if we run ",(0,r.jsx)(n.code,{children:"buck2 bxl hello_world.bxl:main"}),", we will see the ",(0,r.jsx)(n.code,{children:"Hello world!"}),"\nin the console."]}),"\n",(0,r.jsxs)(n.p,{children:["For this, function ",(0,r.jsx)(n.code,{children:"_main"})," must be defined to accept the argument ",(0,r.jsx)(n.code,{children:"ctx"})," with\ntype ",(0,r.jsx)(n.a,{href:"../../api/bxl/Context/",children:(0,r.jsx)(n.code,{children:"bxl.Context"})})]}),"\n",(0,r.jsxs)(n.p,{children:["We can also use ",(0,r.jsx)(n.a,{href:"../../api/bxl/cli_args/",children:(0,r.jsx)(n.code,{children:"cli_args"})})," to pass cli args to bxl.\nThese args can be accessed in the main function via\n",(0,r.jsx)(n.a,{href:"../../api/bxl/Context/#contextcli_args",children:(0,r.jsx)(n.code,{children:"ctx.cli_args"})}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Here is an example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def _main(ctx: bxl.Context):\n    ctx.output.print("Hello " + ctx.cli_args.project_name + "!")\n\nmain = bxl_main(\n    impl = _main,\n    cli_args = {\n        "project-name": cli_args.string(),\n    },\n)\n'})}),"\n",(0,r.jsx)(n.p,{children:"We can call bxl like this:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"buck2 bxl hello_world.bxl:main -- --project-name buck2\n"})}),"\n",(0,r.jsxs)(n.p,{children:["We will see ",(0,r.jsx)(n.code,{children:"Hello buck2!"})," in the console."]}),"\n",(0,r.jsx)(n.h2,{id:"part-1",children:"Part 1:"}),"\n",(0,r.jsxs)(n.p,{children:['Imagine we\'re generating index data for a Language Server Protocol (LSP). In our\nexample, this index data is available in the build graph and originates from the\n"index" ',(0,r.jsx)(n.a,{href:"../../concepts/glossary/#subtarget",children:"sub-target"}),' of each "library" and\n"binary" target. We\'ll utilize BXL to aggregate all the index data from a given\ntarget\'s dependencies into a single dataset.']}),"\n",(0,r.jsx)("img",{src:(0,l.default)("/img/bxl_tutorial/generate_index.png"),alt:"justifyContent"}),"\n",(0,r.jsx)(n.p,{children:"In this part, we will use bxl query and filter to get the targets that we want\nto be used for generating index data. Along the way, we will work with target\nuniverses and queries to get exactly the targets we need."}),"\n",(0,r.jsx)(n.p,{children:'Let\'s describe the problem we want to solve. We already have (per target graph\nabove) different types of targets: binaries, libraries, and resources. We only\nwant the targets that are of type "binary" or "library", since "resource"\ntargets do not contain index data.'}),"\n",(0,r.jsxs)(n.p,{children:["First, create a new file called ",(0,r.jsx)(n.code,{children:"generate_index.bxl"})," with this basic script:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def _main(ctx: bxl.Context):\n    ctx.output.print(ctx.cli_args.target)\n\nmain = bxl_main(\n    impl = _main,\n    cli_args = {\n        "target": cli_args.target_label(),\n    },\n)\n'})}),"\n",(0,r.jsx)(n.p,{children:"We use this command to run our script:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"buck2 bxl generate_index.bxl:main -- --target //:bin\n"})}),"\n",(0,r.jsxs)(n.p,{children:["We need to get all the deps of this target, we do that using the\n",(0,r.jsx)(n.a,{href:"../../concepts/glossary/#target-universe",children:"target universe"})," for this target:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"universe = ctx.target_universe(ctx.cli_args.target)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This will return a ",(0,r.jsx)(n.a,{href:"../../api/bxl/TargetUniverse/",children:(0,r.jsx)(n.code,{children:"TargetUniverse"})})," type. Then\nwe get the all the targets from target universe:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"all_targets = universe.universe_target_set()\n"})}),"\n",(0,r.jsxs)(n.p,{children:["We can print it by ",(0,r.jsx)(n.code,{children:"ctx.output.print(pstr(all_targets))"}),". ",(0,r.jsx)(n.code,{children:"pstr"})," here is used to\nprettify the string representation of an object. We can see all the declared\ntargets, which correspond to the ones displayed in the target graph above:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"[\n  root//:a (<unspecified>),\n  root//:b (<unspecified>),\n  root//:bin (<unspecified>),\n  root//:c (<unspecified>),\n  root//:d (<unspecified>),\n  root//:data_a (<unspecified>),\n  root//:e (<unspecified>)\n]\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Finally, we need to do a filter, we can use\n",(0,r.jsx)(n.a,{href:"../../api/bxl/CqueryContext/#cquerycontextkind",children:(0,r.jsx)(n.code,{children:"ctx.cquery().kind"})})," to filter\nthe targets to only get the targets which is binary or library"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'nodes = ctx.cquery().kind("^(binary|library)$", all_targets)\nctx.output.print(pstr(nodes))\n'})}),"\n",(0,r.jsx)(n.p,{children:"We run the bxl script and the output shows our filtered targets:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"[\n  root//:a (<unspecified>),\n  root//:b (<unspecified>),\n  root//:bin (<unspecified>),\n  root//:c (<unspecified>),\n  root//:d (<unspecified>),\n  root//:e (<unspecified>)\n]\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Note that ",(0,r.jsx)(n.code,{children:"root//:data_a"})," is no longer in the list, since it's a resource\ntarget."]}),"\n",(0,r.jsxs)(n.p,{children:["You can find the complete code for this tutorial in [",(0,r.jsx)(n.code,{children:"part1.bxl"}),"](\n",(0,r.jsx)(a.FbInternalOnly,{children:(0,r.jsx)(n.a,{href:"https://www.internalfb.com/code/fbsource/fbcode/buck2/examples/bxl_tutorial/part1.bxl",children:"https://www.internalfb.com/code/fbsource/fbcode/buck2/examples/bxl_tutorial/part1.bxl"})}),"\n",(0,r.jsx)(a.OssOnly,{children:(0,r.jsx)(n.a,{href:"https://github.com/facebook/buck2/blob/main/examples/bxl_tutorial/part1.bxl",children:"https://github.com/facebook/buck2/blob/main/examples/bxl_tutorial/part1.bxl"})}),"\n)."]}),"\n",(0,r.jsx)(n.h2,{id:"part-2",children:"Part 2"}),"\n",(0,r.jsx)(n.p,{children:"In this part, we'll extend our script to analyze the targets we filtered and\nextract their index information. We'll see how to work with analysis results and\naccess sub-targets."}),"\n",(0,r.jsxs)(n.p,{children:["Let's continue with the script we made in Part 1. Let's get the\n",(0,r.jsx)(n.a,{href:"../../api/bxl/Context/#contextanalysis",children:"analysis"})," for these nodes:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"analysis_res_dict = ctx.analysis(nodes)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This gives us a dictionary, where keys are target\n",(0,r.jsx)(n.a,{href:"../../api/build/Label/#label",children:"labels"})," and values are of type\n",(0,r.jsx)(n.a,{href:"../../api/bxl/AnalysisResult/",children:"AnalysisResult"})]}),"\n",(0,r.jsxs)(n.p,{children:['Index data is in each target\'s "index"\n',(0,r.jsx)(n.a,{href:"../../concepts/glossary/#subtarget",children:"sub-target"}),"'s ",(0,r.jsx)(n.code,{children:"default_outputs"}),", so iterate\nthrough ",(0,r.jsx)(n.code,{children:"analysis_res_dict"})," to get that:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'index_outputs = []\nfor _, analysis_res in analysis_res_dict.items():\n    default_info = analysis_res.as_dependency()[DefaultInfo]\n    index_sub_target_provider = default_info.sub_targets["index"]\n    index_outputs.extend(index_sub_target_provider[DefaultInfo].default_outputs)\n'})}),"\n",(0,r.jsx)(n.p,{children:"Let's see what's happening in each step:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"We create an empty list to store our index outputs"}),"\n",(0,r.jsx)(n.li,{children:"We loop through each analysis result"}),"\n",(0,r.jsxs)(n.li,{children:["We get the DefaultInfo ",(0,r.jsx)(n.a,{href:"../../concepts/glossary/#provider",children:"provider"})," from\neach result"]}),"\n",(0,r.jsxs)(n.li,{children:['We access the "index" ',(0,r.jsx)(n.a,{href:"../../concepts/glossary/#subtarget",children:"sub-target"})]}),"\n",(0,r.jsx)(n.li,{children:"Finally, we collect the default outputs from each index sub-target"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Feel free to print each step's result to follow what the script is doing."}),"\n",(0,r.jsx)(n.p,{children:"Finally, we print the results:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"ctx.output.print(index_outputs)\n"})}),"\n",(0,r.jsx)(n.p,{children:"You'll see output like this:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"[\n  <build artifact a.index bound to root//:a (<unspecified>)>,\n  <build artifact b.index bound to root//:b (<unspecified>)>,\n  <build artifact bin.index bound to root//:bin (<unspecified>)>,\n  <build artifact c.index bound to root//:c (<unspecified>)>,\n  <build artifact d.index bound to root//:d (<unspecified>)>,\n  <build artifact e.index bound to root//:e (<unspecified>)>\n]\n"})}),"\n",(0,r.jsxs)(n.p,{children:["You can find the complete code for this tutorial in [",(0,r.jsx)(n.code,{children:"part2.bxl"}),"](\n",(0,r.jsx)(a.FbInternalOnly,{children:(0,r.jsx)(n.a,{href:"https://www.internalfb.com/code/fbsource/fbcode/buck2/examples/bxl_tutorial/part2.bxl",children:"https://www.internalfb.com/code/fbsource/fbcode/buck2/examples/bxl_tutorial/part2.bxl"})}),"\n",(0,r.jsx)(a.OssOnly,{children:(0,r.jsx)(n.a,{href:"https://github.com/facebook/buck2/blob/main/examples/bxl_tutorial/part2.bxl",children:"https://github.com/facebook/buck2/blob/main/examples/bxl_tutorial/part2.bxl"})}),"\n)."]}),"\n",(0,r.jsx)(n.h2,{id:"part-3",children:"Part 3"}),"\n",(0,r.jsxs)(n.p,{children:["In this part, we show how to run an ",(0,r.jsx)(n.a,{href:"../../concepts/glossary/#action",children:"action"})," to\nwrite all the collected index paths to a file and materialize this index data.\nWe show how to run actions and do materialization."]}),"\n",(0,r.jsx)(n.p,{children:"We'll build upon what we created in Part 2."}),"\n",(0,r.jsx)(n.p,{children:"First, let's modify our script to write all the index paths to a file:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'actions = ctx.bxl_actions().actions\nindex_db = actions.write("index.txt", index_outputs)\n'})}),"\n",(0,r.jsxs)(n.p,{children:["It creates the ",(0,r.jsx)(n.a,{href:"../../api/build/AnalysisActions/",children:"action object"})," and then writes\nall the index path to the file named ",(0,r.jsx)(n.code,{children:"index.txt"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["With such, bxl will not run the action to get the output, it just declares the\naction. We need to call\n",(0,r.jsx)(n.a,{href:"../../api/bxl/OutputStream/#outputstreamensure",children:(0,r.jsx)(n.code,{children:"ctx.output.ensure"})})," to make\nour outputs available."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"ensured_index_db = ctx.output.ensure(index_db)\nctx.output.print(ensured_index_db)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Running the script will show us where our file was created:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"buck-out/v2/gen-bxl/root/78ceb8c295d0ab4e/part3.bxl/__main__e0c0381aecee358a__/index.txt\n"})}),"\n",(0,r.jsx)(n.p,{children:"We open this file and to see all the index paths:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"buck-out/v2/gen/root/6dd044292ff31ae1/__a__/a.index\nbuck-out/v2/gen/root/6dd044292ff31ae1/__b__/b.index\nbuck-out/v2/gen/root/6dd044292ff31ae1/__bin__/bin.index\nbuck-out/v2/gen/root/6dd044292ff31ae1/__c__/c.index\nbuck-out/v2/gen/root/6dd044292ff31ae1/__d__/d.index\nbuck-out/v2/gen/root/6dd044292ff31ae1/__e__/e.index\n"})}),"\n",(0,r.jsx)(n.p,{children:'It shows all the index path, but if we check the content of the index, it will\nnot error that "no such file or directory". This is because we don\'t ensure the\nthese artifacts.'}),"\n",(0,r.jsx)(n.p,{children:"So we ensure our index files to make them available:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"ctx.output.ensure_multiple(index_outputs)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Now we can confirm these index files are available on our disk."}),"\n",(0,r.jsxs)(n.p,{children:["You can find the complete code for this tutorial in [",(0,r.jsx)(n.code,{children:"part3.bxl"}),"](\n",(0,r.jsx)(a.FbInternalOnly,{children:(0,r.jsx)(n.a,{href:"https://www.internalfb.com/code/fbsource/fbcode/buck2/examples/bxl_tutorial/part3.bxl",children:"https://www.internalfb.com/code/fbsource/fbcode/buck2/examples/bxl_tutorial/part3.bxl"})}),"\n",(0,r.jsx)(a.OssOnly,{children:(0,r.jsx)(n.a,{href:"https://github.com/facebook/buck2/blob/main/examples/bxl_tutorial/part3.bxl",children:"https://github.com/facebook/buck2/blob/main/examples/bxl_tutorial/part3.bxl"})}),"\n)."]}),"\n",(0,r.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,r.jsx)(n.p,{children:"In this tutorial, we built a complete BXL script that:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Gets a target universe and filters for specific target types"}),"\n",(0,r.jsx)(n.li,{children:"Extracts index information from build targets"}),"\n",(0,r.jsx)(n.li,{children:"Writes the collected paths to a file and materializes the index files"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Here's what we learned along the way:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"How to use target universes to get dependencies"}),"\n",(0,r.jsx)(n.li,{children:"Filtering targets with cquery"}),"\n",(0,r.jsx)(n.li,{children:"Analyzing targets and accessing their properties"}),"\n",(0,r.jsx)(n.li,{children:"Running actions to write files"}),"\n",(0,r.jsx)(n.li,{children:"Ensuring outputs are available on disk"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"The final script demonstrates a common BXL workflow: starting from a target,\nfinding related targets, extracting information, and producing outputs. This\npattern can be used as a foundation for building more complex BXL scripts."})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(x,{...e})}):x(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var i=t(96540);const r={},s=i.createContext(r);function a(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);