"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[46025],{28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>l});var s=t(96540);const r={},i=s.createContext(r);function o(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:n},e.children)}},92172:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"rule_authors/test_execution","title":"Test Execution","description":"Test execution in Buck2 is a collaboration with a separate test runner process.","source":"@site/../docs/rule_authors/test_execution.md","sourceDirName":"rule_authors","slug":"/rule_authors/test_execution","permalink":"/docs/rule_authors/test_execution","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"test_execution","title":"Test Execution"},"sidebar":"main","previous":{"title":"Anonymous Targets","permalink":"/docs/rule_authors/anon_targets"},"next":{"title":"Observability and Optimization","permalink":"/docs/rule_authors/optimization"}}');var r=t(74848),i=t(28453),o=t(78191);const l={id:"test_execution",title:"Test Execution"},a=void 0,c={},d=[{value:"Anatomy of a test run",id:"anatomy-of-a-test-run",level:2},{value:"Information available on <code>ExternalRunnerTestInfo</code>",id:"information-available-on-externalrunnertestinfo",level:2},{value:"Fields exposed to the test runner",id:"fields-exposed-to-the-test-runner",level:3},{value:"Fields pertinent for Remote Execution",id:"fields-pertinent-for-remote-execution",level:3},{value:"Verbatim arguments and handles",id:"verbatim-arguments-and-handles",level:2},{value:"Execution Configurations",id:"execution-configurations",level:2},{value:"Working Directory",id:"working-directory",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Test execution in Buck2 is a collaboration with a separate test runner process."}),"\n",(0,r.jsxs)(o.OssOnly,{children:[(0,r.jsx)(n.p,{children:"In its open-source build, Buck2 ships with a built-in simplistic test runner."}),(0,r.jsxs)(n.p,{children:["This test runner receives the commands defined by ",(0,r.jsx)(n.code,{children:"ExternalRunnerTestInfo"})," and\nsimply executes them. Exit code zero means the test passed, and one means it\nfailed."]}),(0,r.jsxs)(n.p,{children:["Users can of course develop their own test runners. Look at\n",(0,r.jsx)(n.code,{children:"fbcode/buck2/app/buck2_test_runner"})," as a sample. For comparison, here's how\nit's used at Meta:"]})]}),"\n",(0,r.jsxs)(n.p,{children:["At Meta, this test runner is ",(0,r.jsx)(o.OssOnly,{children:"Tpx"}),"\n",(0,r.jsx)(o.FbInternalOnly,{children:(0,r.jsx)(n.a,{href:"https://www.internalfb.com/intern/wiki/TAE/tpx/",children:"Tpx"})}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Tpx has a large number of responsibilities when used with Buck2, which can be\ngrouped as follows:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Translation"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Understands the output formats of various supported test frameworks. This is\nused to identify test cases and collect test results."}),"\n",(0,r.jsx)(n.li,{children:"Understands, to an extent, the input formats. For example, given a test\ncase, Tpx can identify what command needs to run to execute just that test."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Orchestration"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Interacts with Test Infra to discover what tests should run, under a number\nof configurations."}),"\n",(0,r.jsx)(n.li,{children:"Separates listing of tests (identifying what tests exists in a test target)\nand execution (running specific tests within that target)."}),"\n",(0,r.jsx)(n.li,{children:"Coordinates the execution of tests. For example, it may request retries, or\nchoose to bundle multiple tests in a single execution (or not)."}),"\n",(0,r.jsx)(n.li,{children:"Reports test results to Test Infra as well."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["In Buck2, rules interact with the test runner via a provider called\n",(0,r.jsx)(n.code,{children:"ExternalRunnerTestInfo"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"anatomy-of-a-test-run",children:"Anatomy of a test run"}),"\n",(0,r.jsxs)(n.p,{children:["When a user runs ",(0,r.jsx)(n.code,{children:"buck2 test $targets"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Buck2 identifies all matching targets that have an ",(0,r.jsx)(n.code,{children:"ExternalRunnerTestInfo"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Buck2 builds all the artifacts referenced by those targets (this will likely\nchange eventually to build them only if they are used)."}),"\n",(0,r.jsxs)(n.li,{children:["Buck2 then notifies the test runner that those tests exist. Currently, the\ntest runner receives a subset of ",(0,r.jsx)(n.code,{children:"ExternalRunnerTestInfo"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"The test runner can request command execution from Buck2 to list and execute\ntests."}),"\n",(0,r.jsx)(n.li,{children:"When it receives command results from Buck2, the test runner may fire off\nevents that the end-user will see (such as test results), upload logs\nexternally, request further executions, and so on."}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsx)(n.p,{children:"If more than one target is being built, test building and execution will proceed\nconcurrently."})}),"\n",(0,r.jsxs)(n.h2,{id:"information-available-on-externalrunnertestinfo",children:["Information available on ",(0,r.jsx)(n.code,{children:"ExternalRunnerTestInfo"})]}),"\n",(0,r.jsxs)(n.p,{children:["As noted, rules communicate their testing capabilities via\n",(0,r.jsx)(n.code,{children:"ExternalRunnerTestInfo"}),". There are a number of fields available on\n",(0,r.jsx)(n.code,{children:"ExternalRunnerTestInfo"})," to control how a given target is tested, as detailed in\nthe following sub-sections."]}),"\n",(0,r.jsx)(n.h3,{id:"fields-exposed-to-the-test-runner",children:"Fields exposed to the test runner"}),"\n",(0,r.jsxs)(n.p,{children:["The following list shows what is available in ",(0,r.jsx)(n.code,{children:"ExternalRunnerTestInfo"}),", with\nwhich the test runner can interact:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"type"})," - a string key that defines the type of test this is. ",(0,r.jsxs)(o.FbInternalOnly,{children:["\nTpx uses this internally to choose a translator. Examples include ",(0,r.jsx)(n.code,{children:"gtest"}),",\n",(0,r.jsx)(n.code,{children:"apple_test"}),", ",(0,r.jsx)(n.code,{children:"custom"}),". Note that Tpx also allows labels to influence the\norchestrator selection. "]})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"command"})," and ",(0,r.jsx)(n.code,{children:"env"})," - respectively, a list and a key-value mapping of\narguments. ",(0,r.jsx)(o.FbInternalOnly,{children:"These are the inputs to translation in\nTpx."})," They are not always visible to the test runner (for more\ndetails, see\n",(0,r.jsx)(n.a,{href:"#verbatim-arguments-and-handles",children:"Verbatim arguments and handles"}),", below)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"labels"})," - a set of string labels to pass to the test runner. ",(0,r.jsx)(o.FbInternalOnly,{children:"\nThey have no meaning to Buck2, but some labels have impact on translation in\nTpx. "})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"contacts"})," - a list of contacts for the tests; usually oncalls."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"executor_overrides"})," - a key-value mapping of executor configurations that the\ntest runner can use when requesting execution from Buck2."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"local_resources"})," - a key-value mapping from resource type to optional\n",(0,r.jsx)(n.code,{children:"LocalResourceInfo"})," provider. Provider is used for initialization of that\nresource type. If the value is ",(0,r.jsx)(n.code,{children:"None"})," resource type is ignored even though\ntest runner required it. For context see\n",(0,r.jsx)(n.a,{href:"/docs/rule_authors/local_resources",children:"Local Resources For Tests Execution"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"fields-pertinent-for-remote-execution",children:"Fields pertinent for Remote Execution"}),"\n",(0,r.jsxs)(n.p,{children:["For compatibility with Remote Execution (RE), there are two fields that rules\nshould set in their ",(0,r.jsx)(n.code,{children:"ExternalRunnerTestInfo"})," if they should be run on RE:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"use_project_relative_paths"})," - if ",(0,r.jsx)(n.code,{children:"true"})," (the default is\n",(0,r.jsx)(o.FbInternalOnly,{children:(0,r.jsx)(n.code,{children:"false"})})," ",(0,r.jsx)(o.OssOnly,{children:(0,r.jsx)(n.code,{children:"true"})}),"), Buck2\nwill produce relative paths. If not, it'll produce absolute paths."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"run_from_project_root"})," - if ",(0,r.jsx)(n.code,{children:"true"})," (the default is\n",(0,r.jsx)(o.FbInternalOnly,{children:(0,r.jsx)(n.code,{children:"false"})})," ",(0,r.jsx)(o.OssOnly,{children:(0,r.jsx)(n.code,{children:"true"})}),"), tests\nwill run from the project root (their ",(0,r.jsx)(n.code,{children:"cwd"})," will be the project root, which is\nthe same as all build commands). If ",(0,r.jsx)(n.code,{children:"false"}),", it'll be the cell root."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Note that passing ",(0,r.jsx)(n.code,{children:"--unstable-allow-all-tests-on-re"})," to ",(0,r.jsx)(n.code,{children:"buck2 test"})," will\noverride those fields and set them to ",(0,r.jsx)(n.code,{children:"true"}),", since they are a pre-requisite to\nrun on RE. In contrast, passing ",(0,r.jsx)(n.code,{children:"--unstable-allow-compatible-tests-on-re"})," will\nonly allow tests that already set both those fields to ",(0,r.jsx)(n.code,{children:"true"})," to execute on RE."]}),"\n",(0,r.jsxs)(n.p,{children:["Also note that when ",(0,r.jsx)(n.code,{children:"executor_overrides"})," are set, if an executor override is\nused and results in execution on RE, it'll happen on RE unconditionally.\nTherefore, it's a good idea to set those fields if RE-only executor overrides\nare provided."]}),"\n",(0,r.jsx)(n.h2,{id:"verbatim-arguments-and-handles",children:"Verbatim arguments and handles"}),"\n",(0,r.jsxs)(n.p,{children:["As noted above, the test runner only interacts with a subset of arguments\nprovided by rules in ",(0,r.jsx)(n.code,{children:"ExternalRunnerTestInfo"}),". The reason for this is that the\ntest runner doesn't get to access, for example, artifacts, that Buck2 knows\nabout."]}),"\n",(0,r.jsx)(n.p,{children:"Consider the following example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'binary = ctx.attrs.dep[RunInfo]\ntest_info = ExternalRunnerTestInfo(command = [binary, "run-tests"], ...)\n'})}),"\n",(0,r.jsxs)(n.p,{children:["When Buck2 actually runs this command, ",(0,r.jsx)(n.code,{children:"binary"})," is expanded to a path (and\npossibly to more args). Buck2 would also account for any hidden arguments and\nmake those available where the command is executed. It is important for Buck2 to\nretain this capability when running with the test runner."]}),"\n",(0,r.jsxs)(n.p,{children:["To that end, all non-trivial arguments present in ",(0,r.jsx)(n.code,{children:"command"})," (and in the values\nof ",(0,r.jsx)(n.code,{children:"env"}),"), such as ",(0,r.jsx)(n.code,{children:"cmd_args"})," or ",(0,r.jsx)(n.code,{children:"RunInfo"}),", are exposed to the test runner as\nopaque handles, and simple string arguments are passed as-is to the test runner."]}),"\n",(0,r.jsx)(n.p,{children:"This means that the test runner would see the command described above as:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'[ArgHandle(index = 0), Verbatim("foobar")]\n'})}),"\n",(0,r.jsxs)(n.p,{children:["When requesting execution from Buck2, the test runner can use the ",(0,r.jsx)(n.code,{children:"ArgHandle"}),"\nand Buck2 will swap it back for the underlying value that was set on the\nprovider."]}),"\n",(0,r.jsx)(n.p,{children:"This allows the test runner to introspect and modify parts of the command lines\nit receives, as long as it doesn't need to access the actual text value of\nnon-verbatim arguments. Usually, this works out to be sufficient (or can be made\nsufficient with a bit of refactoring in the test runner)."}),"\n",(0,r.jsx)(n.h2,{id:"execution-configurations",children:"Execution Configurations"}),"\n",(0,r.jsxs)(n.p,{children:["By default, tests execute using the execution configuration of the associated\ntarget. This is the execution configuration that would be used for run actions\n(",(0,r.jsx)(n.code,{children:"ctx.actions.run"}),") declared in the same target. This is a default that actually\nmakes little sense but works out as long as cross-compiling is not the norm."]}),"\n",(0,r.jsxs)(o.FbInternalOnly,{children:[(0,r.jsx)(n.p,{children:"That said, it's easy to see where this breaks down."}),(0,r.jsx)(n.p,{children:"For example:"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"For iOS tests, the execution platform for builds needs to be Xcode (local or\nRE Mac)."}),"\n",(0,r.jsx)(n.li,{children:"For test listing, Xcode is not needed (it's preferable to do it on RE Linux\nwhere capacity is cheaper)."}),"\n",(0,r.jsx)(n.li,{children:"To run the tests, a simulator is required."}),"\n"]})]}),"\n",(0,r.jsxs)(n.p,{children:["To support this, ",(0,r.jsx)(n.code,{children:"ExternalRunnerTestInfo"})," allows specifying override platforms,\nwhich are given a name. The test runner can request execution on them by passing\ntheir name when it sends execution requests to Buck2, as shown in the following\ncode:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'ExternalRunnerTestInfo(\n  executor_overrides = {\n      "ios-simulator": CommandExecutorConfig(\n          local_enabled = False,\n          remote_enabled = True,\n          remote_execution_properties = {\n              "platform": "ios-simulator-pure-re",\n              "subplatform": "iPhone 8.iOS 15.0",\n              "xcode-version": "xcodestable",\n          },\n          remote_execution_use_case = "tpx-default",\n      ),\n      "static-listing": CommandExecutorConfig(local_enabled = True, remote_enabled = False),\n  },\n  ...\n)\n'})}),"\n",(0,r.jsx)(n.p,{children:"The default execution platform can also be overridden:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'ExternalRunnerTestInfo(\n  default_executor = CommandExecutorConfig(\n    local_enabled = False,\n    remote_enabled = True,\n    remote_execution_properties = {\n        "platform": "ios-simulator-pure-re",\n        "subplatform": "iPhone 8.iOS 15.0",\n        "xcode-version": "xcodestable",\n    },\n    remote_execution_use_case = "tpx-default",\n  ),\n  ...\n)\n'})}),"\n",(0,r.jsx)(n.h2,{id:"working-directory",children:"Working Directory"}),"\n",(0,r.jsx)(o.OssOnly,{children:(0,r.jsxs)(n.p,{children:["Tests can be run from the cell root by setting ",(0,r.jsx)(n.code,{children:"run_from_project_root = False"}),"."]})}),"\n",(0,r.jsx)(o.FbInternalOnly,{children:(0,r.jsxs)(n.p,{children:["As noted above, tests run from the cell root unless ",(0,r.jsx)(n.code,{children:"run_from_project_root"})," is set."]})}),"\n",(0,r.jsxs)(n.p,{children:["To produce paths relative to the cell root for use by tests, use\n",(0,r.jsx)(n.code,{children:"relative_to(ctx.label.cell_root)"})," on ",(0,r.jsx)(n.code,{children:"cmd_args"}),"."]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}}}]);