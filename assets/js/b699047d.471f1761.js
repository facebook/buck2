"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[36828],{28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>a});var s=n(96540);const o={},i=s.createContext(o);function r(e){const t=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(i.Provider,{value:t},e.children)}},47932:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>f,frontMatter:()=>a,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"api/build/DefaultInfo","title":"DefaultInfo","description":"A provider that all rules\' implementations must return","source":"@site/../docs/api/build/DefaultInfo.md","sourceDirName":"api/build","slug":"/api/build/DefaultInfo","permalink":"/docs/api/build/DefaultInfo","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"apiSidebar","previous":{"title":"ConstraintValueInfo","permalink":"/docs/api/build/ConstraintValueInfo"},"next":{"title":"DepOnlyIncompatibleInfo","permalink":"/docs/api/build/DepOnlyIncompatibleInfo"}}');var o=n(74848),i=n(28453),r=n(56289);const a={},l="DefaultInfo",d={},u=[{value:"DefaultInfo.default_outputs",id:"defaultinfodefault_outputs",level:2},{value:"DefaultInfo.other_outputs",id:"defaultinfoother_outputs",level:2},{value:"DefaultInfo.sub_targets",id:"defaultinfosub_targets",level:2}];function c(e){const t={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",hr:"hr",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"defaultinfo",children:"DefaultInfo"})}),"\n",(0,o.jsx)(t.p,{children:"A provider that all rules' implementations must return"}),"\n",(0,o.jsx)(t.p,{children:"In many simple cases, this can be inferred for the user."}),"\n",(0,o.jsx)(t.p,{children:"Example of a rule's implementation function and how these fields are used by the framework:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:'# //foo_binary.bzl\ndef impl(ctx):\n    out = ctx.actions.declare_output("out")\n    ctx.actions.run([ctx.attrs._cc[RunInfo], "-o", out.as_output()] + ctx.attrs.srcs)\n    stripped_out = ctx.actions.declare_output("stripped")\n    debug_symbols_out = ctx.actions.declare_output("debug_info")\n    ctx.actions.run([\n        ctx.attrs._strip[RunInfo],\n        "--binary",\n        out,\n        "--stripped-out",\n        stripped_out.as_output(),\n        "--debug-symbols-out",\n        debug_symbols_out.as_output(),\n    ])\n    return [\n        DefaultInfo(\n            sub_targets = {\n                "stripped": [\n                    DefaultInfo(default_outputs = [stripped_out, debug_symbols_out]),\n                ],\n            },\n            default_output = out,\n        ),\n    ]\n\nfoo_binary = rule(\n    impl = impl,\n    attrs = {\n        "srcs": attrs.list(attrs.source()),\n        "_cc": attrs.dep(default = "//tools:cc", providers = [RunInfo]),\n        "_strip_script": attrs.dep(default = "//tools:strip", providers = [RunInfo]),\n    },\n)\n\n\ndef foo_binary_wrapper(name, srcs):\n    foo_binary(\n        name = name,\n        srcs = src,\n        out = name,\n        stripped = name + ".stripped",\n        debug_info = name + ".debug_info",\n    )\n\n# //subdir/BUCK\nload("//:foo_binary.bzl", "foo_binary_wrapper")\n\ngenrule(name = "gen_stuff", ...., default_outs = ["foo.cpp"])\n\n# ":gen_stuff" pulls the default_outputs for //subdir:gen_stuff\nfoo_binary_wrapper(name = "foo", srcs = glob(["*.cpp"]) + [":gen_stuff"])\n\n# Builds just \'foo\' binary. The strip command is never invoked.\n$ buck build //subdir:foo\n\n# builds the \'foo\' binary, because it is needed by the \'strip\' command. Ensures that\n# both the stripped binary and the debug symbols are built.\n$ buck build //subdir:foo[stripped]\n'})}),"\n",(0,o.jsx)(t.h2,{id:"defaultinfodefault_outputs",children:"DefaultInfo.default_outputs"}),"\n",(0,o.jsx)("pre",{class:"language-python",children:(0,o.jsxs)("code",{children:["DefaultInfo.default_outputs: list[",(0,o.jsx)(r.default,{to:"/docs/api/build/PromiseArtifact",children:"Artifact"}),"]"]})}),"\n",(0,o.jsxs)(t.p,{children:["A list of ",(0,o.jsx)(t.code,{children:"Artifact"}),"s that are built by default if this rule is requested explicitly (via CLI or ",(0,o.jsx)(t.code,{children:"$(location)"}),' etc), or depended on as as a "source" (i.e., ',(0,o.jsx)(t.code,{children:"attrs.source()"}),")."]}),"\n",(0,o.jsx)(t.hr,{}),"\n",(0,o.jsx)(t.h2,{id:"defaultinfoother_outputs",children:"DefaultInfo.other_outputs"}),"\n",(0,o.jsx)("pre",{class:"language-python",children:(0,o.jsxs)("code",{children:["DefaultInfo.other_outputs: list[",(0,o.jsx)(r.default,{to:"/docs/api/build/PromiseArtifact",children:"Artifact"})," | ",(0,o.jsx)(r.default,{to:"/docs/api/build/CellPath",children:"CellPath"})," | ",(0,o.jsx)(r.default,{to:"/docs/api/build/CellRoot",children:"CellRoot"})," | ",(0,o.jsx)(r.default,{to:"/docs/api/build/Label",children:"Label"})," | ",(0,o.jsx)(r.default,{to:"/docs/api/build/OutputArtifact",children:"OutputArtifact"})," | ",(0,o.jsx)(r.default,{to:"/docs/api/build/ProjectRoot",children:"ProjectRoot"})," | ",(0,o.jsx)(r.default,{to:"/docs/api/build/ResolvedStringWithMacros",children:"ResolvedStringWithMacros"})," | ",(0,o.jsx)(r.default,{to:"/docs/api/build/TaggedCommandLine",children:"TaggedCommandLine"})," | ",(0,o.jsx)(r.default,{to:"/docs/api/build/TargetLabel",children:"TargetLabel"})," | ",(0,o.jsx)(r.default,{to:"/docs/api/build/TransitiveSetArgsProjection",children:"TransitiveSetArgsProjection"})," | ",(0,o.jsx)(r.default,{to:"/docs/api/build/WriteJsonCliArgs",children:"WriteJsonCliArgs"})," | ",(0,o.jsx)(r.default,{to:"/docs/api/build/cmd_args",children:"cmd_args"})," | ",(0,o.jsx)(r.default,{to:"/docs/api/starlark/str",children:"str"})," | RunInfo]"]})}),"\n",(0,o.jsxs)(t.p,{children:["A list of ",(0,o.jsx)(t.code,{children:"ArtifactTraversable"}),". The underlying ",(0,o.jsx)(t.code,{children:"Artifact"}),"s they define will be built by default if this rule is requested (via CLI or ",(0,o.jsx)(t.code,{children:"$(location)"})," etc), but ",(0,o.jsx)(t.em,{children:"not"}),' when it\'s depended on as as a "source" (i.e., ',(0,o.jsx)(t.code,{children:"attrs.source()"}),"). ",(0,o.jsx)(t.code,{children:"ArtifactTraversable"})," can be an ",(0,o.jsx)(t.code,{children:"Artifact"})," (which yields itself), or ",(0,o.jsx)(t.code,{children:"cmd_args"}),", which expand to all their inputs."]}),"\n",(0,o.jsx)(t.hr,{}),"\n",(0,o.jsx)(t.h2,{id:"defaultinfosub_targets",children:"DefaultInfo.sub_targets"}),"\n",(0,o.jsx)("pre",{class:"language-python",children:(0,o.jsxs)("code",{children:["DefaultInfo.sub_targets: dict[",(0,o.jsx)(r.default,{to:"/docs/api/starlark/str",children:"str"}),", ",(0,o.jsx)(r.default,{to:"/docs/api/build/ProviderCollection",children:"ProviderCollection"}),"]"]})}),"\n",(0,o.jsxs)(t.p,{children:["A mapping of names to ",(0,o.jsx)(t.code,{children:"ProviderCollection"}),"s. The keys are used when resolving the ",(0,o.jsx)(t.code,{children:"ProviderName"})," portion of a ",(0,o.jsx)(t.code,{children:"ProvidersLabel"})," in order to access the providers for a subtarget, such as when doing ",(0,o.jsx)(t.code,{children:"buck2 build cell//foo:bar[baz]"}),". Just like any ",(0,o.jsx)(t.code,{children:"ProviderCollection"}),", this collection must include at least a ",(0,o.jsx)(t.code,{children:"DefaultInfo"})," provider. The subtargets can have their own subtargets as well, which can be accessed by chaining them, e.g.: ",(0,o.jsx)(t.code,{children:"buck2 build cell//foo:bar[baz][qux]"}),"."]})]})}function f(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}}}]);