"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[23601],{28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>l});var s=t(96540);const r={},i=s.createContext(r);function o(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:n},e.children)}},62295:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"prelude/rules/core/genrule","title":"genrule","description":"A genrule() is used to generate files from a shell command. It must produce a single output file or folder.","source":"@site/../docs/prelude/rules/core/genrule.md","sourceDirName":"prelude/rules/core","slug":"/prelude/rules/core/genrule","permalink":"/docs/prelude/rules/core/genrule","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"ruleSidebar","previous":{"title":"filegroup","permalink":"/docs/prelude/rules/core/filegroup"},"next":{"title":"http_archive","permalink":"/docs/prelude/rules/core/http_archive"}}');var r=t(74848),i=t(28453);t(56289);const o={},l="genrule",d={},c=[{value:"Function Signature",id:"function-signature",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Examples",id:"examples",level:3}];function a(e){const n={a:"a",code:"code",em:"em",h1:"h1",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"genrule",children:"genrule"})}),"\n",(0,r.jsxs)(n.p,{children:["A ",(0,r.jsx)(n.code,{children:"genrule()"})," is used to generate files from a shell command. It must produce a single output file or folder."]}),"\n",(0,r.jsx)(n.h3,{id:"function-signature",children:"Function Signature"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def genrule(\n    *,\n    name: str,\n    default_target_platform: None | str = None,\n    target_compatible_with: list[str] = [],\n    compatible_with: list[str] = [],\n    exec_compatible_with: list[str] = [],\n    visibility: list[str] = [],\n    within_view: list[str] = ["PUBLIC"],\n    metadata: OpaqueMetadata = {},\n    tests: list[str] = [],\n    modifiers: OpaqueMetadata = [],\n    _apple_platforms: dict[str, str] = {},\n    _build_only_native_code: bool = select({"prelude//android/constraints:build_only_native_code": True, "DEFAULT": False}),\n    _exec_os_type: str = "prelude//os_lookup/targets:os_lookup",\n    _genrule_toolchain: str = "gh_facebook_buck2_shims_meta//:genrule",\n    always_print_stderr: bool = False,\n    bash: None | str = None,\n    cacheable: None | bool = None,\n    cmd: None | str = None,\n    cmd_exe: None | str = None,\n    constraint_overrides: list[None | str] = [],\n    contacts: list[str] = [],\n    default_host_platform: None | str = None,\n    default_outs: None | list[str] = None,\n    enable_sandbox: None | bool = None,\n    env: dict[str, str] = {},\n    environment_expansion_separator: None | str = None,\n    error_handler_category: None | str = None,\n    error_handler_stderr_errorformats: None | list[str] = None,\n    error_handler_stdout_errorformats: None | list[str] = None,\n    executable: None | bool = None,\n    executable_outs: None | list[str] = None,\n    has_content_based_path: bool = False,\n    labels: list[str] = [],\n    licenses: list[str] = [],\n    metadata_env_var: None | str = None,\n    metadata_path: None | str = None,\n    need_android_tools: bool = False,\n    no_outputs_cleanup: bool = False,\n    out: None | str = None,\n    outs: None | dict[str, list[str]] = None,\n    platform_override: None | str = None,\n    remote: None | bool = None,\n    remote_execution_dependencies: list[dict[str, str]] = [],\n    srcs: list[str] | dict[str, str] = [],\n    type: None | str = None,\n    uses_experimental_content_based_path_hashing: bool = False,\n    weight: None | int = None,\n) -> None\n'})}),"\n",(0,r.jsx)(n.h3,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"name"}),": (required)"]}),"\n",(0,r.jsx)(n.p,{children:"name of the target"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"default_target_platform"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"None"}),")"]}),"\n",(0,r.jsx)(n.p,{children:"specifies the default target platform, used when no platforms are specified on the command line"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"target_compatible_with"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,r.jsx)(n.p,{children:"a list of constraints that are required to be satisfied for this target to be compatible with a configuration"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"compatible_with"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,r.jsx)(n.p,{children:"a list of constraints that are required to be satisfied for this target to be compatible with a configuration"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"exec_compatible_with"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,r.jsx)(n.p,{children:"a list of constraints that are required to be satisfied for this target to be compatible with an execution platform"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"visibility"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,r.jsx)(n.p,{children:"a list of visibility patterns restricting what targets can depend on this one"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"within_view"}),": (defaults to: ",(0,r.jsx)(n.code,{children:'["PUBLIC"]'}),")"]}),"\n",(0,r.jsx)(n.p,{children:"a list of visibility patterns restricting what this target can depend on"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"metadata"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"{}"}),")"]}),"\n",(0,r.jsx)(n.p,{children:"a key-value map of metadata associated with this target"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"tests"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,r.jsx)(n.p,{children:"a list of targets that provide tests for this one"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"modifiers"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,r.jsx)(n.p,{children:"an array of modifiers associated with this target"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"bash"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"None"}),")"]}),"\n",(0,r.jsxs)(n.p,{children:["A platform-specific version of the shell command parameter ",(0,r.jsx)(n.code,{children:"cmd"}),". It runs on Linux and UNIX systems\u2014including OSX\u2014on which ",(0,r.jsx)(n.code,{children:"bash"})," is installed. It has a higher priority than ",(0,r.jsx)(n.code,{children:"cmd"}),". The ",(0,r.jsx)(n.code,{children:"bash"})," argument is run with ",(0,r.jsx)(n.code,{children:"/usr/bin/env bash -c"}),". It has access to the same set of macros and variables as the ",(0,r.jsx)(n.code,{children:"cmd"})," argument."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"cmd"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"None"}),")"]}),"\n",(0,r.jsxs)(n.p,{children:["The shell command to run to generate the output file. It is the fallback for ",(0,r.jsx)(n.code,{children:"bash"})," and ",(0,r.jsx)(n.code,{children:"cmd_exe"})," arguments. The following environment variables are populated by Buck and available to the shell command. They are accessed using the syntax:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"${<variable>}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"${SRCS}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"${SRCS}"})}),"\n",(0,r.jsxs)(n.p,{children:["A string expansion of the ",(0,r.jsx)(n.code,{children:"srcs"})," argument delimited\nby the ",(0,r.jsx)(n.code,{children:"environment_expansion_separator"})," argument\nwhere each element of ",(0,r.jsx)(n.code,{children:"srcs"})," will be translated\ninto a relative path."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"${SRCDIR}"})}),"\n",(0,r.jsx)(n.p,{children:"The relative path to a directory to which sources are copied\nprior to running the command."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"${OUT}"})}),"\n",(0,r.jsxs)(n.p,{children:["The output file or directory for the ",(0,r.jsx)(n.code,{children:"genrule()"}),".\nThis variable will have whatever value is specified by\nthe ",(0,r.jsx)(n.code,{children:"out"})," argument if not using named outputs. If\nusing named outputs, this variable will be the output directory."]}),"\n",(0,r.jsx)(n.p,{children:"The value should be a valid filepath. The semantics of the shell\ncommand determine whether this filepath is treated as a file or a\ndirectory. If the filepath is a directory, then the shell command\nneeds to create it if not using named outputs. Otherwise, it will\nbe automatically created. All outputs (directories and files) must\nbe readable, writable, and (in the case of directories) executable\nby the current user."}),"\n",(0,r.jsx)(n.p,{children:"The file or directory specified by this variable must always\nbe written by this command. If not, the execution of this\nrule will be considered a failure, halting the build process."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"${TMP}"})}),"\n",(0,r.jsx)(n.p,{children:"A temporary directory which can be used for intermediate\nresults and will not be bundled into the output."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"cmd_exe"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"None"}),")"]}),"\n",(0,r.jsxs)(n.p,{children:["A platform-specific version of the shell command parameter ",(0,r.jsx)(n.code,{children:"cmd"}),". It runs on Windows and has a higher priority than ",(0,r.jsx)(n.code,{children:"cmd"}),". The ",(0,r.jsx)(n.code,{children:"cmd_exe"})," argument is run with ",(0,r.jsx)(n.code,{children:"cmd.exe /v:off /c"}),". It has access to the same set of macros and variables as the ",(0,r.jsx)(n.code,{children:"cmd"})," argument."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"contacts"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,r.jsx)(n.p,{children:"A list of organizational contacts for this rule. These could be individuals who you would contact in the event of a failure or other issue with the rule."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"contacts = [ 'Joe Sixpack', 'Erika Mustermann' ]\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"default_outs"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"None"}),")"]}),"\n",(0,r.jsxs)(n.p,{children:["Default output which must be present if the ",(0,r.jsx)(n.code,{children:"outs"})," arg is present. Otherwise does not apply."]}),"\n",(0,r.jsxs)(n.p,{children:["If a rule with ",(0,r.jsx)(n.code,{children:"outs"})," is consumed without an output label, the default output is returned. The\ndefault output does not need to be present in any of the named outputs defined in ",(0,r.jsx)(n.code,{children:"outs"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Note that a maximum of one value may be present in this list. For example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'default_outs = [ "output_one", ]\n'})}),"\n",(0,r.jsx)(n.p,{children:"is valid, whereas"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'default_outs = [ "output_one", "output_two", ]\n'})}),"\n",(0,r.jsx)(n.p,{children:"is not."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"enable_sandbox"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"None"}),")"]}),"\n",(0,r.jsx)(n.p,{children:"Whether this target should be executed in a sandbox or not."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"env"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"{}"}),")"]}),"\n",(0,r.jsx)(n.p,{children:"A map of variables to be set in the environment where the shell command is run."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"environment_expansion_separator"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"None"}),")"]}),"\n",(0,r.jsx)(n.p,{children:"The delimiter between paths in environment variables, such as SRCS, that can contain multiple paths. It can be useful to specify this parameter if the paths could contain spaces."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"error_handler_category"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"None"}),")"]}),"\n",(0,r.jsxs)(n.p,{children:["The error category name for errors produced by this genrule's error handler. Used in conjunction with ",(0,r.jsx)(n.code,{children:"error_handler_stderr_errorformats"})," and ",(0,r.jsx)(n.code,{children:"error_handler_stdout_errorformats"})," when calling ",(0,r.jsx)(n.code,{children:"ActionErrorCtx.parse_with_errorformat()"})," to categorize parsed errors."]}),"\n",(0,r.jsxs)(n.p,{children:["See ",(0,r.jsx)(n.a,{href:"https://buck2.build/docs/api/build/ActionErrorCtx/#actionerrorctxparse_with_errorformat",children:"https://buck2.build/docs/api/build/ActionErrorCtx/#actionerrorctxparse_with_errorformat"})," for more details."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"error_handler_stderr_errorformats"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"None"}),")"]}),"\n",(0,r.jsx)(n.p,{children:"List of Vim errorformat pattern strings used to parse error messages from stderr of failed genrule commands. These patterns extract structured error information (file paths, line numbers, error messages) from command output."}),"\n",(0,r.jsx)(n.p,{children:"When a genrule fails, the error handler attempts to match the stderr\nagainst these patterns."}),"\n",(0,r.jsxs)(n.p,{children:["See ",(0,r.jsx)(n.a,{href:"https://buck2.build/docs/api/build/ActionErrorCtx/#actionerrorctxparse_with_errorformat",children:"https://buck2.build/docs/api/build/ActionErrorCtx/#actionerrorctxparse_with_errorformat"})," for more details."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"error_handler_stdout_errorformats"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"None"}),")"]}),"\n",(0,r.jsxs)(n.p,{children:["Same as ",(0,r.jsx)(n.code,{children:"error_handler_stderr_errorformats"}),", but for stdout."]}),"\n",(0,r.jsxs)(n.p,{children:["See ",(0,r.jsx)(n.a,{href:"https://buck2.build/docs/api/build/ActionErrorCtx/#actionerrorctxparse_with_errorformat",children:"https://buck2.build/docs/api/build/ActionErrorCtx/#actionerrorctxparse_with_errorformat"})," for more details."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"executable"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"None"}),")"]}),"\n",(0,r.jsxs)(n.p,{children:["Whether the output of the genrule is itself executable. Marking an output as executable makes ",(0,r.jsx)(n.code,{children:"buck run"})," and ",(0,r.jsx)(n.code,{children:"$(exe ...)"})," macro expansion work with this target."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"executable_outs"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"None"}),")"]}),"\n",(0,r.jsxs)(n.p,{children:["Only valid if the ",(0,r.jsx)(n.code,{children:"outs"})," arg is present. Dictates which of those named outputs are marked as executable."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"labels"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,r.jsxs)(n.p,{children:["Set of arbitrary strings which allow you to annotate a ",(0,r.jsx)(n.a,{href:"https://buck2.build/docs/concepts/build_rule/",children:"build rule"})," with tags that can be searched for over an entire dependency tree using ",(0,r.jsx)(n.code,{children:"buck query()"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"licenses"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,r.jsxs)(n.p,{children:["Set of license files for this library. To get the list of license files for a given build rule and all of its dependencies, you can use ",(0,r.jsx)(n.a,{href:"https://buck2.build/docs/users/commands/query/",children:"buck query"})]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"out"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"None"}),")"]}),"\n",(0,r.jsxs)(n.p,{children:["The name of the output file or directory. The complete path to this argument is provided to the shell command through the ",(0,r.jsx)(n.code,{children:"OUT"})," environment variable. Only one of ",(0,r.jsx)(n.code,{children:"out"})," or ",(0,r.jsx)(n.code,{children:"outs"})," may be present."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"outs"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"None"}),")"]}),"\n",(0,r.jsxs)(n.p,{children:["Mapping defining ",(0,r.jsx)(n.code,{children:"named outputs"})," to output paths relative to the rule's output directory. Only one of ",(0,r.jsx)(n.code,{children:"out"})," or ",(0,r.jsx)(n.code,{children:"outs"})," may be present."]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'genrule(\n  name = "named_outputs",\n  outs = {\n    "output1": [\n      "out1.txt",\n    ],\n    "output2": [\n      "out2.txt",\n    ],\n  },\n  default_outs = [ "out1.txt" ],\n  cmd = "echo something> $OUT/out1.txt && echo another> $OUT/out2.txt",\n)\n'})}),"\n",(0,r.jsx)(n.p,{children:"Note that a maximum of one value may be present in the list in this map. For example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'outs = {\n  "output1": [\n    "out1.txt",\n  ],\n},\n'})}),"\n",(0,r.jsx)(n.p,{children:"is valid, whereas"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'outs = {\n  "output1": [\n    "out1.txt",\n    "out2.txt",\n  ],\n},\n'})}),"\n",(0,r.jsx)(n.p,{children:"is not."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"remote"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"None"}),")"]}),"\n",(0,r.jsx)(n.p,{children:"Opts this genrule in to remote execution. Note that it is only safe to execute a genrule remotely if it is completely hermetic and completely and correctly describes its dependencies. Defaults to false. This parameter is unstable. It is subject to removal, default reversal, and other arbitrary changes in the future."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"srcs"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,r.jsxs)(n.p,{children:["Either a list or a map of the source files which Buck makes available to the shell command at the path in the ",(0,r.jsx)(n.code,{children:"SRCDIR"})," environment variable. If you specify a list, the source files are the names in the list. If you specify a map, the source files are made available as the names in the keys of the map, where the values of the map are the original source file names."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"type"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"None"}),")"]}),"\n",(0,r.jsxs)(n.p,{children:["Specifies the ",(0,r.jsx)(n.em,{children:"type"}),' of this genrule. This is used for logging and is particularly useful for grouping genrules that share an underlying logical "type".']}),"\n",(0,r.jsxs)(n.p,{children:["For example, if you have the following ",(0,r.jsx)(n.code,{children:"cxx_genrule"})," defined\nin the root directory of your Buck project"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"cxx_genrule(\n  name = 'cxx_gen',\n  type = 'epilog',\n  cmd  = 'touch finish.txt; cp finish.txt $OUT',\n  out  = 'finish.txt'\n)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["then the following ",(0,r.jsx)(n.code,{children:"buck query"})," command"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"buck query \"attrfilter( type, 'epilog', '//...' )\"\n"})}),"\n",(0,r.jsx)(n.p,{children:"returns"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"//:cxx_gen\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"weight"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"None"}),")"]}),"\n",(0,r.jsx)(n.p,{children:"How many local slots these genrule should take when executing locally."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"examples",children:"Examples"}),"\n",(0,r.jsxs)(n.p,{children:["This genrule() uses a Python script to derive a new\n",(0,r.jsx)(n.code,{children:"AndroidManifest.xml"})," from an\n",(0,r.jsx)(n.code,{children:"AndroidManifest.xml"})," in the source tree.\nNote you don't need to prepend execution commands with\n",(0,r.jsx)(n.code,{children:"python"}),": Buck knows how to execute different\nkinds of binaries using ",(0,r.jsx)(n.code,{children:"$(exe)"})," command."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"\ngenrule(\n  name = 'generate_manifest',\n  srcs = [\n    'AndroidManifest.xml',\n  ],\n  bash = '$(exe //python/android:basic_to_full) '               '$SRCDIR/AndroidManifest.xml > $OUT',\n  cmd_exe = '$(exe //python/android:basic_to_full) '               '%SRCDIR%\\AndroidManifest.xml > %OUT%',\n  out = 'AndroidManifest.xml',\n)\n\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"\ngenrule(\n  name = 'generate_manifest_with_named_outputs',\n  srcs = [\n    'AndroidManifest.xml',\n  ],\n  bash = '$(exe //python/android:basic_to_full) '               '$SRCDIR/AndroidManifest.xml > $OUT/AndroidManifest.xml',\n  cmd_exe = '$(exe //python/android:basic_to_full) '               '%SRCDIR%\\AndroidManifest.xml > %OUT%\\AndroidManifest.xml',\n  outs =  {\n    \"manifest\": [ \"AndroidManifest.xml\" ],\n  },\n  default_outs = [ \"AndroidManifest.xml\" ],\n)\n\n"})}),"\n",(0,r.jsx)(n.p,{children:"For named outputs, build with any of the following:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"\n  buck build //:generate_manifest_with_named_outputs\n\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"\n  buck build //:generate_manifest_with_named_outputs[manifest]\n\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Consume in ",(0,r.jsx)(n.code,{children:"srcs"})," with:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'\nexport_file(\n    name = "magic1",\n    src = ":generate_manifest_with_named_outputs",\n    out = "some_dir_to_copy_to/AndroidManifest.xml",\n)\n\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'\nexport_file(\n    name = "magic2",\n    src = ":generate_manifest_with_named_outputs[manifest]",\n    out = "some_dir_to_copy_to/AndroidManifest.xml",\n)\n\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Note that ",(0,r.jsx)(n.code,{children:"magic1"})," consumes ",(0,r.jsx)(n.code,{children:"generate_manifest_with_named_outputs"}),"'s default\noutput. ",(0,r.jsx)(n.code,{children:"magic2"})," consumes ",(0,r.jsx)(n.code,{children:"generate_manifest_with_named_outputs"}),'\'s named\noutput "manifest," which happen to be pointing to the same output as the default output in this\ncase, but they do not have to point to the same output.']})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}}}]);