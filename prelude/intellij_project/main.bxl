load("@fbcode//buck2/prelude/intellij_project:libraries.bxl", "get_libraries", "get_project_library_contents", "get_project_library_file_name")
load("@fbcode//buck2/prelude/intellij_project:modules.bxl", "get_module_file_contents", "get_modules")

def _impl(ctx):
    all_nodes = ctx.cquery().deps(ctx.cli_args.targets, -1)
    all_analysis = ctx.analysis(all_nodes)

    final_output_dir_dict = {}
    action_factory = ctx.bxl_actions.action_factory()

    modules = get_modules(all_nodes, all_analysis)

    file_names = []
    for _, module in modules.items():
        file_name = module.file_name

        # TODO(T124403530) account for multiple copies of the same lib (with different configs)
        if file_name in file_names:
            continue
        file_names.append(file_name)
        module_output = _create_output(action_factory, module.file_name, final_output_dir_dict)
        action_factory.write(module_output, get_module_file_contents())

    libraries = get_libraries(all_nodes)

    # TODO(T124403530) support module libraries
    file_names = []
    for label, library in libraries.items():
        file_name = get_project_library_file_name(label)

        # TODO(T124405159) once we correct include config in the file name, we don't need to do this check.
        if file_name in file_names:
            continue
        file_names.append(file_name)
        library_output = _create_output(action_factory, file_name, final_output_dir_dict)
        action_factory.write(library_output, get_project_library_contents(library))

    output_module = _create_output(action_factory, "modules.xml", final_output_dir_dict)
    action_factory.write(output_module, """\
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ProjectModuleManager">
    <modules>
    </modules>
  </component>
</project>
""")

    dot_idea_dir = action_factory.symlinked_dir(".idea", final_output_dir_dict)

    ctx.output.print(ctx.output.ensure(dot_idea_dir).abs_path())

def _create_output(
        action_factory: "actions",
        output_path: str.type,
        final_output_dir_dict: dict.type) -> "artifact":
    output = action_factory.declare_output("outputs/{}".format(output_path))
    final_output_dir_dict[output_path] = output

    return output

generate_intellij_project = bxl(
    impl = _impl,
    cli_args = {
        "targets": cli_args.list(cli_args.target_label()),
    },
)
