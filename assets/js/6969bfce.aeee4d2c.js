"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[53959],{28453:(e,s,n)=>{n.d(s,{R:()=>c,x:()=>t});var o=n(96540);const i={},l=o.createContext(i);function c(e){const s=o.useContext(l);return o.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function t(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),o.createElement(l.Provider,{value:s},e.children)}},46781:(e,s,n)=>{n.d(s,{A:()=>o});const o=n.p+"assets/images/superconsole-71265cd99fd66f981336092604efff94.gif"},51342:(e,s,n)=>{n.d(s,{A:()=>o});const o=n.p+"assets/images/simpleconsole-5bfa37b932256fce081a21ce4f4c4b92.gif"},79281:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>r,contentTitle:()=>t,default:()=>a,frontMatter:()=>c,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"users/build_observability/interactive_console","title":"Buck2 Consoles","description":"Buck2 offers several console types for build-like commands (e.g. build,","source":"@site/../docs/users/build_observability/interactive_console.md","sourceDirName":"users/build_observability","slug":"/users/build_observability/interactive_console","permalink":"/docs/users/build_observability/interactive_console","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"interactive_console","title":"Buck2 Consoles"},"sidebar":"main","previous":{"title":"Why is Buck2 hanging?","permalink":"/docs/users/faq/buck_hanging"},"next":{"title":"Logging","permalink":"/docs/users/build_observability/logging"}}');var i=n(74848),l=n(28453);const c={id:"interactive_console",title:"Buck2 Consoles"},t=void 0,r={},d=[{value:"Simpleconsole",id:"simpleconsole",level:2},{value:"Demo",id:"demo",level:3},{value:"Superconsole",id:"superconsole",level:2},{value:"Demo",id:"demo-1",level:3},{value:"Toggles",id:"toggles",level:3},{value:"No console",id:"no-console",level:2}];function h(e){const s={a:"a",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(s.p,{children:["Buck2 offers several console types for build-like commands (e.g. ",(0,i.jsx)(s.code,{children:"build"}),",\n",(0,i.jsx)(s.code,{children:"install"}),", ",(0,i.jsx)(s.code,{children:"test"}),", etc.). The console is always written to stderr."]}),"\n",(0,i.jsxs)(s.p,{children:["The console can be specified via the ",(0,i.jsx)(s.code,{children:"--console"})," flag, or the ",(0,i.jsx)(s.code,{children:"BUCK_CONSOLE"})," env\nvariable. The default console type is ",(0,i.jsx)(s.code,{children:"auto"}),". Supported ",(0,i.jsx)(s.code,{children:"--console"})," types:"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"auto"})," - Default console type. Auto defaults to the superconsole if the stderr\nis a TTY. Otherwise will uses simple console"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"simple"})," - Build a simpleconsole with TTY, if TTY is supported by the OS. See\n",(0,i.jsx)(s.a,{href:"#simpleconsole",children:"Simpleconsole"})]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"simplenotty"})," - Build a simpleconsole without TTY. See\n",(0,i.jsx)(s.a,{href:"#simpleconsole",children:"Simpleconsole"})]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"simpletty"})," - Build a simpleconsole with TTY. See\n",(0,i.jsx)(s.a,{href:"#simpleconsole",children:"Simpleconsole"})]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"super"})," - Build a superconsole regardless of whether stderr is a TTY. See\n",(0,i.jsx)(s.a,{href:"#superconsole",children:"Superconsole"})]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"none"})," - See ",(0,i.jsx)(s.a,{href:"#no-console",children:"No console"})]}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:["If ",(0,i.jsx)(s.code,{children:"simplenotty"})," or ",(0,i.jsx)(s.code,{children:"none"})," are specified, or if TTY is not supported by the OS,\nthen we strip out any color within the error messages."]}),"\n",(0,i.jsx)(s.p,{children:"All console options will output the build result, whether succeeded or not, to\nstdout. Note that action execution stderr is hidden if the build succeeded."}),"\n",(0,i.jsx)(s.p,{children:"The simple and superconsole will also print metadata about the build itself,\nsuch as the Buck2 UUID, the percentage of cache hits, and the number of action\ncommands ran. In addition, they will print the event spans detected within the\nbuild."}),"\n",(0,i.jsx)(s.h2,{id:"simpleconsole",children:"Simpleconsole"}),"\n",(0,i.jsx)(s.p,{children:"The simpleconsole prints the stdout/stderr messages and event spans, line by\nline. There is no resource usage telemetry emitted."}),"\n",(0,i.jsx)(s.h3,{id:"demo",children:"Demo"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.img,{alt:"Simpleconsole running a build",src:n(51342).A+"",width:"1006",height:"266"})}),"\n",(0,i.jsx)(s.h2,{id:"superconsole",children:"Superconsole"}),"\n",(0,i.jsxs)(s.p,{children:["The superconsole uses the\n",(0,i.jsx)(s.a,{href:"https://github.com/facebookincubator/superconsole",children:"superconsole"})," library to\nprovide an interactive console which shows the event spans going on within\nBuck2."]}),"\n",(0,i.jsx)(s.h3,{id:"demo-1",children:"Demo"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.img,{alt:"Superconsole running a build",src:n(46781).A+"",width:"1465",height:"452"})}),"\n",(0,i.jsx)(s.h3,{id:"toggles",children:"Toggles"}),"\n",(0,i.jsx)(s.p,{children:"The superconsole also provides several toggles to inspect ongoing Buck2\ntelemetry."}),"\n",(0,i.jsxs)(s.p,{children:["To see what's available you can press ",(0,i.jsx)(s.code,{children:"?"})," or ",(0,i.jsx)(s.code,{children:"h"}),". This will work as long as\nstdin is a TTY, which will be true most of the time if you're not piping\nanything into Buck2. To disable to allow alternate use of stdin, or for follow\nup pasted commands to not get swallowed, you can set the\n",(0,i.jsx)(s.code,{children:"BUCK_NO_INTERACTIVE_CONSOLE"})," environment variable, or use the flag\n",(0,i.jsx)(s.code,{children:"--no-interactive-console"}),"."]}),"\n",(0,i.jsx)(s.p,{children:"We support the following toggles:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"c"})," - toggle commands (shown in superconsole by default)"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"d"})," - toggle DICE key states"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"e"})," - toggle debugging events, such as spans and instant event counts"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"2"})," - toggle two lines mode when showing events"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"r"})," - toggle detailed remote execution info, such as uploads, downloads, and\naction cache calls"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"i"})," - toggle I/O counters"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"p"})," - display target configurations"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"+"})," - show more lines"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"-"})," - show fewer lines"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"h"})," - show help"]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"no-console",children:"No console"}),"\n",(0,i.jsxs)(s.p,{children:["When specifying the ",(0,i.jsx)(s.code,{children:"none"})," console type, Buck2 will only print if the build\nsucceeded, or the error if the build failed."]})]})}function a(e={}){const{wrapper:s}={...(0,l.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}}}]);