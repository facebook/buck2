"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[55984],{9265:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"prelude/rules/erlang/erlang_test","title":"erlang_test","description":"The erlangtest ruls defines a test target for a single test suite. In most cases you want to define multiple suites in one go. The erlangtests macro allows users to generate erlangtest targets for multiple test suites. Each suite SUITE.erl will have a generated hidden erlangtest target whose name is SUITE.","source":"@site/../docs/prelude/rules/erlang/erlang_test.md","sourceDirName":"prelude/rules/erlang","slug":"/prelude/rules/erlang/erlang_test","permalink":"/docs/prelude/rules/erlang/erlang_test","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"ruleSidebar","previous":{"title":"erlang_release","permalink":"/docs/prelude/rules/erlang/erlang_release"},"next":{"title":"git","permalink":"/docs/prelude/rules/git/"}}');var i=s(74848),r=s(28453);s(56289);const l={},a="erlang_test",d={},c=[{value:"Details",id:"details",level:3},{value:"Function Signature",id:"function-signature",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Examples",id:"examples",level:3}];function o(e){const t={a:"a",code:"code",h1:"h1",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"erlang_test",children:"erlang_test"})}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"erlang_test"})," ruls defines a test target for a single test suite. In most cases you want to define multiple suites in one go. The ",(0,i.jsx)(t.code,{children:"erlang_tests"})," macro allows users to generate ",(0,i.jsx)(t.code,{children:"erlang_test"})," targets for multiple test suites. Each suite ",(0,i.jsx)(t.code,{children:"<name>_SUITE.erl"})," will have a generated hidden ",(0,i.jsx)(t.code,{children:"erlang_test"})," target whose name is ",(0,i.jsx)(t.code,{children:"<name>_SUITE"}),"."]}),"\n",(0,i.jsx)(t.h3,{id:"details",children:"Details"}),"\n",(0,i.jsxs)(t.p,{children:["Each ",(0,i.jsx)(t.code,{children:"erlang_test"})," target implements tests using the Common Test library\n",(0,i.jsx)(t.a,{href:"https://www.erlang.org/doc/man/common_test.html",children:"OTP documentation"}),". They can,\nalthough ",(0,i.jsx)(t.strong,{children:"it is not recommended"}),', also act as dependencies of other tests. The\ndefault output of this rule is a "test_folder", consisting of the compiled test suite\nand the data directory.']}),"\n",(0,i.jsxs)(t.p,{children:["For each suite  ",(0,i.jsx)(t.code,{children:"<name>_SUITE.erl"}),", if a data_dir ",(0,i.jsx)(t.code,{children:"<name>_SUITE_data"})," is present along the suite,\n(as per ",(0,i.jsx)(t.a,{href:"https://www.erlang.org/doc/apps/common_test/write_test_chapter.html#data-and-private-directories",children:"the data_dir naming scheme for ct"}),"),\nit will automatically adds the corresponding resource target to the generated test target of the suite.\nResources will be placed in the ",(0,i.jsx)(t.a,{href:"https://www.erlang.org/doc/apps/common_test/write_test_chapter.html#data_priv_dir",children:"Data directory (data_dir)"}),"\nof each of the suite."]}),"\n",(0,i.jsxs)(t.p,{children:["It allows the writer of the rule to add global configuration files and global default\ndependencies (e.g ",(0,i.jsx)(t.code,{children:"meck"}),"). These ones should be specified using global\nvariables ",(0,i.jsx)(t.code,{children:"erlang.erlang_tests_default_apps"})," and ",(0,i.jsx)(t.code,{children:"erlang.erlang_tests_default_config"}),"\nrespectively."]}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"erlang_tests"})," macro forwards all attributes to the ",(0,i.jsx)(t.code,{children:"erlang_test"}),". It defines some attributes\nthat control how the targets get generated:"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"srcs"}),' ([source]): Set of files that the suites might depend on and that are not part of any specific application.\nA "meta" application having those files as sources will automatically be created, and included in the dependencies\nof the tests.']}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"One can call"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"buck2 build //my_app:test_SUITE"})," to compile the test files together with its dependencies."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"buck2 test //my_app:other_test_SUITE"})," to run the test."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"buck2 run //my_app:other_test_SUITE"})," to open an interactive test shell, where tests can be run iteratively."]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["buck2 test will rely on tpx to run the suite. To get access to tpx commands, add ",(0,i.jsx)(t.code,{children:"--"})," after the\ntarget. For example:"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"buck2 test //my_app:other_test_SUITE -- --help"})," will print the list of tpx available\ncommand line parameters."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"buck2 test //my_app:other_test_SUITE -- group.mycase"})," will only run those test cases\nthat match the pattern ",(0,i.jsx)(t.code,{children:"group.mycase"})]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"function-signature",children:"Function Signature"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'def erlang_test(\n    *,\n    name: str,\n    default_target_platform: None | str = None,\n    target_compatible_with: list[str] = [],\n    compatible_with: list[str] = [],\n    exec_compatible_with: list[str] = [],\n    visibility: list[str] = [],\n    within_view: list[str] = ["PUBLIC"],\n    metadata: OpaqueMetadata = {},\n    tests: list[str] = [],\n    modifiers: OpaqueMetadata = [],\n    _apple_platforms: dict[str, str] = {},\n    _artifact_annotation_mfa: str = "artifact_annotations:default_annotation/1",\n    _cli_lib: str = "prelude//erlang/common_test/test_cli_lib:test_cli_lib",\n    _ct_opts: str = "",\n    _inner_trampolines: list[str] = [],\n    _providers: str = "",\n    _test_binary_lib: str = "prelude//erlang/common_test/test_binary:test_binary",\n    _toolchain: str = "gh_facebook_buck2_shims_meta//:erlang-default",\n    _trampolines: list[str] = [],\n    common_app_env: dict[str, str] = {},\n    config_files: list[str] = [],\n    contacts: list[str] = [],\n    deps: list[str] = [],\n    env: dict[str, str] = {},\n    extra_ct_hooks: list[str] = [],\n    extra_erl_flags: list[str] = [],\n    labels: list[str] = [],\n    os_env: None | dict[str, str] = None,\n    remote_execution: None | str | dict[str, None | bool | int | str | list[dict[str, str]] | dict[str, str | list[str]]] = None,\n    resources: list[str] = [],\n    shell_configs: list[str] = [],\n    shell_libs: list[str] = ["prelude//erlang/shell:buck2_shell_utils"],\n    suite: str,\n) -> None\n'})}),"\n",(0,i.jsx)(t.h3,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"name"}),": (required)"]}),"\n",(0,i.jsx)(t.p,{children:"name of the target"}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"default_target_platform"}),": (defaults to: ",(0,i.jsx)(t.code,{children:"None"}),")"]}),"\n",(0,i.jsx)(t.p,{children:"specifies the default target platform, used when no platforms are specified on the command line"}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"target_compatible_with"}),": (defaults to: ",(0,i.jsx)(t.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(t.p,{children:"a list of constraints that are required to be satisfied for this target to be compatible with a configuration"}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"compatible_with"}),": (defaults to: ",(0,i.jsx)(t.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(t.p,{children:"a list of constraints that are required to be satisfied for this target to be compatible with a configuration"}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"exec_compatible_with"}),": (defaults to: ",(0,i.jsx)(t.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(t.p,{children:"a list of constraints that are required to be satisfied for this target to be compatible with an execution platform"}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"visibility"}),": (defaults to: ",(0,i.jsx)(t.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(t.p,{children:"a list of visibility patterns restricting what targets can depend on this one"}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"within_view"}),": (defaults to: ",(0,i.jsx)(t.code,{children:'["PUBLIC"]'}),")"]}),"\n",(0,i.jsx)(t.p,{children:"a list of visibility patterns restricting what this target can depend on"}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"metadata"}),": (defaults to: ",(0,i.jsx)(t.code,{children:"{}"}),")"]}),"\n",(0,i.jsx)(t.p,{children:"a key-value map of metadata associated with this target"}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"tests"}),": (defaults to: ",(0,i.jsx)(t.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(t.p,{children:"a list of targets that provide tests for this one"}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"modifiers"}),": (defaults to: ",(0,i.jsx)(t.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(t.p,{children:"an array of modifiers associated with this target"}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"_inner_trampolines"}),": (defaults to: ",(0,i.jsx)(t.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(t.p,{children:"trampolines that are used for the test node"}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"_trampolines"}),": (defaults to: ",(0,i.jsx)(t.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(t.p,{children:"trampolines that are used for the test binary"}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"common_app_env"}),": (defaults to: ",(0,i.jsx)(t.code,{children:"{}"}),")"]}),"\n",(0,i.jsxs)(t.p,{children:["Application environment variables for the ",(0,i.jsx)(t.code,{children:"common"})," application."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"config_files"}),": (defaults to: ",(0,i.jsx)(t.code,{children:"[]"}),")"]}),"\n",(0,i.jsxs)(t.p,{children:["Will specify what config files the erlang beam machine running test with should load, for reference look at ",(0,i.jsx)(t.a,{href:"https://www.erlang.org/doc/man/config.html",children:"OTP documentation"}),". These ones should consist of default_output of some targets. In general, this field is filled with target coming from then ",(0,i.jsx)(t.code,{children:"export_file"})," rule, as in the example below."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"contacts"}),": (defaults to: ",(0,i.jsx)(t.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(t.p,{children:"A list of organizational contacts for this rule. These could be individuals who you would contact in the event of a failure or other issue with the rule."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"contacts = [ 'Joe Sixpack', 'Erika Mustermann' ]\n"})}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"deps"}),": (defaults to: ",(0,i.jsx)(t.code,{children:"[]"}),")"]}),"\n",(0,i.jsxs)(t.p,{children:["The set of dependencies needed for all suites included in the target to compile and run. They could be either ",(0,i.jsx)(t.code,{children:"erlang_app(lication)"})," or ",(0,i.jsx)(t.code,{children:"erlang_test"})," targets, although the latter is discouraged. If some suites need to access common methods, a common helper file should be created and included in the ",(0,i.jsx)(t.code,{children:"srcs"})," field of the ",(0,i.jsx)(t.code,{children:"erlang_tests"})," target. If some applications are included as dependencies of this target, their private include will automatically be pulled and made available for the test. That allows tests to access the private header files from the applications under test."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"env"}),": (defaults to: ",(0,i.jsx)(t.code,{children:"{}"}),")"]}),"\n",(0,i.jsx)(t.p,{children:"Add the given values to the environment variables with which the test is executed."}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"extra_ct_hooks"}),": (defaults to: ",(0,i.jsx)(t.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(t.p,{children:"List of additional Common Test hooks. The strings are interpreted as Erlang terms."}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"extra_erl_flags"}),": (defaults to: ",(0,i.jsx)(t.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(t.p,{children:"List of additional command line arguments given to the erl command invocation. These arguments are added to the front of the argument list."}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"labels"}),": (defaults to: ",(0,i.jsx)(t.code,{children:"[]"}),")"]}),"\n",(0,i.jsxs)(t.p,{children:["Set of arbitrary strings which allow you to annotate a ",(0,i.jsx)(t.a,{href:"https://buck2.build/docs/concepts/build_rule/",children:"build rule"})," with tags that can be searched for over an entire dependency tree using ",(0,i.jsx)(t.code,{children:"buck query()"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"os_env"}),": (defaults to: ",(0,i.jsx)(t.code,{children:"None"}),")"]}),"\n",(0,i.jsx)(t.p,{children:"This attribute allows to set additional values for the operating system environment for invocations to the Erlang toolchain."}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"resources"}),": (defaults to: ",(0,i.jsx)(t.code,{children:"[]"}),")"]}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"resources"})," field specifies targets whose default output are placed in the test ",(0,i.jsx)(t.code,{children:"data_dir"})," directory for all the suites present in the macro target. Additionally, if data directory are present in the directory along the suite, this one will be pulled automatically for the relevant suite."]}),"\n",(0,i.jsxs)(t.p,{children:["Any target can be used, e.g. if you want to place a built escript in the ",(0,i.jsx)(t.code,{children:"data_dir"})," directory, you can use\nan ",(0,i.jsx)(t.code,{children:"erlang_escript"})," target."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"shell_configs"}),": (defaults to: ",(0,i.jsx)(t.code,{children:"[]"}),")"]}),"\n",(0,i.jsxs)(t.p,{children:["This attribute allows to set config files for the shell. The dependencies that are typically used here are ",(0,i.jsx)(t.code,{children:"export_file"})," targets."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"shell_libs"}),": (defaults to: ",(0,i.jsx)(t.code,{children:'["prelude//erlang/shell:buck2_shell_utils"]'}),")"]}),"\n",(0,i.jsxs)(t.p,{children:["This attribute allows to define additional dependencies for the shell. By default this is set to ",(0,i.jsx)(t.code,{children:'["prelude//erlang/shell:buck2_shell_utils"]'})," which includes a ",(0,i.jsx)(t.code,{children:"user_default"})," module that loads and compiles modules with buck2 mechanisms."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"suite"}),": (required)"]}),"\n",(0,i.jsxs)(t.p,{children:["The source file for the test suite. If you are using the macro, you should use the ",(0,i.jsx)(t.code,{children:"suites"})," attribute instead."]}),"\n",(0,i.jsx)(t.p,{children:"The suites attribute specifies which erlang_test targets should be generated. For each suite \"path_to_suite/suite_SUITE.erl\" an\nimplicit 'erlang_test' target suite_SUITE will be generated."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"examples",children:"Examples"}),"\n",(0,i.jsxs)(t.p,{children:['erlang_test(\nname = "unit_test_SUITE",\nsuite = "unit_test_SUTIE.erl",\ndeps = ["',":my_other_app",'"],\ncontacts = ["',(0,i.jsx)(t.a,{href:"mailto:author@email.com",children:"author@email.com"}),'"],\n)']}),"\n",(0,i.jsxs)(t.p,{children:['erlang_tests(\nsuites = ["test_SUITE.erl", "other_test_SUITE".erl],\ndeps = ["',":my_app",'"],\ncontacts = ["',(0,i.jsx)(t.a,{href:"mailto:author@email.com",children:"author@email.com"}),'"],\n)']})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>l,x:()=>a});var n=s(96540);const i={},r=n.createContext(i);function l(e){const t=n.useContext(r);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);