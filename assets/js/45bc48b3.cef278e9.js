"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[64766],{28453:(e,t,a)=>{a.d(t,{R:()=>r,x:()=>l});var n=a(96540);const i={},s=n.createContext(i);function r(e){const t=n.useContext(s);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),n.createElement(s.Provider,{value:t},e.children)}},61053:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>l,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"api/bxl/index","title":"Bxl APIs","description":"anon\\\\_rule","source":"@site/../docs/api/bxl/index.md","sourceDirName":"api/bxl","slug":"/api/bxl/","permalink":"/docs/api/bxl/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"apiSidebar","previous":{"title":"regex","permalink":"/docs/api/build/regex"},"next":{"title":"ActionAttr","permalink":"/docs/api/bxl/ActionAttr"}}');var i=a(74848),s=a(28453),r=a(56289);const l={},o="Bxl APIs",c={},d=[{value:"anon_rule",id:"anon_rule",level:2},{value:"ctarget_set",id:"ctarget_set",level:2},{value:"dynamic_actions",id:"dynamic_actions",level:2},{value:"fail_no_stacktrace",id:"fail_no_stacktrace",level:2},{value:"get_path_without_materialization",id:"get_path_without_materialization",level:2},{value:"get_paths_without_materialization",id:"get_paths_without_materialization",level:2},{value:"main",id:"main",level:2},{value:"now",id:"now",level:2},{value:"read_package_value",id:"read_package_value",level:2},{value:"utarget_set",id:"utarget_set",level:2}];function h(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"bxl-apis",children:"Bxl APIs"})}),"\n",(0,i.jsx)(t.h2,{id:"anon_rule",children:"anon_rule"}),"\n",(0,i.jsx)("pre",{class:"language-python",children:(0,i.jsxs)("code",{children:['def anon_rule(\n*,\nimpl: typing.Callable["*, bxl_ctx: ',(0,i.jsx)(r.default,{to:"/docs/api/bxl/Context",children:"bxl.Context"}),', attrs: struct(..)", list[Provider]],\nattrs: dict[',(0,i.jsx)(r.default,{to:"/docs/api/starlark/str",children:"str"}),", ",(0,i.jsx)(r.default,{to:"/docs/api/build/Attr",children:"Attr"}),"],\ndoc: ",(0,i.jsx)(r.default,{to:"/docs/api/starlark/str",children:"str"}),' = "",\nartifact_promise_mappings: dict[',(0,i.jsx)(r.default,{to:"/docs/api/starlark/str",children:"str"}),", typing.Callable[[typing.Any], list]] = ...,\n) -> def(**kwargs: typing.Any) -> None"]})}),"\n",(0,i.jsx)(t.p,{children:"Create a new anonymous rule."}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h2,{id:"ctarget_set",children:"ctarget_set"}),"\n",(0,i.jsx)("pre",{class:"language-python",children:(0,i.jsxs)("code",{children:["def ctarget_set(\nnodes: list[",(0,i.jsx)(r.default,{to:"/docs/api/bxl/ConfiguredTargetNode",children:"bxl.ConfiguredTargetNode"}),"] = ...,\n) -> ",(0,i.jsx)(r.default,{to:"/docs/api/bxl/ConfiguredTargetSet",children:"target_set"})]})}),"\n",(0,i.jsx)(t.p,{children:"Creates a target set from a list of configured nodes."}),"\n",(0,i.jsx)(t.p,{children:"Sample usage:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"def _impl_ctarget_set(ctx):\n    targets = bxl.ctarget_set([cnode_a, cnode_b])\n    ctx.output.print(type(targets))\n    ctx.output.print(len(targets))\n"})}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h2,{id:"dynamic_actions",children:"dynamic_actions"}),"\n",(0,i.jsx)("pre",{class:"language-python",children:(0,i.jsxs)("code",{children:['def dynamic_actions(\n*,\nimpl: typing.Callable["*, actions: ',(0,i.jsx)(r.default,{to:"/docs/api/build/AnalysisActions",children:"AnalysisActions"}),', **kwargs: typing.Any", list[Provider]],\nattrs: dict[',(0,i.jsx)(r.default,{to:"/docs/api/starlark/str",children:"str"}),", ",(0,i.jsx)(r.default,{to:"/docs/api/build/dynattrs/DynamicAttrType",children:"DynamicAttrType"}),"],\n) -> ",(0,i.jsx)(r.default,{to:"/docs/api/build/DynamicActionsCallable",children:"DynamicActionCallable"})]})}),"\n",(0,i.jsxs)(t.p,{children:["Create new bxl dynamic action callable. Returned object will be callable, and the result of calling it can be passed to ",(0,i.jsx)(t.code,{children:"ctx.actions.dynamic_output_new"}),"."]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h2,{id:"fail_no_stacktrace",children:"fail_no_stacktrace"}),"\n",(0,i.jsx)("pre",{class:"language-python",children:(0,i.jsx)("code",{children:"def fail_no_stacktrace(*args) -> None"})}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h2,{id:"get_path_without_materialization",children:"get_path_without_materialization"}),"\n",(0,i.jsx)("pre",{class:"language-python",children:(0,i.jsxs)("code",{children:["def get_path_without_materialization(\nthis: ",(0,i.jsx)(r.default,{to:"/docs/api/build/PromiseArtifact",children:"Artifact"}),",\nctx: ",(0,i.jsx)(r.default,{to:"/docs/api/bxl/Context",children:"bxl.Context"}),",\n/,\n*,\nabs: ",(0,i.jsx)(r.default,{to:"/docs/api/starlark/bool",children:"bool"})," = False,\n) -> ",(0,i.jsx)(r.default,{to:"/docs/api/starlark/str",children:"str"})]})}),"\n",(0,i.jsx)(t.p,{children:"The output path of an artifact-like (source, build, declared). Takes an optional boolean to print the absolute or relative path. Note that this method returns an artifact path without asking for the artifact to be materialized (i.e. it may not actually exist on the disk yet)."}),"\n",(0,i.jsx)(t.p,{children:"This is a risky function to call because you may accidentally pass this path to further BXL actions\nthat expect the artifact to be materialized. If this happens, the BXL script will error out.\nIf you want the path without materialization for other uses that don\u2019t involve passing them into\nfurther actions, then it\u2019s safe."}),"\n",(0,i.jsx)(t.p,{children:"Sample usage:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'def _impl_get_path_without_materialization(ctx):\n    owner = ctx.cquery().owner("cell//path/to/file")[0]\n    artifact = owner.get_source("cell//path/to/file", ctx)\n    source_artifact_project_rel_path = get_path_without_materialization(artifact, ctx)\n    ctx.output.print(source_artifact_project_rel_path) # Note this artifact is NOT ensured or materialized\n'})}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h2,{id:"get_paths_without_materialization",children:"get_paths_without_materialization"}),"\n",(0,i.jsx)("pre",{class:"language-python",children:(0,i.jsxs)("code",{children:["def get_paths_without_materialization(\ncmd_line: ",(0,i.jsx)(r.default,{to:"/docs/api/build/PromiseArtifact",children:"Artifact"})," | ",(0,i.jsx)(r.default,{to:"/docs/api/build/CellPath",children:"CellPath"})," | ",(0,i.jsx)(r.default,{to:"/docs/api/build/CellRoot",children:"CellRoot"})," | ",(0,i.jsx)(r.default,{to:"/docs/api/build/Label",children:"Label"})," | ",(0,i.jsx)(r.default,{to:"/docs/api/build/OutputArtifact",children:"OutputArtifact"})," | ",(0,i.jsx)(r.default,{to:"/docs/api/build/ProjectRoot",children:"ProjectRoot"})," | ",(0,i.jsx)(r.default,{to:"/docs/api/build/ResolvedStringWithMacros",children:"ResolvedStringWithMacros"})," | ",(0,i.jsx)(r.default,{to:"/docs/api/build/TaggedCommandLine",children:"TaggedCommandLine"})," | ",(0,i.jsx)(r.default,{to:"/docs/api/build/TargetLabel",children:"TargetLabel"})," | ",(0,i.jsx)(r.default,{to:"/docs/api/build/TransitiveSetArgsProjection",children:"TransitiveSetArgsProjection"})," | ",(0,i.jsx)(r.default,{to:"/docs/api/build/WriteJsonCliArgs",children:"WriteJsonCliArgs"})," | ",(0,i.jsx)(r.default,{to:"/docs/api/build/cmd_args",children:"cmd_args"})," | ",(0,i.jsx)(r.default,{to:"/docs/api/starlark/str",children:"str"})," | RunInfo,\nctx: ",(0,i.jsx)(r.default,{to:"/docs/api/bxl/Context",children:"bxl.Context"}),",\n/,\n*,\nabs: ",(0,i.jsx)(r.default,{to:"/docs/api/starlark/bool",children:"bool"})," = False,\n)"]})}),"\n",(0,i.jsxs)(t.p,{children:["The output paths of a ",(0,i.jsx)(t.code,{children:"cmd_args()"})," inputs. The output paths will be returned as a list. Takes an optional boolean to print the absolute or relative path. Note that this method returns an artifact path without asking for the artifact to be materialized, (i.e. it may not actually exist on the disk yet)."]}),"\n",(0,i.jsx)(t.p,{children:"This is a risky function to call because you may accidentally pass this path to further BXL actions\nthat expect the artifact to be materialized. If this happens, the BXL script will error out.\nIf you want the path without materialization for other uses that don\u2019t involve passing them into\nfurther actions, then it\u2019s safe."}),"\n",(0,i.jsx)(t.p,{children:"Sample usage:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'def _impl_get_paths_without_materialization(ctx):\n    node = ctx.configured_targets("root//bin:the_binary")\n    providers = ctx.analysis(node).providers()\n    path = get_paths_without_materialization(providers[RunInfo], abs=True) # Note this artifact is NOT ensured or materialized\n    ctx.output.print(path)\n'})}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h2,{id:"main",children:"main"}),"\n",(0,i.jsx)("pre",{class:"language-python",children:(0,i.jsxs)("code",{children:["def main(\n*,\nimpl: typing.Callable,\ncli_args: dict[",(0,i.jsx)(r.default,{to:"/docs/api/starlark/str",children:"str"}),", ",(0,i.jsx)(r.default,{to:"/docs/api/bxl/CliArgs",children:"bxl.CliArgs"}),"],\ndoc: ",(0,i.jsx)(r.default,{to:"/docs/api/starlark/str",children:"str"}),' = "",\n)']})}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h2,{id:"now",children:"now"}),"\n",(0,i.jsx)("pre",{class:"language-python",children:(0,i.jsx)("code",{children:"def now() -> bxl.Instant"})}),"\n",(0,i.jsx)(t.p,{children:"Creates an Instant at the current time."}),"\n",(0,i.jsx)(t.p,{children:"Sample usage:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"def _impl_elapsed_millis(ctx):\n    instant = now()\n    time_a = instant.elapsed_millis()\n    # do something that takes a long time\n    time_b = instant.elapsed_millis()\n\n    ctx.output.print(time_a)\n    ctx.output.print(time_b)\n"})}),"\n",(0,i.jsx)(t.p,{children:"This function is only accessible through Bxl."}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h2,{id:"read_package_value",children:"read_package_value"}),"\n",(0,i.jsx)("pre",{class:"language-python",children:(0,i.jsxs)("code",{children:["def read_package_value(\npackage_path: ",(0,i.jsx)(r.default,{to:"/docs/api/build/PackagePath",children:"PackagePath"})," | ",(0,i.jsx)(r.default,{to:"/docs/api/starlark/str",children:"str"}),",\nkey: ",(0,i.jsx)(r.default,{to:"/docs/api/starlark/str",children:"str"}),",\n/,\n)"]})}),"\n",(0,i.jsx)(t.p,{children:"Read package value from the specified package path."}),"\n",(0,i.jsx)(t.p,{children:"Returns the value specified in the PACKAGE file for the given package path and key,\nor None if not found."}),"\n",(0,i.jsxs)(t.p,{children:["This function returns the nearest ",(0,i.jsx)(t.code,{children:"name"})," value registered per ",(0,i.jsx)(t.code,{children:"PACKAGE"})," based on the given\n",(0,i.jsx)(t.code,{children:"PackagePath"})," or str, or None if such value does not exist."]}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"package"})," parameter accepts any of the following:"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["A ",(0,i.jsx)(t.code,{children:"PackagePath"})]}),"\n",(0,i.jsx)(t.li,{children:'A string representing a package path (e.g., "root//some/package")'}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"Sample usage:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'def _impl_read_package_value(ctx):\n    # Get a unconfigured target from the package we want to read metadata from\n    node = ctx.unconfigured_targets("root//some/package:target")\n    pkg_path = node.label.package_path\n\n    # Read a package value with the given key from the unconfigured target\n    pkg_value1 = bxl.read_package_value(pkg_path, "aaa.bbb")\n\n    pkg_value2 = bxl.read_package_value("root//path/to/pkg", "aaa.ccc")\n'})}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h2,{id:"utarget_set",children:"utarget_set"}),"\n",(0,i.jsx)("pre",{class:"language-python",children:(0,i.jsxs)("code",{children:["def utarget_set(\nnodes: list[",(0,i.jsx)(r.default,{to:"/docs/api/bxl/UnconfiguredTargetNode",children:"bxl.UnconfiguredTargetNode"}),"] = ...,\n) -> ",(0,i.jsx)(r.default,{to:"/docs/api/bxl/UnconfiguredTargetSet",children:"target_set"})]})}),"\n",(0,i.jsx)(t.p,{children:"Creates a target set from a list of unconfigured nodes."}),"\n",(0,i.jsx)(t.p,{children:"Sample usage:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'def _impl_utarget_set(ctx):\n    unode_a = ctx.unconfigured_targets("root//bin:foo")\n    unode_b = ctx.unconfigured_targets("root//bin:bar")\n    targets = bxl.utarget_set([unode_a, unode_b])\n    ctx.output.print(type(targets))\n    ctx.output.print(len(targets))\n'})})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}}}]);