/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under both the MIT license found in the
 * LICENSE-MIT file in the root directory of this source tree and the Apache
 * License, Version 2.0 found in the LICENSE-APACHE file in the root directory
 * of this source tree.
 */

syntax = "proto3";

package buck.daemon;

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "data.proto";
import "subscription.proto";

message DaemonProcessInfo {
  int64 pid = 1;
  string endpoint = 2;
  // This is only informative, but kept as this gets serialized to JSON so it
  // can't be removed.
  string version = 3;
  string auth_token = 4;
}

// Controls whether we will use a given daemon or not.
message DaemonConstraints {
  enum TraceIoState {
    DISABLED = 0;
    ENABLED = 1;
    EXISTING = 2;
  }

  string version = 1;
  optional string user_version = 2;
  TraceIoState trace_io_state = 3;
}

message KillRequest {
  reserved 3;
  string reason = 1;
  google.protobuf.Duration timeout = 2;
  repeated string callers = 4;
}

message KillResponse {}

message StatusRequest {
  bool snapshot = 1;
}

message StatusResponse {
  DaemonProcessInfo process_info = 1;
  google.protobuf.Timestamp start_time = 2;
  google.protobuf.Duration uptime = 3;
  reserved 4;
  reserved 5;
  reserved 6;
  buck.data.Snapshot snapshot = 7;
  DaemonConstraints daemon_constraints = 8;
}

message PingRequest {
  google.protobuf.Duration delay = 1;
}

message PingResponse {}

message ClientContext {
  string working_dir = 1;
  repeated ConfigOverride config_overrides = 3;
  /// Empty string means not specified.
  string target_platform = 5;
  enum HostPlatformOverride {
    DEFAULT_PLATFORM = 0;
    LINUX = 1;
    MAC_OS = 2;
    WINDOWS = 3;
  }
  HostPlatformOverride host_platform = 6;
  string oncall = 7;
  bool disable_starlark_types = 8;
  string trace_id = 9;
  bool reuse_current_config = 10;
  optional string daemon_uuid = 11;
  repeated string sanitized_argv = 12;
  enum HostArchOverride {
    DEFAULT_ARCH = 0;
    AArch64 = 1;
    X86_64 = 2;
  }
  HostArchOverride host_arch = 13;
  repeated string argfiles = 14;

  /// Contents of `BUCK2_HARD_ERROR` environment variable.
  string buck2_hard_error = 20;
}

message TargetsRequest {
  reserved 3 to 16, 18, 4242000;

  enum TargetHashFileMode {
    PATHS_ONLY = 0;
    PATHS_AND_CONTENTS = 1;
    NO_FILES = 2; // Would like this to be named NONE, but not allowable
  }

  enum TargetHashGraphType {
    NONE = 0;
    UNCONFIGURED = 1;
    CONFIGURED = 2;
  }

  enum OutputFormat {
    UNKNOWN = 0;
    TEXT = 1;
    JSON = 2;
    JSON_LINES = 3;
    STATS = 4;
  }

  message ResolveAlias {}

  message Other {
    reserved 4;

    repeated string output_attributes = 5;

    TargetHashGraphType target_hash_graph_type = 6;
    TargetHashFileMode target_hash_file_mode = 7;
    repeated string target_hash_modified_paths = 8;
    bool target_hash_use_fast_hash = 9;

    bool target_call_stacks = 10;

    bool include_default_attributes = 11;
    bool target_hash_recursive = 12;
    bool keep_going = 13;
    bool streaming = 14;
    bool cached = 15;
    bool imports = 16;
  }

  ClientContext context = 1;
  repeated buck.data.TargetPattern target_patterns = 2;

  optional string output = 17;
  OutputFormat output_format = 19;

  oneof targets {
    ResolveAlias resolve_alias = 20;
    Other other = 21;
  }
  Concurrency concurrency = 22;
}

message TargetsResponse {
  string serialized_targets_output = 100;
  uint64 error_count = 101;
}

message TargetsShowOutputsResponse {
  message TargetPaths {
    string target = 1;
    repeated string paths = 2;
  }
  repeated TargetPaths targets_paths = 1;
}

// `buck2 ctargets` command
message ConfiguredTargetsRequest {
  ClientContext context = 1;
  repeated buck.data.TargetPattern target_patterns = 2;
  bool target_call_stacks = 10;
  bool skip_missing_targets = 11;
}

message ConfiguredTargetsResponse {
  string serialized_targets_output = 100;
}

enum QueryOutputFormat {
  DEFAULT = 0;
  JSON = 1;
  DOT = 2;
  DOT_COMPACT = 3;
}

message AqueryRequest {
  ClientContext context = 1;
  string query = 2;
  repeated string output_attributes = 3;
  // The literals for a repeated query (one containing `%s`).
  repeated string query_args = 4;

  // These should possibly be deleted and never become real options. Let's not
  // pollute the low ids (and then forever need a comment about them).
  QueryOutputFormat unstable_output_format = 4242000;
}

message AqueryResponse {
  reserved 100;
  // TODO(nmj): These should be more structured outputs for the client to print.
  //            When they are, remove these fields.
  // If present, errors to show the user. If any are present, the query command
  // failed.
  repeated string error_messages = 101;
}

message UqueryRequest {
  ClientContext context = 1;
  string query = 2;
  repeated string output_attributes = 3;
  // The literals for a repeated query (one containing `%s`).
  repeated string query_args = 4;
  bool target_call_stacks = 6;

  // These should possibly be deleted and never become real options. Let's not
  // pollute the low ids (and then forever need a comment about them).
  QueryOutputFormat unstable_output_format = 4242000;
}

message UqueryResponse {
  reserved 100;
  // If present, errors to show the user. If any are present, the query command
  // failed.
  repeated string error_messages = 101;
}

message CqueryRequest {
  ClientContext context = 1;
  string query = 2;
  repeated string output_attributes = 3;
  // The literals for a repeated query (one containing `%s`).
  repeated string query_args = 4;
  repeated string target_universe = 5;
  bool target_call_stacks = 6;

  bool show_providers = 7;

  // Correct or deprecated owner? https://fburl.com/1mf2d2xj
  bool correct_owner = 8;

  // These should possibly be deleted and never become real options. Let's not
  // pollute the low ids (and then forever need a comment about them).
  QueryOutputFormat unstable_output_format = 4242000;
}

message CqueryResponse {
  // If present, errors to show the user. If any are present, the query command
  // failed.
  repeated string error_messages = 101;
}

message ConfigOverride {
  // `override` is reserved keyword in Rust
  string config_override = 1;
  enum ConfigType {
    VALUE = 0;
    FILE = 1;
  }
  ConfigType config_type = 2;
}
message Concurrency {
  // (Optional) How many builds to run concurrently on the local executor. If
  // this is zero, then the concurrency will be inferred by the daemon based on
  // the number of cores available.
  uint32 concurrency = 1;
}
message CommonBuildOptions {
  reserved 5, 8;
  enum ExecutionStrategy {
    Default = 0;
    LocalOnly = 1;
    RemoteOnly = 2;
    Hybrid = 3;
    HybridPreferLocal = 4;
    NoExecution = 5;
    HybridPreferRemote = 6;
  }
  ExecutionStrategy execution_strategy = 6;

  /// Whether to load dep files eagerly.
  bool eager_dep_files = 7;

  bool upload_all_actions = 9;

  Concurrency concurrency = 10;

  /// Whether to skip doing cache queries.
  bool no_remote_cache = 11;

  /// Error out concurrent commands after there is a state change.
  bool exit_when_different_state = 12;

  // These should possibly be deleted and never become real options. Let's not
  // pollute the low ids (and then forever need a comment about them). The only
  // one of these that might stick around is print_build_report, it's unclear if
  // that should be handled in the server or the client, though.
  bool unstable_print_build_report = 4242000;
  string unstable_build_report_filename = 4242003;
}

message BuildRequest {
  reserved 5;

  ClientContext context = 1;
  repeated buck.data.TargetPattern target_patterns = 2;
  repeated string target_universe = 8;

  message BuildProviders {
    enum Action {
      SKIP = 0;
      BUILD_IF_AVAILABLE = 1;
      BUILD = 2;
    }
    Action default_info = 1;
    Action run_info = 2;
    Action test_info = 3;
  }
  // The providers *MUST* be explicitly specified in the request. Otherwise,
  // nothing is built.
  BuildProviders build_providers = 3;

  message ResponseOptions {
    // Include target outputs? [default: false]
    bool return_outputs = 1;
    bool return_default_other_outputs = 2;
    // TODO(rafaelc): bool return_targets_without_data
    // TODO(rafaelc): bool return_run_args
  }
  // Options regarding which data to include in the response.
  ResponseOptions response_options = 4;

  CommonBuildOptions build_opts = 6;

  enum Materializations {
    // Use default behavior, as per configuration.
    DEFAULT = 0;
    MATERIALIZE = 1;
    SKIP = 2;
  }
  // Materialize final artifacts?
  Materializations final_artifact_materializations = 7;

  bool unstable_print_providers = 4242001;
}

message TestSessionOptions {
  bool allow_re = 10;
  bool force_use_project_relative_paths = 11;
  bool force_run_from_project_root = 12;
}

message TestRequest {
  reserved 10;

  ClientContext context = 1;
  repeated buck.data.TargetPattern target_patterns = 2;

  repeated string test_executor_args = 3;

  repeated string excluded_labels = 4;

  repeated string included_labels = 5;

  bool always_exclude = 6;

  bool build_filtered_targets = 7;

  // How many tests to run concurrently on the local executor. If this is zero,
  // then the concurrency will be inferred by the daemon based on the number of
  // cores available.
  // TODO(cjhopman): We claim that we have support for setting the number of
  // concurrent tests, but we're currently only using the build -j flag and
  // using it to set both concurrent executions and concurrent tests. If we
  // actually intend to support explicitly setting the concurrent tests, we need
  // to fix that.
  uint32 concurrency = 8;

  CommonBuildOptions build_opts = 9;

  TestSessionOptions session_options = 11;
}

message BxlRequest {
  ClientContext context = 1;

  string bxl_label = 2;

  repeated string bxl_args = 3;

  CommonBuildOptions build_opts = 4;

  BuildRequest.Materializations final_artifact_materializations = 6;

  bool print_stacktrace = 7;
}

message BxlResponse {
  // Absolute path to the repo root
  string project_root = 2;
  repeated string error_messages = 101;
}

message InstallRequest {
  ClientContext context = 1;
  repeated buck.data.TargetPattern target_patterns = 2;
  CommonBuildOptions build_opts = 3;
  repeated string installer_run_args = 4;
  bool installer_debug = 5;
}

message BuildTarget {
  string target = 1;
  repeated string run_args = 2;
  message BuildOutput {
    // Path relative to the project root
    string path = 1;
    message BuildOutputProviders {
      bool default_info = 1;
      bool run_info = 2;
      bool other = 3; // whether the artifact is not the main artifact on the
                      // provider, but an "other"
      bool test_info = 4;
    }
    // Which providers provided this output
    BuildOutputProviders providers = 2;
  }
  repeated BuildOutput outputs = 3;
  // the configuration of the target
  string configuration = 4;
}

message BuildResponse {
  repeated BuildTarget build_targets = 1;
  // Absolute path to the repo root
  string project_root = 2;
  // TODO(nmj): These are temporary until we've moved the
  //            printing logic for the build report into
  //            the CLI. They *will* be removed
  string serialized_build_report = 100;
  repeated string error_messages = 101;
}

message CounterWithExamples {
  uint64 count = 1;
  uint64 max = 2;
  repeated string example_tests = 3;
}

message TestResponse {
  optional int32 exit_code = 1;
  repeated string error_messages = 101;
  message TestStatuses {
    reserved 1 to 6;
    CounterWithExamples passed = 10;
    CounterWithExamples skipped = 11;
    CounterWithExamples failed = 12;
    CounterWithExamples fatals = 13;
    CounterWithExamples listing_success = 14;
    CounterWithExamples listing_failed = 15;
  }
  TestStatuses test_statuses = 3;
}

message InstallResponse {}

message GenericRequest {
  ClientContext context = 1;
  string serialized_opts = 2;
}

message GenericResponse {}

message UnstableCrashRequest {}

message UnstableCrashResponse {}

message SegfaultRequest {}

message SegfaultResponse {}

message UnstableDocsRequest {
  ClientContext context = 1;
  repeated string symbol_patterns = 2;
  bool retrieve_builtins = 3;
  bool retrieve_prelude = 4;
}

message UnstableDocsResponse {
  reserved 1;

  message DocItem {
    // This is just a json repr of Doc object.
    string json = 1;
  }
  repeated DocItem docs = 2;
}

message CommandError {
  repeated string messages = 1;
}

message CommandResult {
  oneof result {
    CommandError error = 1;
    // Ideally, this would be an Any, but tonic/prost doesn't support it yet.
    KillResponse kill_response = 2;
    StatusResponse status_response = 3;
    PingResponse ping_response = 4;
    BuildResponse build_response = 5;
    TargetsResponse targets_response = 6;
    CqueryResponse cquery_response = 7;
    UqueryResponse uquery_response = 8;
    TestResponse test_response = 9;
    UnstableDocsResponse unstable_docs_response = 10;
    ProfileResponse profile_response = 11;
    TargetsShowOutputsResponse targets_show_outputs_response = 12;
    InstallResponse install_response = 14;
    AqueryResponse aquery_response = 15;
    MaterializeResponse materialize_response = 16;
    BxlResponse bxl_response = 17;
    LspResponse lsp_response = 18;
    AllocativeResponse allocative_response = 19;
    CleanStaleResponse clean_stale_response = 20;
    SubscriptionCommandResponse subscription_command_response = 21;
    TraceIoResponse trace_io_response = 22;
    ConfiguredTargetsResponse configured_targets_response = 23;
    DapResponse dap_response = 24;
    GenericResponse generic_response = 100;
  }
}

message StdoutBytes {
  bytes data = 1;
}

/// The result of an LSP request.
message LspMessage {
  // The json that should be sent, unchanged, to LSP clients.
  string lsp_json = 1;
}

message DapMessage {
  bytes dap_json = 1;
}

message PartialResult {
  oneof partial_result {
    StdoutBytes stdout_bytes = 1;
    LspMessage lsp_message = 2;
    SubscriptionResponseWrapper subscription_response_wrapper = 3;
    DapMessage dap_message = 4;
  }
}

// A response from a command, either an informational event or the response.
message CommandProgress {
  oneof progress {
    buck.data.BuckEvent event = 1;
    CommandResult result = 2;
    PartialResult partial_result = 3;
  }
}

message MultiCommandProgress {
  repeated CommandProgress messages = 1;
}

// Mirror of `CommandProgress` where some fields are already serialized.
message CommandProgressForWrite {
  oneof progress {
    bytes event = 1;
    CommandResult result = 2;
  }
}

/// A container for requests that streamed to
/// to the server. The first one of these
/// *MUST* have type "context". Subsequent
/// packets *MUST NOT* have the type "context".
message StreamingRequest {
  oneof request {
    ClientContext context = 1;
    LspRequest lsp = 2;
    SubscriptionRequestWrapper subscription = 3;
    DapRequest dap = 4;
  }
}

message UnstableHeapDumpRequest {
  // The path to write the heap dump to. If this path is relative, it is made
  // absolute relative to the working directory of the daemon.
  string destination_path = 1;
}

message UnstableHeapDumpResponse {}

message UnstableAllocatorStatsRequest {
  // Options to pass to the allocator stats backend (JEMalloc's
  // malloc_stats_print, see <https://linux.die.net/man/3/jemalloc>).
  string options = 1;
}

message UnstableAllocatorStatsResponse {
  // The returned stats
  string response = 1;
}

message UnstableDiceDumpRequest {
  enum DiceDumpFormat {
    TSV = 0;
    BINCODE = 1;
    JSON_PRETTY = 2;
  }
  // The path to write the DICE dump to. If this path is relative, it is made
  // absolute relative to the working directory of the daemon.
  string destination_path = 1;
  // Which format the dumpfile should be in.
  DiceDumpFormat format = 2;
}

message UnstableDiceDumpResponse {}

/// An individual starlark LSP request.
message LspRequest {
  // The raw json sent by LSP clients
  string lsp_json = 1;
}

// Signals that the starlark LSP server is complete for / this request.
// Responses to individual LSP requests are sent back as PartialResult. See
// LspMessage.
message LspResponse {}

/// An individual starlark DAP request.
message DapRequest {
  // The raw json sent by DAP clients
  string dap_json = 1;
}

/// Not used at the moment, but signals that
/// the starlark DAP server is complete for
/// this request. Responses to individual
/// DAP requests are sent back in the event
/// stream. See `buck.data.DapResult`
message DapResponse {}

message BxlProfile {
  string bxl_label = 1;
  repeated string bxl_args = 2;
}

message TargetProfile {
  enum Action {
    ANALYSIS = 0;
    LOADING = 1;
  }

  buck.data.TargetPattern target_pattern = 1;
  bool recursive = 2;
  Action action = 3;
}

message ProfileRequest {
  enum Profiler {
    HEAP_FLAME_ALLOCATED = 0;
    HEAP_FLAME_RETAINED = 10;
    HEAP_SUMMARY_ALLOCATED = 1;
    HEAP_SUMMARY_RETAINED = 11;
    TIME_FLAME = 2;
    STATEMENT = 3;
    BYTECODE = 4;
    BYTECODE_PAIRS = 5;
    TYPECHECK = 6;
  }

  ClientContext context = 1;

  string destination_path = 3;
  Profiler profiler = 4;

  oneof profile_opts {
    TargetProfile target_profile = 7;
    BxlProfile bxl_profile = 8;
  }
}

message ProfileResponse {
  google.protobuf.Duration elapsed = 1;
  uint64 total_retained_bytes = 2;
}

message AllocativeRequest {
  ClientContext context = 2;
  string output_path = 1;
}

message AllocativeResponse {}

message MaterializeRequest {
  ClientContext context = 1;
  // The paths we want to materialize
  repeated string paths = 2;
}

message MaterializeResponse {}

message CleanStaleRequest {
  ClientContext context = 1;
  int64 keep_since_time = 2;
  bool dry_run = 3;
  bool tracked_only = 4;
}

message CleanStaleResponse {
  optional string message = 1;
  buck.data.CleanStaleStats stats = 2;
}

message FileStatusRequest {
  ClientContext context = 1;
  // The paths we want to learn about
  repeated string paths = 2;
}

message FlushDepFilesRequest {}

message SetLogFilterRequest {
  string log_filter = 1;
  bool daemon = 2;
  bool forkserver = 3;
}

message SetLogFilterResponse {}

// A wrapper for SubscriptionRequest. We *could* use SubscriptionRequest
// directly, but this lets us have the daemon potentially send data to the CLI
// as a side channel.
message SubscriptionRequestWrapper {
  buck.subscription.SubscriptionRequest request = 1;
}

// Same as above but for responses.
message SubscriptionResponseWrapper {
  buck.subscription.SubscriptionResponse response = 1;
}

// Sent to close out a call to Subscription. Data atually flows through via
// SubscriptionResponseWrapper.
message SubscriptionCommandResponse {}

message TraceIoRequest {
  message ReadIoTracingState {
    bool with_trace = 1;
  }

  ClientContext context = 1;
  ReadIoTracingState read_state = 2;
}

message TraceIoResponse {
  bool enabled = 1;
  repeated string trace = 2;
}

// Note: When adding new request or response types, some of the declarations in
// src/lib.rs need to be updated to derive common things for buck's cli package.
service DaemonApi {
  rpc Kill(KillRequest) returns (CommandResult);
  rpc Status(StatusRequest) returns (CommandResult);
  rpc Ping(PingRequest) returns (CommandResult);
  rpc FlushDepFiles(FlushDepFilesRequest) returns (CommandResult);

  // All streaming request types should have a ClientContext.
  rpc Build(BuildRequest) returns (stream MultiCommandProgress);
  rpc Bxl(BxlRequest) returns (stream MultiCommandProgress);
  rpc Test(TestRequest) returns (stream MultiCommandProgress);
  rpc Targets(TargetsRequest) returns (stream MultiCommandProgress);
  rpc TargetsShowOutputs(TargetsRequest) returns (stream MultiCommandProgress);
  rpc Ctargets(ConfiguredTargetsRequest) returns (stream MultiCommandProgress);
  rpc Aquery(AqueryRequest) returns (stream MultiCommandProgress);
  rpc Cquery(CqueryRequest) returns (stream MultiCommandProgress);
  rpc Uquery(UqueryRequest) returns (stream MultiCommandProgress);
  rpc Audit(GenericRequest) returns (stream MultiCommandProgress);
  rpc Starlark(GenericRequest) returns (stream MultiCommandProgress);
  rpc UnstableDocs(UnstableDocsRequest) returns (stream MultiCommandProgress);
  rpc Install(InstallRequest) returns (stream MultiCommandProgress);
  rpc Materialize(MaterializeRequest) returns (stream MultiCommandProgress);
  rpc CleanStale(CleanStaleRequest) returns (stream MultiCommandProgress);
  rpc FileStatus(FileStatusRequest) returns (stream MultiCommandProgress);
  rpc Profile2(ProfileRequest) returns (stream MultiCommandProgress);

  // Crashes the Buck daemon. Unless you are writing tests or checking Buck2's
  // panic behavior, you probably don't want this.
  rpc Unstable_Crash(UnstableCrashRequest) returns (UnstableCrashResponse);

  // Crashes the Buck daemon with a segfault.  Unless you are writing tests or
  // checking Buck2's segfault behavior, you probably don't want this.
  rpc Segfault(SegfaultRequest) returns (SegfaultResponse);

  // Requests the daemon to perform a heap dump and save the dump to a file.
  rpc Unstable_HeapDump(UnstableHeapDumpRequest)
      returns (UnstableHeapDumpResponse);

  // Requests allocator stats from the daemon.
  rpc Unstable_AllocatorStats(UnstableAllocatorStatsRequest)
      returns (UnstableAllocatorStatsResponse);

  /// Requests the daemon dump the DICE graph to a directory.
  rpc Unstable_DiceDump(UnstableDiceDumpRequest)
      returns (UnstableDiceDumpResponse);

  rpc Allocative(AllocativeRequest) returns (stream MultiCommandProgress);

  // Starts a starlark LSP server.
  rpc Lsp(stream StreamingRequest) returns (stream MultiCommandProgress);

  // Starts a subscription
  rpc Subscription(stream StreamingRequest)
      returns (stream MultiCommandProgress);

  // Starts a starlark DAP server.
  rpc Dap(stream StreamingRequest) returns (stream MultiCommandProgress);

  // Update the daemon's log filter.
  rpc SetLogFilter(SetLogFilterRequest) returns (SetLogFilterResponse);

  // Interact with daemon I/O tracing.
  rpc TraceIo(TraceIoRequest) returns (stream MultiCommandProgress);
}
