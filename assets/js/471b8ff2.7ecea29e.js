"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[49463],{28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>i});var t=s(96540);const r={},l=t.createContext(r);function o(e){const n=t.useContext(l);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(l.Provider,{value:n},e.children)}},81069:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>_,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"prelude/rules/cxx/cxx_toolchain","title":"cxx_toolchain","description":"Function Signature","source":"@site/../docs/prelude/rules/cxx/cxx_toolchain.md","sourceDirName":"prelude/rules/cxx","slug":"/prelude/rules/cxx/cxx_toolchain","permalink":"/docs/prelude/rules/cxx/cxx_toolchain","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"ruleSidebar","previous":{"title":"cxx_test","permalink":"/docs/prelude/rules/cxx/cxx_test"},"next":{"title":"llvm_link_bitcode","permalink":"/docs/prelude/rules/cxx/llvm_link_bitcode"}}');var r=s(74848),l=s(28453);s(56289);const o={},i="cxx_toolchain",a={},c=[{value:"Function Signature",id:"function-signature",level:3},{value:"Parameters",id:"parameters",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"cxx_toolchain",children:"cxx_toolchain"})}),"\n",(0,r.jsx)(n.h3,{id:"function-signature",children:"Function Signature"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def cxx_toolchain(\n    *,\n    name: str,\n    default_target_platform: None | str = None,\n    target_compatible_with: list[str] = [],\n    compatible_with: list[str] = [],\n    exec_compatible_with: list[str] = [],\n    visibility: list[str] = [],\n    within_view: list[str] = ["PUBLIC"],\n    metadata: OpaqueMetadata = {},\n    tests: list[str] = [],\n    modifiers: OpaqueMetadata = [],\n    _apple_platforms: dict[str, str] = {},\n    _dumpbin_toolchain_path: None | str = None,\n    _msvc_hermetic_exec: str = "prelude//windows/tools:msvc_hermetic_exec",\n    archive_contents: str = "normal",\n    archive_symbol_table: bool = True,\n    archiver: str,\n    archiver_flags: list[str] = [],\n    archiver_reads_inputs: bool = True,\n    archiver_supports_argfiles: bool = False,\n    archiver_type: str,\n    asm_compiler: None | str = None,\n    asm_compiler_flags: list[str] = [],\n    asm_compiler_type: None | str = None,\n    asm_preprocessor: None | str = None,\n    asm_preprocessor_flags: list[str] = [],\n    asm_preprocessor_type: None | str = None,\n    assembler: str,\n    assembler_flags: list[str] = [],\n    assembler_preprocessor: None | str = None,\n    assembler_preprocessor_flags: list[str] = [],\n    assembler_preprocessor_type: None | str = None,\n    assembler_type: None | str = None,\n    binary_extension: None | str = None,\n    binary_linker_flags: list[str] = [],\n    bolt: None | str = None,\n    bolt_enabled: bool = False,\n    c_compiler: str,\n    c_compiler_allow_cache_upload: None | bool = None,\n    c_compiler_flags: list[str] = [],\n    c_compiler_type: None | str = None,\n    c_preprocessor_flags: list[str] = [],\n    cache_links: bool = False,\n    clang_llvm_statistics: None | bool = None,\n    clang_remarks: None | str = None,\n    clang_trace: None | bool = None,\n    compiler_flavor_flags: dict[str, list[str]] = {},\n    compiler_type: None | str = None,\n    contacts: list[str] = [],\n    cpp_dep_tracking_mode: str = "makefile",\n    cuda_compiler: None | str = None,\n    cuda_compiler_allow_cache_upload: None | bool = None,\n    cuda_compiler_flags: list[str] = [],\n    cuda_compiler_type: None | str = None,\n    cuda_dep_tracking_mode: str = "makefile",\n    cuda_preprocessor_flags: list[str] = [],\n    custom_tools: dict[str, str] = {},\n    cvtres_compiler: None | str = None,\n    cvtres_compiler_flags: list[str] = [],\n    cvtres_compiler_type: None | str = None,\n    cvtres_preprocessor_flags: list[str] = [],\n    cxx_compiler: str,\n    cxx_compiler_allow_cache_upload: None | bool = None,\n    cxx_compiler_flags: list[str] = [],\n    cxx_compiler_type: None | str = None,\n    cxx_preprocessor_flags: list[str] = [],\n    debug_path_prefix_map_sanitizer_format: None | str = None,\n    default_host_platform: None | str = None,\n    dist_thin_lto_codegen_flags: list[str] = [],\n    dwp: None | str = None,\n    executable_linker_flags: list[str] = [],\n    gcno_files: bool = False,\n    generate_linker_maps: bool = False,\n    headers_as_raw_headers_mode: None | str = None,\n    hip_compiler: None | str = None,\n    hip_compiler_flags: list[str] = [],\n    hip_compiler_type: None | str = None,\n    hip_preprocessor_flags: list[str] = [],\n    internal_tools: str = "prelude//cxx/tools:internal_tools",\n    labels: list[str] = [],\n    licenses: list[str] = [],\n    link_metadata_flag: None | str = None,\n    link_ordering: str = "preorder",\n    link_style: str = "static",\n    link_weight: int = 1,\n    linker: str,\n    linker_flags: list[str] = [],\n    linker_type: str,\n    lipo: None | str = None,\n    llvm_cgdata: None | str = None,\n    llvm_link: None | str = None,\n    lto_mode: str = "none",\n    min_sdk_version: None | str = None,\n    nm: str,\n    objc_compiler_flags: list[str] = [],\n    objcopy_for_shared_library_interface: str,\n    objcxx_compiler_flags: list[str] = [],\n    objdump: None | str = None,\n    object_file_extension: str = "",\n    object_format: str = "native",\n    pic_behavior: str = "supported",\n    placeholder_tool: None | str = None,\n    platform_deps_aliases: None | list[str] = None,\n    platform_name: None | str = None,\n    post_linker_flags: list[str] = [],\n    private_headers_symlinks_enabled: bool = True,\n    public_headers_symlinks_enabled: bool = True,\n    ranlib: None | str = None,\n    ranlib_flags: list[str] = [],\n    raw_headers_as_headers_mode: None | str = None,\n    rc_compiler: None | str = None,\n    rc_compiler_flags: list[str] = [],\n    rc_compiler_type: None | str = None,\n    rc_preprocessor_flags: list[str] = [],\n    remap_cwd: bool = False,\n    requires_archives: bool = False,\n    requires_objects: bool = False,\n    sanitizer_runtime_enabled: bool = False,\n    sanitizer_runtime_files: list[str] = [],\n    shared_dep_runtime_ld_flags: list[str] = [],\n    shared_library_extension: str = "",\n    shared_library_interface_flags: list[str] = [],\n    shared_library_interface_mode: str = "disabled",\n    shared_library_interface_producer: None | str = None,\n    shared_library_interface_type: str,\n    shared_library_versioned_extension_format: str = "",\n    split_debug_mode: str = "none",\n    static_dep_runtime_ld_flags: list[str] = [],\n    static_library_extension: str = "",\n    static_pic_dep_runtime_ld_flags: list[str] = [],\n    strip: str,\n    strip_all_flags: None | list[str] = None,\n    strip_debug_flags: None | list[str] = None,\n    strip_non_global_flags: None | list[str] = None,\n    supports_content_based_paths: bool = False,\n    supports_distributed_thinlto: bool = False,\n    supports_two_phase_compilation: bool = False,\n    target_sdk_version: None | str = None,\n    thin_lto_double_codegen_enabled: bool = False,\n    thin_lto_premerger_enabled: bool = False,\n    use_archiver_flags: bool = True,\n    use_dep_files: None | bool = None,\n    use_header_map: bool = False,\n) -> None\n'})}),"\n",(0,r.jsx)(n.h3,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"name"}),": (required)"]}),"\n",(0,r.jsx)(n.p,{children:"name of the target"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"default_target_platform"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"None"}),")"]}),"\n",(0,r.jsx)(n.p,{children:"specifies the default target platform, used when no platforms are specified on the command line"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"target_compatible_with"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,r.jsx)(n.p,{children:"a list of constraints that are required to be satisfied for this target to be compatible with a configuration"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"compatible_with"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,r.jsx)(n.p,{children:"a list of constraints that are required to be satisfied for this target to be compatible with a configuration"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"exec_compatible_with"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,r.jsx)(n.p,{children:"a list of constraints that are required to be satisfied for this target to be compatible with an execution platform"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"visibility"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,r.jsx)(n.p,{children:"a list of visibility patterns restricting what targets can depend on this one"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"within_view"}),": (defaults to: ",(0,r.jsx)(n.code,{children:'["PUBLIC"]'}),")"]}),"\n",(0,r.jsx)(n.p,{children:"a list of visibility patterns restricting what this target can depend on"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"metadata"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"{}"}),")"]}),"\n",(0,r.jsx)(n.p,{children:"a key-value map of metadata associated with this target"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"tests"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,r.jsx)(n.p,{children:"a list of targets that provide tests for this one"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"modifiers"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,r.jsx)(n.p,{children:"an array of modifiers associated with this target"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"binary_linker_flags"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,r.jsxs)(n.p,{children:["Linker flags that apply to all links coordinated by a binary rule.  One key distinction between these and ",(0,r.jsx)(n.code,{children:"executable_linker_flags"})," is that these will also apply to library links coordinated by binary rules (e.g. linking roots/deps when using native python or omnibus link strategies)."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"c_compiler_allow_cache_upload"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"None"}),")"]}),"\n",(0,r.jsx)(n.p,{children:"Whether to allow uploading of object files to cache when the compile action is executed locally and the configuration allows uploads (i.e., there is a cache configured and the client has permission to write to it)."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"contacts"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,r.jsx)(n.p,{children:"A list of organizational contacts for this rule. These could be individuals who you would contact in the event of a failure or other issue with the rule."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"contacts = [ 'Joe Sixpack', 'Erika Mustermann' ]\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"cuda_compiler_allow_cache_upload"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"None"}),")"]}),"\n",(0,r.jsx)(n.p,{children:"Whether to allow uploading of object files to cache when the compile action is executed locally and the configuration allows uploads (i.e., there is a cache configured and the client has permission to write to it)."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"cxx_compiler_allow_cache_upload"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"None"}),")"]}),"\n",(0,r.jsx)(n.p,{children:"Whether to allow uploading of object files to cache when the compile action is executed locally and the configuration allows uploads (i.e., there is a cache configured and the client has permission to write to it)."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"executable_linker_flags"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,r.jsx)(n.p,{children:"Linker flags that only apply when linking an executable."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"labels"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,r.jsxs)(n.p,{children:["Set of arbitrary strings which allow you to annotate a ",(0,r.jsx)(n.a,{href:"https://buck2.build/docs/concepts/build_rule/",children:"build rule"})," with tags that can be searched for over an entire dependency tree using ",(0,r.jsx)(n.code,{children:"buck query()"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"licenses"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,r.jsxs)(n.p,{children:["Set of license files for this library. To get the list of license files for a given build rule and all of its dependencies, you can use ",(0,r.jsx)(n.a,{href:"https://buck2.build/docs/users/commands/query/",children:"buck query"})]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"link_style"}),": (defaults to: ",(0,r.jsx)(n.code,{children:'"static"'}),")"]}),"\n",(0,r.jsxs)(n.p,{children:["The default value of the ",(0,r.jsx)(n.code,{children:"link_style"})," attribute for rules that use this toolchain."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"raw_headers_as_headers_mode"}),": (defaults to: ",(0,r.jsx)(n.code,{children:"None"}),")"]}),"\n",(0,r.jsx)(n.p,{children:"Controls whether raw_headers and *include_directories attributes should be automatically converted to headers and symlink trees and/or header maps via headers. Only has an effect if the cxx_toolchain has explicitly opted into supporting this behavior via a non-default value, even if the value is disabled."}),"\n"]}),"\n"]})]})}function _(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);