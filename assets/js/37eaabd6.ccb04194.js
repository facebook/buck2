"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[33796],{28453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>c});var r=i(96540);const t={},l=r.createContext(t);function s(e){const n=r.useContext(l);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),r.createElement(l.Provider,{value:n},e.children)}},59199:(e,n,i)=>{i.r(n),i.d(n,{TARGET_NAME:()=>a,assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>c,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"getting_started/tutorial_first_build","title":"Tutorial: Your First Buck2 Application","description":"Welcome! This tutorial will help you learn the basics of building your first","source":"@site/../docs/getting_started/tutorial_first_build.md","sourceDirName":"getting_started","slug":"/getting_started/tutorial_first_build","permalink":"/docs/getting_started/tutorial_first_build","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"tutorial_first_build","title":"Tutorial: Your First Buck2 Application"},"sidebar":"main","previous":{"title":"Installing Buck2","permalink":"/docs/getting_started/install"},"next":{"title":"Tutorial: Adding Dependencies","permalink":"/docs/getting_started/tutorial_adding_dependencies"}}');var t=i(74848),l=i(28453),s=i(78191);const c={id:"tutorial_first_build",title:"Tutorial: Your First Buck2 Application"},o=void 0,d={},a=(0,s.isInternal)()?(0,t.jsx)("code",{children:"fbcode//scripts/<unixname>/buck2_lab/greeter_bin:main"}):(0,t.jsx)("code",{children:"root//buck2_lab/greeter_bin:main"}),u=[{value:"What We&#39;ll Do:",id:"what-well-do",level:2},{value:"Prerequisites:",id:"prerequisites",level:2},{value:"Step 1: Create a New Project",id:"step-1-create-a-new-project",level:2},{value:"Step 2: Writing the &quot;Hello, World!&quot; Program",id:"step-2-writing-the-hello-world-program",level:2},{value:"Step 3: Defining the Build Target in a BUCK File",id:"step-3-defining-the-build-target-in-a-buck-file",level:2},{value:"Step 4: Building the Application with Buck2",id:"step-4-building-the-application-with-buck2",level:2},{value:"Step 5: Running Your Application with Buck2",id:"step-5-running-your-application-with-buck2",level:2},{value:"Step 6: Inspecting Your Target (Optional)",id:"step-6-inspecting-your-target-optional",level:2},{value:"Conclusion",id:"conclusion",level:2}];function h(e){const n={a:"a",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:'Welcome! This tutorial will help you learn the basics of building your first\nRust application with Buck2. We will start from the very beginning, guiding you\nstep-by-step to get a "Hello, World!" message displayed in your terminal.\nThrough this practical exercise, you\'ll acquire foundational skills for working\nwith Buck2.'}),"\n",(0,t.jsx)(n.h2,{id:"what-well-do",children:"What We'll Do:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Set up a simple project directory."}),"\n",(0,t.jsx)(n.li,{children:'Write a "Hello, World!" program in Rust.'}),"\n",(0,t.jsx)(n.li,{children:"Create a BUCK file to tell Buck2 how to build our program."}),"\n",(0,t.jsx)(n.li,{children:"Build the Rust program using Buck2."}),"\n",(0,t.jsx)(n.li,{children:"Run our compiled program using Buck2."}),"\n",(0,t.jsx)(n.li,{children:"Briefly inspect the build targets we created."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites:"}),"\n",(0,t.jsx)(n.p,{children:"For this tutorial, we will use Rust. You don't need to know how to write Rust.\nWe will only use a few basics of Rust."}),"\n",(0,t.jsx)(s.OssOnly,{children:(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"../install",children:"Follow the previous section to set up Buck2"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://rustup.rs/",children:"Set up Rust"})}),"\n"]})}),"\n",(0,t.jsx)(s.FbInternalOnly,{children:(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Set up an ",(0,t.jsx)(n.a,{href:"https://www.internalfb.com/wiki/Repositories/fbsource/#cloning",children:(0,t.jsx)(n.code,{children:"fbsource"})})," repo, or ",(0,t.jsx)(n.a,{href:"https://www.internalfb.com/intern/ondemand/",children:"reserve an OnDemand"})," with ",(0,t.jsx)(n.code,{children:"fbsource"})]}),"\n"]})}),"\n",(0,t.jsx)(n.h2,{id:"step-1-create-a-new-project",children:"Step 1: Create a New Project"}),"\n",(0,t.jsxs)(s.FbInternalOnly,{children:[(0,t.jsxs)(n.p,{children:["First, we need a place for our project files. We will put it in\n",(0,t.jsx)(n.code,{children:"fbcode/scripts/<unixname>/buck2_lab"})]}),(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Create a new directory. In fbsource root"}),"\n"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"mkdir -p fbcode/scripts/<unixname>/buck2_lab\ncd fbcode/scripts/<unixname>/buck2_lab\n"})}),(0,t.jsxs)(n.p,{children:["Replace ",(0,t.jsx)(n.code,{children:"<unixname>"})," with your unixname."]})]}),"\n",(0,t.jsxs)(s.OssOnly,{children:[(0,t.jsx)(n.p,{children:"First, we need to create a new buck2 project directory and set up a folder to\nput all our files in."}),(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Create a new buck2 project directory and create a new directory named\n",(0,t.jsx)(n.code,{children:"buck2_lab"})," inside it."]}),"\n"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"buck2 init hello_world\n\nmkdir hello_world/buck2_lab\n\ncd hello_world/buck2_lab\n"})})]}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsxs)(n.li,{children:["Inside ",(0,t.jsx)(n.code,{children:"buck2_lab"}),", create another directory named ",(0,t.jsx)(n.code,{children:"greeter_bin"}),", this is\nwhere all files of our Buck2 binary package will be stored."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"mkdir greeter_bin\n"})}),"\n",(0,t.jsxs)(n.ol,{start:"3",children:["\n",(0,t.jsxs)(n.li,{children:["Create ",(0,t.jsx)(n.code,{children:"greeter_bin/src"})," directory, this is where all source files of our\nbinary will live."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"mkdir greeter_bin/src\n"})}),"\n",(0,t.jsx)(n.p,{children:"Our project structure should look like this:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"buck2_lab\n\u2514\u2500\u2500 greeter_bin\n    \u2514\u2500\u2500 src\n"})}),"\n",(0,t.jsx)(n.h2,{id:"step-2-writing-the-hello-world-program",children:'Step 2: Writing the "Hello, World!" Program'}),"\n",(0,t.jsx)(n.p,{children:"Now, let's write our simple Rust program."}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Inside the src directory, create a new file named main.rs."}),"\n",(0,t.jsx)(n.li,{children:"Open src/main.rs in your favorite text editor and add the following code:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'fn main() {\n    println!("Hello world!");\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:'This is the main function of our program. It prints "Hello world!" to the\nconsole. But we are not done yet, we need to tell Buck2 how to build our\nprogram.'}),"\n",(0,t.jsx)(n.h2,{id:"step-3-defining-the-build-target-in-a-buck-file",children:"Step 3: Defining the Build Target in a BUCK File"}),"\n",(0,t.jsxs)(n.p,{children:["Next, we need to tell Buck2 about our program and how to build it. We do this\nusing a ",(0,t.jsx)(n.code,{children:"BUCK"})," file."]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["In the root of your ",(0,t.jsx)(n.code,{children:"greeter_bin"})," directory (not inside src), create a new\nfile named ",(0,t.jsx)(n.code,{children:"BUCK"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Add the following content to this BUCK file:"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(s.FbInternalOnly,{children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'load("@fbsource//tools/build_defs:rust_binary.bzl", "rust_binary")\n\nrust_binary( name = "main", srcs = ["src/main.rs"], )\n\n'})})}),"\n",(0,t.jsx)(s.OssOnly,{children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'rust_binary(\n    name = "main",\n    srcs = ["src/main.rs"],\n)\n'})})}),"\n",(0,t.jsx)(n.p,{children:"Let's briefly see what this does (we'll keep explanations minimal, just enough\nfor this step! ):"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"load(...)"})," is a load statement. It tells Buck2 to load the definition of the\n",(0,t.jsx)(n.code,{children:"rust_binary"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"rust_binary"})," is a Buck2 rule that tells Buck2 how to build a Rust binary."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:'name = "main"'}),": We're giving our build target a name, \"main\". This is how\nwe'll refer to it in Buck2 commands."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:'srcs = ["src/main.rs"]'}),': This tells Buck2 that the source code for this\n"main" target is our ',(0,t.jsx)(n.code,{children:"src/main.rs"})," file."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Our project structure should look like this:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"buck2_lab\n\u2514\u2500\u2500 greeter_bin\n    \u251c\u2500\u2500 BUCK\n    \u2514\u2500\u2500 src\n        \u2514\u2500\u2500 main.rs\n"})}),"\n",(0,t.jsx)(n.h2,{id:"step-4-building-the-application-with-buck2",children:"Step 4: Building the Application with Buck2"}),"\n",(0,t.jsx)(n.p,{children:"With our Rust code and BUCK file in place, let's build the application!"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Open your terminal and make sure you are in the ",(0,t.jsx)(n.code,{children:"greeter_bin"})," directory."]}),"\n",(0,t.jsx)(n.li,{children:"Run the following command:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"buck2 build :main --show-output\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"buck2 build :main"})," tells Buck2 to build the target named main. The ",(0,t.jsx)(n.code,{children:":main"}),"\npart means the target is defined in the BUCK file in the root of this package\n(",(0,t.jsx)(n.code,{children:"greeter_bin"}),")."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"--show-output"})," tells Buck2 to show the path of our built binary."]}),"\n"]}),"\n",(0,t.jsxs)(n.ol,{start:"3",children:["\n",(0,t.jsx)(n.li,{children:"Expected Output: You should see output similar to this"}),"\n"]}),"\n",(0,t.jsx)(s.FbInternalOnly,{children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"...\nBUILD SUCCEEDED\nfbcode//scripts/<unixname>/buck2_lab/greeter_bin:main buck-out/v2/gen/fbcode/c32808b9d4f0fdd0/scripts/<unixname>/buck2_lab/greeter_bin/__main__/main\n"})})}),"\n",(0,t.jsx)(s.OssOnly,{children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"...\nBUILD SUCCEEDED\nroot//buck2_lab/greeter_bin:main /.../buck2_lab/buck-out/v2/gen/root/200212f73efcd57d/buck2_lab/greeter_bin/__main__/main\n"})})}),"\n","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"BUILD SUCCEEDED"})," indicates that Buck2 successfully built our target."]}),"\n",(0,t.jsxs)(n.li,{children:[a," is the full target label name of our target."]}),"\n",(0,t.jsxs)(n.li,{children:["Think of the ",(0,t.jsx)(n.code,{children:":main"})," we used in the step 2 as a relative path to the target\nfrom within its package (",(0,t.jsx)(n.code,{children:"greeter_bin"}),")."]}),"\n",(0,t.jsxs)(n.li,{children:["The full name ",a," is like an absolute path, uniquely identifying the\ntarget within your entire project (fbsource)."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"buck-out/.../__main__/main"})," is the path of our binary output. It is the path\nrelative path to fbsource. You can use ",(0,t.jsx)(n.code,{children:"--show-full-output"})," instead of\n",(0,t.jsx)(n.code,{children:"--show-output"})," to get the absolute path."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"step-5-running-your-application-with-buck2",children:"Step 5: Running Your Application with Buck2"}),"\n",(0,t.jsxs)(n.p,{children:["Since our target is a runnable target, we can run it by ",(0,t.jsx)(n.code,{children:"buck2 run"})]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["In your terminal (still in the ",(0,t.jsx)(n.code,{children:"greeter_bin"})," directory), execute:"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"buck2 run :main\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This command tells Buck2 to run the ",(0,t.jsx)(n.code,{children:"main"})," target. Buck2 will build it if it\nhasn't been built already, and then execute it. (i.e. We can do this without\nstep 4)"]}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsx)(n.li,{children:"Expected Output: You will see:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Hello world!\n"})}),"\n",(0,t.jsx)(n.p,{children:"There it is! Our program ran successfully and printed the message."}),"\n",(0,t.jsx)(n.h2,{id:"step-6-inspecting-your-target-optional",children:"Step 6: Inspecting Your Target (Optional)"}),"\n",(0,t.jsx)(n.p,{children:"This step is optional, but it's good to know how you can ask Buck2 about the\ntargets you've defined."}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["To see the target that we defined (still in the ",(0,t.jsx)(n.code,{children:"greeter_bin"})," directory),\nrun:"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"buck2 targets :\n"})}),"\n",(0,t.jsx)(n.p,{children:"or"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"buck2 targets fbcode//scripts/<unixname>/buck2_lab/greeter_bin:\n"})}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsx)(n.li,{children:"Expected Output:"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"This will show all the targets we defined,"}),"\n",(0,t.jsxs)(s.FbInternalOnly,{children:[(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"fbcode//scripts/<unixname>/buck2_lab/greeter_bin:main\n... other targets might be listed here ...\n"})}),(0,t.jsxs)(n.p,{children:["You would see other targets as well, but for now we can just ignore them and\njust focus on the ",(0,t.jsx)(n.code,{children:"main"})," target."]})]}),"\n",(0,t.jsx)(s.OssOnly,{children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"root//buck2_lab/greeter_bin:main\n"})})}),"\n",(0,t.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,t.jsx)(n.p,{children:"Congratulations! \ud83c\udf89"}),"\n",(0,t.jsx)(n.p,{children:"You have successfully created, built, and run your first application using\nBuck2! We've walked through"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Setting up the project structure."}),"\n",(0,t.jsx)(n.li,{children:"Writing a simple Rust program."}),"\n",(0,t.jsx)(n.li,{children:"Defining a rust_binary target in a BUCK file."}),"\n",(0,t.jsxs)(n.li,{children:["Using ",(0,t.jsx)(n.code,{children:"buck2 build"})," to compile the code."]}),"\n",(0,t.jsxs)(n.li,{children:["Using ",(0,t.jsx)(n.code,{children:"buck2 run"})," to execute the program."]}),"\n",(0,t.jsxs)(n.li,{children:["Using ",(0,t.jsx)(n.code,{children:"buck2 targets"})," to inspect the target."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"You've taken your first concrete steps into the world of Buck2."})]})}function p(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}}}]);