# @generated
# Generated with generate_rules_shim.py from a dump of buck v1's attrs.
# See `fbsource/fbcode/buck2/scripts/generate_rules_shim.py` for how to reproduce it.
#
# This contains attribute information for all buck's builtin rules.

def _uri(_s):
    return True

AaptMode = ["aapt1", "aapt2"]

AbiGenerationMode = ["unknown", "class", "source", "migrating_to_source_only", "source_only", "unrecognized"]

AdditionalActions = ["pre_scheme_actions", "post_scheme_actions"]

AnnotationProcessingTool = ["kapt", "javac"]

AppleBundleExtension = ["app", "framework", "appex", "plugin", "bundle", "xctest", "dsym", "xpc", "prefpane", "qlgenerator"]

AppleResourceBundleDestination = ["resources", "frameworks", "executables", "plugins", "xpcservices", "loginitems"]

ArchiveContents = ["normal", "thin"]

ArchiverProviderType = ["bsd", "gnu", "windows", "windows_clang"]

BuildMode = ["executable", "c_shared", "c_archive"]

CompressionAlgorithm = ["xz", "zstd"]

CxxRuntimeType = ["dynamic", "static"]

CxxSourceType = ["c", "cxx", "cxx_thinlink", "objc", "objcxx", "cuda", "hip", "swift", "c_cpp_output", "cxx_cpp_output", "objc_cpp_output", "objcxx_cpp_output", "cuda_cpp_output", "hip_cpp_output", "assembler_with_cpp", "assembler", "asm_with_cpp", "asm", "pcm"]

CxxTestType = ["gtest", "boost"]

CxxToolProviderType = ["clang", "clang_cl", "clang_windows", "gcc", "windows", "windows_ml64"]

DexStore = ["raw", "jar", "xz", "xzs"]

DuplicateResourceBehaviour = ["allow_by_default", "ban_by_default"]

ExopackageMode = ["secondary_dex", "native_library", "resources", "modules", "arch64"]

ExportFileDescriptionMode = ["reference", "copy"]

ForkMode = ["none", "per_test"]

FrameworkVersion = ["net35", "net40", "net45", "net46"]

GoTestCoverStepMode = ["set", "count", "atomic", "none"]

HeadersAsRawHeadersMode = ["required", "preferred", "disabled"]

IncludeType = ["local", "system", "raw"]

JvmLanguage = ["java", "kotlin", "scala"]

LaunchStyle = ["auto", "wait"]

LinkMode = ["internal", "external"]

LinkableDepType = ["static", "static_pic", "shared"]

Linkage = ["any", "static", "shared"]

LinkerProviderType = ["darwin", "gnu", "windows", "unknown"]

LogLevel = ["off", "severe", "warning", "info", "config", "fine", "finer", "finest", "all"]

LuaPlatformPackageStyle = ["standalone", "inplace"]

NativeLinkStrategy = ["separate", "merged"]

NdkCxxRuntime = ["system", "gabixx", "stlport", "gnustl", "libcxx"]

OnDuplicateEntry = ["fail", "overwrite", "append"]

PackageType = ["debug", "instrumented", "release", "test"]

PicType = ["pic", "pdc"]

Platform = ["linux", "macos", "windows", "freebsd", "unknown"]

PythonBuckConfigPackageStyle = ["standalone", "inplace", "inplace_lite"]

RType = ["anim", "animator", "array", "attr", "bool", "color", "dimen", "drawable", "fraction", "font", "id", "integer", "interpolator", "layout", "menu", "navigation", "mipmap", "plurals", "raw", "string", "style", "styleable", "transition", "xml"]

RemoteFileType = ["data", "executable", "exploded_zip"]

ResourceCompressionMode = ["disabled", "enabled", "enabled_strings_only", "enabled_with_strings_as_assets"]

SchemeActionType = ["build", "launch", "test", "profile", "analyze", "archive"]

SdkProguardType = ["default", "optimized", "none"]

SharedLibraryInterfaceParamsType = ["disabled", "enabled", "defined_only"]

SourceAbiVerificationMode = ["off", "log", "fail"]

Style = ["obf", "pretty", "detailed"]

TargetCpuType = ["arm", "armv7", "arm64", "x86", "x86_64", "mips"]

TestType = ["junit", "junit5", "testng"]

Traversal = ["tree", "node"]

UnusedDependenciesAction = ["unknown", "fail", "warn", "ignore", "unrecognized"]

WatchInterface = ["main", "complication", "dynamic_notification", "static_notification"]

attributes = {
    "alias": {
        "actual": attr.dep(),
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "android_aar": {
        "abi_generation_mode": attr.option(attr.enum(AbiGenerationMode), default = None),
        "annotation_processing_tool": attr.option(attr.enum(AnnotationProcessingTool), default = None),
        "annotation_processor_deps": attr.list(attr.dep(), default = []),
        "annotation_processor_params": attr.list(attr.string(), default = []),
        "annotation_processors": attr.list(attr.string(), default = []),
        "build_config_values": attr.list(attr.string(), default = []),
        "build_config_values_file": attr.option(attr.source(), default = None),
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "deps": attr.list(attr.dep(), default = []),
        "deps_query": attr.option(attr.query(), default = None),
        "enable_relinker": attr.bool(),
        "exported_deps": attr.list(attr.dep(), default = []),
        "exported_provided_deps": attr.list(attr.dep(), default = []),
        "extra_arguments": attr.list(attr.string(), default = []),
        "extra_kotlinc_arguments": attr.list(attr.string(), default = []),
        "friend_paths": attr.list(attr.dep(), default = []),
        "include_build_config_class": attr.bool(),
        "java_version": attr.option(attr.string(), default = None),
        "javac": attr.option(attr.source(), default = None),
        "kotlin_compiler_plugins": attr.dict(key = attr.source(), value = attr.dict(key = attr.string(), value = attr.string(), sorted = False), sorted = False, default = {}),
        "labels": attr.list(attr.string(), default = []),
        "language": attr.option(attr.enum(JvmLanguage), default = None),
        "licenses": attr.list(attr.source(), default = []),
        "manifest": attr.option(attr.source(), default = None),
        "manifest_file": attr.option(attr.source(), default = None),
        "manifest_skeleton": attr.source(),
        "maven_coords": attr.option(attr.string(), default = None),
        "native_library_merge_code_generator": attr.option(attr.dep(), default = None),
        "native_library_merge_glue": attr.option(attr.dep(), default = None),
        "native_library_merge_localized_symbols": attr.option(attr.set(attr.string(), sorted = True), default = None),
        "native_library_merge_map": attr.option(attr.dict(key = attr.string(), value = attr.list(attr.regex()), sorted = False), default = None),
        "native_library_merge_sequence": attr.option(attr.list(attr.tuple(attr.string(), attr.list(attr.regex()))), default = None),
        "native_library_merge_sequence_blocklist": attr.option(attr.list(attr.regex()), default = None),
        "never_mark_as_unused_dependency": attr.option(attr.bool(), default = None),
        "on_unused_dependencies": attr.option(attr.enum(UnusedDependenciesAction), default = None),
        "plugins": attr.list(attr.dep(), default = []),
        "proguard_config": attr.option(attr.source(), default = None),
        "provided_deps": attr.list(attr.dep(), default = []),
        "provided_deps_query": attr.option(attr.query(), default = None),
        "relinker_whitelist": attr.list(attr.regex(), default = []),
        "remove_classes": attr.list(attr.regex(), default = []),
        "required_for_source_only_abi": attr.bool(),
        "resource_union_package": attr.option(attr.string(), default = None),
        "resources": attr.list(attr.source(), default = []),
        "resources_root": attr.option(attr.source(), default = None),
        "runtime_deps": attr.list(attr.dep(), default = []),
        "source": attr.option(attr.string(), default = None),
        "source_abi_verification_mode": attr.option(attr.enum(SourceAbiVerificationMode), default = None),
        "source_only_abi_deps": attr.list(attr.dep(), default = []),
        "srcs": attr.list(attr.source(), default = []),
        "target": attr.option(attr.string(), default = None),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "android_app_modularity": {
        "application_module_blacklist": attr.option(attr.list(attr.query()), default = None),
        "application_module_configs": attr.dict(key = attr.string(), value = attr.list(attr.dep()), sorted = False, default = {}),
        "application_module_dependencies": attr.option(attr.dict(key = attr.string(), value = attr.list(attr.string()), sorted = False), default = None),
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "deps": attr.list(attr.dep(), default = []),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "no_dx": attr.list(attr.dep(), default = []),
        "should_include_classes": attr.bool(),
        "should_include_libraries": attr.bool(),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "android_binary": {
        "aapt2_keep_raw_values": attr.bool(),
        "aapt2_locale_filtering": attr.bool(),
        "aapt_mode": attr.enum(AaptMode, default = "aapt1"),
        "additional_aapt_params": attr.list(attr.string(), default = []),
        "allow_r_dot_java_in_secondary_dex": attr.bool(),
        "allowed_duplicate_resource_types": attr.list(attr.enum(RType), default = []),
        "android_sdk_proguard_config": attr.option(attr.enum(SdkProguardType), default = None),
        "application_module_blacklist": attr.option(attr.list(attr.query()), default = None),
        "application_module_configs": attr.dict(key = attr.string(), value = attr.list(attr.dep()), sorted = False, default = {}),
        "application_module_dependencies": attr.option(attr.dict(key = attr.string(), value = attr.list(attr.string()), sorted = False), default = None),
        "asset_compression_algorithm": attr.option(attr.enum(CompressionAlgorithm), default = None),
        "banned_duplicate_resource_types": attr.list(attr.enum(RType), default = []),
        "build_config_values": attr.list(attr.string(), default = []),
        "build_config_values_file": attr.option(attr.source(), default = None),
        "build_string_source_map": attr.bool(),
        "compress_asset_libraries": attr.bool(),
        "contacts": attr.list(attr.string(), default = []),
        "cpu_filters": attr.list(attr.enum(TargetCpuType), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "deps": attr.list(attr.dep(), default = []),
        "dex_compression": attr.option(attr.enum(DexStore), default = None),
        "dex_group_lib_limit": attr.int(default = 0),
        "dex_tool": attr.string(default = ""),
        "disable_pre_dex": attr.bool(),
        "duplicate_resource_behavior": attr.enum(DuplicateResourceBehaviour, default = "allow_by_default"),
        "duplicate_resource_whitelist": attr.option(attr.source(), default = None),
        "enable_relinker": attr.bool(),
        "exopackage_modes": attr.list(attr.enum(ExopackageMode), default = []),
        "extra_filtered_resources": attr.list(attr.string(), default = []),
        "field_ref_count_buffer_space": attr.int(default = 0),
        "ignore_aapt_proguard_config": attr.bool(),
        "includes_vector_drawables": attr.bool(),
        "is_cacheable": attr.bool(),
        "keystore": attr.dep(),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "linear_alloc_hard_limit": attr.int(default = 4194304),
        "locales": attr.list(attr.string(), default = []),
        "manifest": attr.option(attr.source(), default = None),
        "manifest_entries": attr.dict(key = attr.string(), value = attr.any(), default = {}),
        "manifest_skeleton": attr.option(attr.source(), default = None),
        "method_ref_count_buffer_space": attr.int(default = 0),
        "minimize_primary_dex_size": attr.bool(),
        "module_manifest_skeleton": attr.option(attr.source(), default = None),
        "native_library_merge_code_generator": attr.option(attr.dep(), default = None),
        "native_library_merge_glue": attr.option(attr.dep(), default = None),
        "native_library_merge_localized_symbols": attr.option(attr.set(attr.string(), sorted = True), default = None),
        "native_library_merge_map": attr.option(attr.dict(key = attr.string(), value = attr.list(attr.regex()), sorted = False), default = None),
        "native_library_merge_sequence": attr.option(attr.list(attr.tuple(attr.string(), attr.list(attr.regex()))), default = None),
        "native_library_merge_sequence_blocklist": attr.option(attr.list(attr.regex()), default = None),
        "no_auto_add_overlay_resources": attr.bool(),
        "no_auto_version_resources": attr.bool(),
        "no_dx": attr.list(attr.dep(), default = []),
        "no_version_transitions_resources": attr.bool(),
        "optimization_passes": attr.int(default = 1),
        "package_asset_libraries": attr.bool(),
        "package_type": attr.enum(PackageType, default = "debug"),
        "packaged_locales": attr.list(attr.string(), default = []),
        "post_filter_resources_cmd": attr.option(attr.arg(), default = None),
        "preprocess_java_classes_bash": attr.option(attr.arg(), default = None),
        "preprocess_java_classes_cmd": attr.option(attr.arg(), default = None),
        "preprocess_java_classes_deps": attr.list(attr.dep(), default = []),
        "primary_dex_patterns": attr.list(attr.string(), default = []),
        "proguard_config": attr.option(attr.source(), default = None),
        "proguard_jvm_args": attr.list(attr.string(), default = []),
        "relinker_whitelist": attr.list(attr.regex(), default = []),
        "resource_compression": attr.enum(ResourceCompressionMode, default = "disabled"),
        "resource_filter": attr.list(attr.string(), default = []),
        "resource_stable_ids": attr.option(attr.source(), default = None),
        "resource_union_package": attr.option(attr.string(), default = None),
        "secondary_dex_weight_limit": attr.option(attr.int(), default = None),
        "skip_crunch_pngs": attr.option(attr.bool(), default = None),
        "skip_proguard": attr.bool(),
        "trim_resource_ids": attr.bool(),
        "use_split_dex": attr.bool(),
        "within_view": attr.option(attr.list(attr.string())),
        "xz_compression_level": attr.int(default = 4),
    },
    "android_build_config": {
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "package": attr.string(default = ""),
        "values": attr.list(attr.string(), default = []),
        "values_file": attr.option(attr.source(), default = None),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "android_bundle": {
        "aapt2_keep_raw_values": attr.bool(),
        "aapt2_locale_filtering": attr.bool(),
        "aapt_mode": attr.enum(AaptMode, default = "aapt1"),
        "additional_aapt_params": attr.list(attr.string(), default = []),
        "allow_r_dot_java_in_secondary_dex": attr.bool(),
        "allowed_duplicate_resource_types": attr.list(attr.enum(RType), default = []),
        "android_sdk_proguard_config": attr.option(attr.enum(SdkProguardType), default = None),
        "application_module_blacklist": attr.option(attr.list(attr.query()), default = None),
        "application_module_configs": attr.dict(key = attr.string(), value = attr.list(attr.dep()), sorted = False, default = {}),
        "application_module_dependencies": attr.option(attr.dict(key = attr.string(), value = attr.list(attr.string()), sorted = False), default = None),
        "asset_compression_algorithm": attr.option(attr.enum(CompressionAlgorithm), default = None),
        "banned_duplicate_resource_types": attr.list(attr.enum(RType), default = []),
        "build_config_values": attr.list(attr.string(), default = []),
        "build_config_values_file": attr.option(attr.source(), default = None),
        "build_string_source_map": attr.bool(),
        "bundle_config_file": attr.option(attr.source(), default = None),
        "compress_asset_libraries": attr.bool(),
        "contacts": attr.list(attr.string(), default = []),
        "cpu_filters": attr.list(attr.enum(TargetCpuType), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "deps": attr.list(attr.dep(), default = []),
        "dex_compression": attr.option(attr.enum(DexStore), default = None),
        "dex_group_lib_limit": attr.int(default = 0),
        "dex_tool": attr.string(default = ""),
        "disable_pre_dex": attr.bool(),
        "duplicate_resource_behavior": attr.enum(DuplicateResourceBehaviour, default = "allow_by_default"),
        "duplicate_resource_whitelist": attr.option(attr.source(), default = None),
        "enable_relinker": attr.bool(),
        "exopackage_modes": attr.list(attr.enum(ExopackageMode), default = []),
        "extra_filtered_resources": attr.list(attr.string(), default = []),
        "field_ref_count_buffer_space": attr.int(default = 0),
        "ignore_aapt_proguard_config": attr.bool(),
        "includes_vector_drawables": attr.bool(),
        "is_cacheable": attr.bool(),
        "keystore": attr.dep(),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "linear_alloc_hard_limit": attr.int(default = 4194304),
        "locales": attr.list(attr.string(), default = []),
        "manifest": attr.option(attr.source(), default = None),
        "manifest_entries": attr.dict(key = attr.string(), value = attr.any(), default = {}),
        "manifest_skeleton": attr.option(attr.source(), default = None),
        "method_ref_count_buffer_space": attr.int(default = 0),
        "minimize_primary_dex_size": attr.bool(),
        "module_manifest_skeleton": attr.option(attr.source(), default = None),
        "native_library_merge_code_generator": attr.option(attr.dep(), default = None),
        "native_library_merge_glue": attr.option(attr.dep(), default = None),
        "native_library_merge_localized_symbols": attr.option(attr.set(attr.string(), sorted = True), default = None),
        "native_library_merge_map": attr.option(attr.dict(key = attr.string(), value = attr.list(attr.regex()), sorted = False), default = None),
        "native_library_merge_sequence": attr.option(attr.list(attr.tuple(attr.string(), attr.list(attr.regex()))), default = None),
        "native_library_merge_sequence_blocklist": attr.option(attr.list(attr.regex()), default = None),
        "no_auto_add_overlay_resources": attr.bool(),
        "no_auto_version_resources": attr.bool(),
        "no_dx": attr.list(attr.dep(), default = []),
        "no_version_transitions_resources": attr.bool(),
        "optimization_passes": attr.int(default = 1),
        "package_asset_libraries": attr.bool(),
        "package_type": attr.enum(PackageType, default = "debug"),
        "packaged_locales": attr.list(attr.string(), default = []),
        "post_filter_resources_cmd": attr.option(attr.arg(), default = None),
        "preprocess_java_classes_bash": attr.option(attr.arg(), default = None),
        "preprocess_java_classes_cmd": attr.option(attr.arg(), default = None),
        "preprocess_java_classes_deps": attr.list(attr.dep(), default = []),
        "primary_dex_patterns": attr.list(attr.string(), default = []),
        "proguard_config": attr.option(attr.source(), default = None),
        "proguard_jvm_args": attr.list(attr.string(), default = []),
        "relinker_whitelist": attr.list(attr.regex(), default = []),
        "resource_compression": attr.enum(ResourceCompressionMode, default = "disabled"),
        "resource_filter": attr.list(attr.string(), default = []),
        "resource_stable_ids": attr.option(attr.source(), default = None),
        "resource_union_package": attr.option(attr.string(), default = None),
        "secondary_dex_weight_limit": attr.option(attr.int(), default = None),
        "skip_crunch_pngs": attr.option(attr.bool(), default = None),
        "skip_proguard": attr.bool(),
        "trim_resource_ids": attr.bool(),
        "use_split_dex": attr.bool(),
        "within_view": attr.option(attr.list(attr.string())),
        "xz_compression_level": attr.int(default = 4),
    },
    "android_instrumentation_apk": {
        "aapt_mode": attr.enum(AaptMode, default = "aapt1"),
        "apk": attr.dep(),
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "deps": attr.list(attr.dep(), default = []),
        "dex_tool": attr.string(default = ""),
        "includes_vector_drawables": attr.bool(),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "manifest": attr.option(attr.source(), default = None),
        "manifest_skeleton": attr.option(attr.source(), default = None),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "android_instrumentation_test": {
        "apk": attr.dep(),
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "env": attr.dict(key = attr.string(), value = attr.arg(), sorted = False, default = {}),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "test_rule_timeout_ms": attr.option(attr.int(), default = None),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "android_library": {
        "abi_generation_mode": attr.option(attr.enum(AbiGenerationMode), default = None),
        "annotation_processing_tool": attr.option(attr.enum(AnnotationProcessingTool), default = None),
        "annotation_processor_deps": attr.list(attr.dep(), default = []),
        "annotation_processor_params": attr.list(attr.string(), default = []),
        "annotation_processors": attr.list(attr.string(), default = []),
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "deps": attr.list(attr.dep(), default = []),
        "deps_query": attr.option(attr.query(), default = None),
        "exported_deps": attr.list(attr.dep(), default = []),
        "exported_provided_deps": attr.list(attr.dep(), default = []),
        "extra_arguments": attr.list(attr.string(), default = []),
        "extra_kotlinc_arguments": attr.list(attr.string(), default = []),
        "friend_paths": attr.list(attr.dep(), default = []),
        "java_version": attr.option(attr.string(), default = None),
        "javac": attr.option(attr.source(), default = None),
        "kotlin_compiler_plugins": attr.dict(key = attr.source(), value = attr.dict(key = attr.string(), value = attr.string(), sorted = False), sorted = False, default = {}),
        "labels": attr.list(attr.string(), default = []),
        "language": attr.option(attr.enum(JvmLanguage), default = None),
        "licenses": attr.list(attr.source(), default = []),
        "manifest": attr.option(attr.source(), default = None),
        "manifest_file": attr.option(attr.source(), default = None),
        "maven_coords": attr.option(attr.string(), default = None),
        "never_mark_as_unused_dependency": attr.option(attr.bool(), default = None),
        "on_unused_dependencies": attr.option(attr.enum(UnusedDependenciesAction), default = None),
        "plugins": attr.list(attr.dep(), default = []),
        "proguard_config": attr.option(attr.source(), default = None),
        "provided_deps": attr.list(attr.dep(), default = []),
        "provided_deps_query": attr.option(attr.query(), default = None),
        "remove_classes": attr.list(attr.regex(), default = []),
        "required_for_source_only_abi": attr.bool(),
        "resource_union_package": attr.option(attr.string(), default = None),
        "resources": attr.list(attr.source(), default = []),
        "resources_root": attr.option(attr.source(), default = None),
        "runtime_deps": attr.list(attr.dep(), default = []),
        "source": attr.option(attr.string(), default = None),
        "source_abi_verification_mode": attr.option(attr.enum(SourceAbiVerificationMode), default = None),
        "source_only_abi_deps": attr.list(attr.dep(), default = []),
        "srcs": attr.list(attr.source(), default = []),
        "target": attr.option(attr.string(), default = None),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "android_manifest": {
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "deps": attr.list(attr.dep(), default = []),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "skeleton": attr.source(),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "android_platform": {
        "base_platform": attr.configuration_label(),
        "native_platforms": attr.dict(key = attr.enum(TargetCpuType), value = attr.configuration_label(), sorted = False, default = {}),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "android_prebuilt_aar": {
        "aar": attr.source(),
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "deps": attr.list(attr.dep(), default = []),
        "javadoc_url": attr.option(attr.string(), default = None),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "maven_coords": attr.option(attr.string(), default = None),
        "required_for_source_only_abi": attr.bool(),
        "source_jar": attr.option(attr.source(), default = None),
        "use_system_library_loader": attr.bool(),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "android_resource": {
        "assets": attr.option(attr.one_of(attr.source(), attr.dict(key = attr.string(), value = attr.source(), sorted = True)), default = None),
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "deps": attr.list(attr.dep(), default = []),
        "has_whitelisted_strings": attr.bool(),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "manifest": attr.option(attr.source(), default = None),
        "package": attr.option(attr.string(), default = None),
        "project_assets": attr.option(attr.source(), default = None),
        "project_res": attr.option(attr.source(), default = None),
        "res": attr.option(attr.one_of(attr.source(), attr.dict(key = attr.string(), value = attr.source(), sorted = True)), default = None),
        "resource_union": attr.bool(),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "apk_genrule": {
        "aab": attr.option(attr.dep(), default = None),
        "apk": attr.option(attr.dep(), default = None),
        "bash": attr.option(attr.arg(), default = None),
        "cacheable": attr.option(attr.bool(), default = None),
        "cmd": attr.option(attr.arg(), default = None),
        "cmd_exe": attr.option(attr.arg(), default = None),
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "enable_sandbox": attr.option(attr.bool(), default = None),
        "environment_expansion_separator": attr.option(attr.string(), default = None),
        "is_cacheable": attr.bool(),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "need_android_tools": attr.bool(default = False),
        "out": attr.option(attr.string(), default = None),
        "remote": attr.option(attr.bool(), default = None),
        "srcs": attr.named_set(attr.source(), sorted = False, default = []),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "apple_asset_catalog": {
        "app_icon": attr.option(attr.string(), default = None),
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "dirs": attr.list(attr.source(), default = []),
        "labels": attr.list(attr.string(), default = []),
        "launch_image": attr.option(attr.string(), default = None),
        "licenses": attr.list(attr.source(), default = []),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "apple_binary": {
        "bridging_header": attr.option(attr.source(), default = None),
        "can_be_asset": attr.option(attr.bool(), default = None),
        "compiler_flags": attr.list(attr.arg(), default = []),
        "configs": attr.dict(key = attr.string(), value = attr.dict(key = attr.string(), value = attr.string(), sorted = False), sorted = False, default = {}),
        "contacts": attr.list(attr.string(), default = []),
        "cxx_runtime_type": attr.option(attr.enum(CxxRuntimeType), default = None),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "default_platform": attr.option(attr.string(), default = None),
        "defaults": attr.dict(key = attr.string(), value = attr.string(), sorted = False, default = {}),
        "deps": attr.list(attr.dep(), default = []),
        "devirt_enabled": attr.bool(),
        "diagnostics": attr.dict(key = attr.string(), value = attr.source(), sorted = False, default = {}),
        "enable_cxx_interop": attr.bool(),
        "entitlements_file": attr.option(attr.source(), default = None),
        "executable_name": attr.option(attr.string(), default = None),
        "exported_deps": attr.list(attr.dep(), default = []),
        "exported_header_style": attr.enum(IncludeType, default = "local"),
        "exported_headers": attr.named_set(attr.source(), sorted = True, default = []),
        "exported_lang_platform_preprocessor_flags": attr.dict(key = attr.enum(CxxSourceType), value = attr.list(attr.tuple(attr.regex(), attr.list(attr.arg()))), sorted = False, default = {}),
        "exported_lang_preprocessor_flags": attr.dict(key = attr.enum(CxxSourceType), value = attr.list(attr.arg()), sorted = False, default = {}),
        "exported_linker_flags": attr.list(attr.arg(), default = []),
        "exported_platform_deps": attr.list(attr.tuple(attr.regex(), attr.set(attr.dep(), sorted = True)), default = []),
        "exported_platform_headers": attr.list(attr.tuple(attr.regex(), attr.named_set(attr.source(), sorted = True)), default = []),
        "exported_platform_linker_flags": attr.list(attr.tuple(attr.regex(), attr.list(attr.arg())), default = []),
        "exported_platform_preprocessor_flags": attr.list(attr.tuple(attr.regex(), attr.list(attr.arg())), default = []),
        "exported_post_linker_flags": attr.list(attr.arg(), default = []),
        "exported_post_platform_linker_flags": attr.list(attr.tuple(attr.regex(), attr.list(attr.arg())), default = []),
        "exported_preprocessor_flags": attr.list(attr.arg(), default = []),
        "extra_xcode_files": attr.list(attr.source(), default = []),
        "extra_xcode_sources": attr.list(attr.source(), default = []),
        "fat_lto": attr.bool(),
        "focused_list_target": attr.option(attr.dep(), default = None),
        "force_static": attr.option(attr.bool(), default = None),
        "frameworks": attr.list(attr.string(), default = []),
        "header_namespace": attr.option(attr.string(), default = None),
        "header_path_prefix": attr.option(attr.string(), default = None),
        "headers": attr.named_set(attr.source(), sorted = True, default = []),
        "headers_as_raw_headers_mode": attr.option(attr.enum(HeadersAsRawHeadersMode), default = None),
        "include_directories": attr.set(attr.string(), sorted = True, default = []),
        "info_plist": attr.option(attr.source(), default = None),
        "info_plist_substitutions": attr.dict(key = attr.string(), value = attr.string(), sorted = False, default = {}),
        "labels": attr.list(attr.string(), default = []),
        "lang_compiler_flags": attr.dict(key = attr.enum(CxxSourceType), value = attr.list(attr.arg()), sorted = False, default = {}),
        "lang_platform_compiler_flags": attr.dict(key = attr.enum(CxxSourceType), value = attr.list(attr.tuple(attr.regex(), attr.list(attr.arg()))), sorted = False, default = {}),
        "lang_platform_preprocessor_flags": attr.dict(key = attr.enum(CxxSourceType), value = attr.list(attr.tuple(attr.regex(), attr.list(attr.arg()))), sorted = False, default = {}),
        "lang_preprocessor_flags": attr.dict(key = attr.enum(CxxSourceType), value = attr.list(attr.arg()), sorted = False, default = {}),
        "libraries": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "link_group": attr.option(attr.string(), default = None),
        "link_group_map": attr.option(attr.list(attr.tuple(attr.string(), attr.list(attr.tuple(attr.dep(), attr.enum(Traversal), attr.option(attr.string()))))), default = None),
        "link_style": attr.option(attr.enum(LinkableDepType), default = None),
        "link_whole": attr.option(attr.bool(), default = None),
        "linker_extra_outputs": attr.list(attr.string(), default = []),
        "linker_flags": attr.list(attr.arg(), default = []),
        "modular": attr.bool(),
        "module_name": attr.option(attr.string(), default = None),
        "module_requires_cxx": attr.bool(),
        "platform_compiler_flags": attr.list(attr.tuple(attr.regex(), attr.list(attr.arg())), default = []),
        "platform_deps": attr.list(attr.tuple(attr.regex(), attr.set(attr.dep(), sorted = True)), default = []),
        "platform_headers": attr.list(attr.tuple(attr.regex(), attr.named_set(attr.source(), sorted = True)), default = []),
        "platform_linker_flags": attr.list(attr.tuple(attr.regex(), attr.list(attr.arg())), default = []),
        "platform_preprocessor_flags": attr.list(attr.tuple(attr.regex(), attr.list(attr.arg())), default = []),
        "platform_srcs": attr.list(attr.tuple(attr.regex(), attr.set(attr.one_of(attr.source(), attr.tuple(attr.source(), attr.list(attr.arg()))), sorted = True)), default = []),
        "post_linker_flags": attr.list(attr.arg(), default = []),
        "post_platform_linker_flags": attr.list(attr.tuple(attr.regex(), attr.list(attr.arg())), default = []),
        "precompiled_header": attr.option(attr.source(), default = None),
        "preferred_linkage": attr.option(attr.enum(Linkage), default = None),
        "prefix_header": attr.option(attr.source(), default = None),
        "preprocessor_flags": attr.list(attr.arg(), default = []),
        "public_include_directories": attr.set(attr.string(), sorted = True, default = []),
        "public_system_include_directories": attr.set(attr.string(), sorted = True, default = []),
        "raw_headers": attr.set(attr.source(), sorted = True, default = []),
        "reexport_all_header_dependencies": attr.option(attr.bool(), default = None),
        "sdk_modules": attr.list(attr.string(), default = []),
        "serialize_debugging_options": attr.bool(),
        "soname": attr.option(attr.string(), default = None),
        "srcs": attr.list(attr.one_of(attr.source(), attr.tuple(attr.source(), attr.list(attr.arg()))), default = []),
        "static_library_basename": attr.option(attr.string(), default = None),
        "supported_platforms_regex": attr.option(attr.regex(), default = None),
        "supports_merged_linking": attr.option(attr.bool(), default = None),
        "swift_compiler_flags": attr.list(attr.arg(), default = []),
        "swift_version": attr.option(attr.string(), default = None),
        "target_sdk_version": attr.option(attr.string(), default = None),
        "thin_lto": attr.bool(),
        "use_submodules": attr.bool(),
        "uses_cxx_explicit_modules": attr.bool(),
        "uses_explicit_modules": attr.bool(),
        "uses_modules": attr.bool(),
        "within_view": attr.option(attr.list(attr.string())),
        "xcode_private_headers_symlinks": attr.option(attr.bool(), default = None),
        "xcode_public_headers_symlinks": attr.option(attr.bool(), default = None),
    },
    "apple_bundle": {
        "asset_catalogs_compilation_options": attr.dict(key = attr.string(), value = attr.any(), default = {}),
        "binary": attr.option(attr.dep(), default = None),
        "codesign_flags": attr.list(attr.string(), default = []),
        "codesign_identity": attr.option(attr.string(), default = None),
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "default_platform": attr.option(attr.string(), default = None),
        "deps": attr.list(attr.dep(), default = []),
        "extension": attr.one_of(attr.enum(AppleBundleExtension), attr.string()),
        "ibtool_flags": attr.option(attr.list(attr.string()), default = None),
        "ibtool_module_flag": attr.option(attr.bool(), default = None),
        "incremental_bundling_enabled": attr.option(attr.bool(), default = None),
        "info_plist": attr.source(),
        "info_plist_substitutions": attr.dict(key = attr.string(), value = attr.string(), sorted = False, default = {}),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "platform_binary": attr.option(attr.list(attr.tuple(attr.regex(), attr.dep())), default = None),
        "product_name": attr.option(attr.string(), default = None),
        "resource_group": attr.option(attr.string(), default = None),
        "resource_group_map": attr.option(attr.list(attr.tuple(attr.string(), attr.list(attr.tuple(attr.dep(), attr.enum(Traversal), attr.option(attr.string()))))), default = None),
        "skip_copying_swift_stdlib": attr.option(attr.bool(), default = None),
        "try_skip_code_signing": attr.option(attr.bool(), default = None),
        "within_view": attr.option(attr.list(attr.string())),
        "xcode_product_type": attr.option(attr.string(), default = None),
    },
    "apple_library": {
        "bridging_header": attr.option(attr.source(), default = None),
        "can_be_asset": attr.option(attr.bool(), default = None),
        "compiler_flags": attr.list(attr.arg(), default = []),
        "configs": attr.dict(key = attr.string(), value = attr.dict(key = attr.string(), value = attr.string(), sorted = False), sorted = False, default = {}),
        "contacts": attr.list(attr.string(), default = []),
        "cxx_runtime_type": attr.option(attr.enum(CxxRuntimeType), default = None),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "default_platform": attr.option(attr.string(), default = None),
        "defaults": attr.dict(key = attr.string(), value = attr.string(), sorted = False, default = {}),
        "deps": attr.list(attr.dep(), default = []),
        "devirt_enabled": attr.bool(),
        "diagnostics": attr.dict(key = attr.string(), value = attr.source(), sorted = False, default = {}),
        "enable_cxx_interop": attr.bool(),
        "executable_name": attr.option(attr.string(), default = None),
        "exported_deps": attr.list(attr.dep(), default = []),
        "exported_header_style": attr.enum(IncludeType, default = "local"),
        "exported_headers": attr.named_set(attr.source(), sorted = True, default = []),
        "exported_lang_platform_preprocessor_flags": attr.dict(key = attr.enum(CxxSourceType), value = attr.list(attr.tuple(attr.regex(), attr.list(attr.arg()))), sorted = False, default = {}),
        "exported_lang_preprocessor_flags": attr.dict(key = attr.enum(CxxSourceType), value = attr.list(attr.arg()), sorted = False, default = {}),
        "exported_linker_flags": attr.list(attr.arg(), default = []),
        "exported_platform_deps": attr.list(attr.tuple(attr.regex(), attr.set(attr.dep(), sorted = True)), default = []),
        "exported_platform_headers": attr.list(attr.tuple(attr.regex(), attr.named_set(attr.source(), sorted = True)), default = []),
        "exported_platform_linker_flags": attr.list(attr.tuple(attr.regex(), attr.list(attr.arg())), default = []),
        "exported_platform_preprocessor_flags": attr.list(attr.tuple(attr.regex(), attr.list(attr.arg())), default = []),
        "exported_post_linker_flags": attr.list(attr.arg(), default = []),
        "exported_post_platform_linker_flags": attr.list(attr.tuple(attr.regex(), attr.list(attr.arg())), default = []),
        "exported_preprocessor_flags": attr.list(attr.arg(), default = []),
        "extra_xcode_files": attr.list(attr.source(), default = []),
        "extra_xcode_sources": attr.list(attr.source(), default = []),
        "fat_lto": attr.bool(),
        "focused_list_target": attr.option(attr.dep(), default = None),
        "force_static": attr.option(attr.bool(), default = None),
        "frameworks": attr.list(attr.string(), default = []),
        "header_namespace": attr.option(attr.string(), default = None),
        "header_path_prefix": attr.option(attr.string(), default = None),
        "headers": attr.named_set(attr.source(), sorted = True, default = []),
        "headers_as_raw_headers_mode": attr.option(attr.enum(HeadersAsRawHeadersMode), default = None),
        "include_directories": attr.set(attr.string(), sorted = True, default = []),
        "info_plist": attr.option(attr.source(), default = None),
        "info_plist_substitutions": attr.dict(key = attr.string(), value = attr.string(), sorted = False, default = {}),
        "labels": attr.list(attr.string(), default = []),
        "lang_compiler_flags": attr.dict(key = attr.enum(CxxSourceType), value = attr.list(attr.arg()), sorted = False, default = {}),
        "lang_platform_compiler_flags": attr.dict(key = attr.enum(CxxSourceType), value = attr.list(attr.tuple(attr.regex(), attr.list(attr.arg()))), sorted = False, default = {}),
        "lang_platform_preprocessor_flags": attr.dict(key = attr.enum(CxxSourceType), value = attr.list(attr.tuple(attr.regex(), attr.list(attr.arg()))), sorted = False, default = {}),
        "lang_preprocessor_flags": attr.dict(key = attr.enum(CxxSourceType), value = attr.list(attr.arg()), sorted = False, default = {}),
        "libraries": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "link_group": attr.option(attr.string(), default = None),
        "link_group_map": attr.option(attr.list(attr.tuple(attr.string(), attr.list(attr.tuple(attr.dep(), attr.enum(Traversal), attr.option(attr.string()))))), default = None),
        "link_style": attr.option(attr.enum(LinkableDepType), default = None),
        "link_whole": attr.option(attr.bool(), default = None),
        "linker_extra_outputs": attr.list(attr.string(), default = []),
        "linker_flags": attr.list(attr.arg(), default = []),
        "modular": attr.bool(),
        "module_name": attr.option(attr.string(), default = None),
        "module_requires_cxx": attr.bool(),
        "platform_compiler_flags": attr.list(attr.tuple(attr.regex(), attr.list(attr.arg())), default = []),
        "platform_deps": attr.list(attr.tuple(attr.regex(), attr.set(attr.dep(), sorted = True)), default = []),
        "platform_headers": attr.list(attr.tuple(attr.regex(), attr.named_set(attr.source(), sorted = True)), default = []),
        "platform_linker_flags": attr.list(attr.tuple(attr.regex(), attr.list(attr.arg())), default = []),
        "platform_preprocessor_flags": attr.list(attr.tuple(attr.regex(), attr.list(attr.arg())), default = []),
        "platform_srcs": attr.list(attr.tuple(attr.regex(), attr.set(attr.one_of(attr.source(), attr.tuple(attr.source(), attr.list(attr.arg()))), sorted = True)), default = []),
        "post_linker_flags": attr.list(attr.arg(), default = []),
        "post_platform_linker_flags": attr.list(attr.tuple(attr.regex(), attr.list(attr.arg())), default = []),
        "precompiled_header": attr.option(attr.source(), default = None),
        "preferred_linkage": attr.option(attr.enum(Linkage), default = None),
        "prefix_header": attr.option(attr.source(), default = None),
        "preprocessor_flags": attr.list(attr.arg(), default = []),
        "public_include_directories": attr.set(attr.string(), sorted = True, default = []),
        "public_system_include_directories": attr.set(attr.string(), sorted = True, default = []),
        "raw_headers": attr.set(attr.source(), sorted = True, default = []),
        "reexport_all_header_dependencies": attr.option(attr.bool(), default = None),
        "sdk_modules": attr.list(attr.string(), default = []),
        "serialize_debugging_options": attr.bool(),
        "soname": attr.option(attr.string(), default = None),
        "srcs": attr.list(attr.one_of(attr.source(), attr.tuple(attr.source(), attr.list(attr.arg()))), default = []),
        "static_library_basename": attr.option(attr.string(), default = None),
        "supported_platforms_regex": attr.option(attr.regex(), default = None),
        "supports_merged_linking": attr.option(attr.bool(), default = None),
        "swift_compiler_flags": attr.list(attr.arg(), default = []),
        "swift_version": attr.option(attr.string(), default = None),
        "target_sdk_version": attr.option(attr.string(), default = None),
        "thin_lto": attr.bool(),
        "use_submodules": attr.bool(),
        "uses_cxx_explicit_modules": attr.bool(),
        "uses_explicit_modules": attr.bool(),
        "uses_modules": attr.bool(),
        "within_view": attr.option(attr.list(attr.string())),
        "xcode_private_headers_symlinks": attr.option(attr.bool(), default = None),
        "xcode_public_headers_symlinks": attr.option(attr.bool(), default = None),
    },
    "apple_package": {
        "bundle": attr.dep(),
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "default_platform": attr.option(attr.string(), default = None),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "need_android_tools": attr.bool(default = False),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "apple_resource": {
        "codesign_on_copy": attr.bool(),
        "contacts": attr.list(attr.string(), default = []),
        "content_dirs": attr.list(attr.source(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "destination": attr.option(attr.enum(AppleResourceBundleDestination), default = None),
        "dirs": attr.list(attr.source(), default = []),
        "files": attr.list(attr.source(), default = []),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "named_variants": attr.dict(key = attr.string(), value = attr.set(attr.source(), sorted = False), sorted = False, default = {}),
        "resources_from_deps": attr.list(attr.dep(), default = []),
        "variants": attr.list(attr.source(), default = []),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "apple_test": {
        "asset_catalogs_compilation_options": attr.dict(key = attr.string(), value = attr.any(), default = {}),
        "bridging_header": attr.option(attr.source(), default = None),
        "can_be_asset": attr.option(attr.bool(), default = None),
        "codesign_flags": attr.list(attr.string(), default = []),
        "codesign_identity": attr.option(attr.string(), default = None),
        "compiler_flags": attr.list(attr.arg(), default = []),
        "configs": attr.dict(key = attr.string(), value = attr.dict(key = attr.string(), value = attr.string(), sorted = False), sorted = False, default = {}),
        "contacts": attr.list(attr.string(), default = []),
        "cxx_runtime_type": attr.option(attr.enum(CxxRuntimeType), default = None),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "default_platform": attr.option(attr.string(), default = None),
        "defaults": attr.dict(key = attr.string(), value = attr.string(), sorted = False, default = {}),
        "deps": attr.list(attr.dep(), default = []),
        "destination_specifier": attr.dict(key = attr.string(), value = attr.string(), sorted = False, default = {}),
        "devirt_enabled": attr.bool(),
        "diagnostics": attr.dict(key = attr.string(), value = attr.source(), sorted = False, default = {}),
        "enable_cxx_interop": attr.bool(),
        "entitlements_file": attr.option(attr.source(), default = None),
        "env": attr.option(attr.dict(key = attr.string(), value = attr.arg(), sorted = False), default = None),
        "executable_name": attr.option(attr.string(), default = None),
        "exported_deps": attr.list(attr.dep(), default = []),
        "exported_header_style": attr.enum(IncludeType, default = "local"),
        "exported_headers": attr.named_set(attr.source(), sorted = True, default = []),
        "exported_lang_platform_preprocessor_flags": attr.dict(key = attr.enum(CxxSourceType), value = attr.list(attr.tuple(attr.regex(), attr.list(attr.arg()))), sorted = False, default = {}),
        "exported_lang_preprocessor_flags": attr.dict(key = attr.enum(CxxSourceType), value = attr.list(attr.arg()), sorted = False, default = {}),
        "exported_linker_flags": attr.list(attr.arg(), default = []),
        "exported_platform_deps": attr.list(attr.tuple(attr.regex(), attr.set(attr.dep(), sorted = True)), default = []),
        "exported_platform_headers": attr.list(attr.tuple(attr.regex(), attr.named_set(attr.source(), sorted = True)), default = []),
        "exported_platform_linker_flags": attr.list(attr.tuple(attr.regex(), attr.list(attr.arg())), default = []),
        "exported_platform_preprocessor_flags": attr.list(attr.tuple(attr.regex(), attr.list(attr.arg())), default = []),
        "exported_post_linker_flags": attr.list(attr.arg(), default = []),
        "exported_post_platform_linker_flags": attr.list(attr.tuple(attr.regex(), attr.list(attr.arg())), default = []),
        "exported_preprocessor_flags": attr.list(attr.arg(), default = []),
        "extra_xcode_files": attr.list(attr.source(), default = []),
        "extra_xcode_sources": attr.list(attr.source(), default = []),
        "fat_lto": attr.bool(),
        "focused_list_target": attr.option(attr.dep(), default = None),
        "force_static": attr.option(attr.bool(), default = None),
        "frameworks": attr.list(attr.string(), default = []),
        "header_namespace": attr.option(attr.string(), default = None),
        "header_path_prefix": attr.option(attr.string(), default = None),
        "headers": attr.named_set(attr.source(), sorted = True, default = []),
        "headers_as_raw_headers_mode": attr.option(attr.enum(HeadersAsRawHeadersMode), default = None),
        "include_directories": attr.set(attr.string(), sorted = True, default = []),
        "incremental_bundling_enabled": attr.option(attr.bool(), default = None),
        "info_plist": attr.source(),
        "info_plist_substitutions": attr.dict(key = attr.string(), value = attr.string(), sorted = False, default = {}),
        "is_ui_test": attr.bool(),
        "labels": attr.list(attr.string(), default = []),
        "lang_compiler_flags": attr.dict(key = attr.enum(CxxSourceType), value = attr.list(attr.arg()), sorted = False, default = {}),
        "lang_platform_compiler_flags": attr.dict(key = attr.enum(CxxSourceType), value = attr.list(attr.tuple(attr.regex(), attr.list(attr.arg()))), sorted = False, default = {}),
        "lang_platform_preprocessor_flags": attr.dict(key = attr.enum(CxxSourceType), value = attr.list(attr.tuple(attr.regex(), attr.list(attr.arg()))), sorted = False, default = {}),
        "lang_preprocessor_flags": attr.dict(key = attr.enum(CxxSourceType), value = attr.list(attr.arg()), sorted = False, default = {}),
        "libraries": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "link_group": attr.option(attr.string(), default = None),
        "link_group_map": attr.option(attr.list(attr.tuple(attr.string(), attr.list(attr.tuple(attr.dep(), attr.enum(Traversal), attr.option(attr.string()))))), default = None),
        "link_style": attr.option(attr.enum(LinkableDepType), default = None),
        "link_whole": attr.option(attr.bool(), default = None),
        "linker_extra_outputs": attr.list(attr.string(), default = []),
        "linker_flags": attr.list(attr.arg(), default = []),
        "modular": attr.bool(),
        "module_name": attr.option(attr.string(), default = None),
        "module_requires_cxx": attr.bool(),
        "platform_compiler_flags": attr.list(attr.tuple(attr.regex(), attr.list(attr.arg())), default = []),
        "platform_deps": attr.list(attr.tuple(attr.regex(), attr.set(attr.dep(), sorted = True)), default = []),
        "platform_headers": attr.list(attr.tuple(attr.regex(), attr.named_set(attr.source(), sorted = True)), default = []),
        "platform_linker_flags": attr.list(attr.tuple(attr.regex(), attr.list(attr.arg())), default = []),
        "platform_preprocessor_flags": attr.list(attr.tuple(attr.regex(), attr.list(attr.arg())), default = []),
        "platform_srcs": attr.list(attr.tuple(attr.regex(), attr.set(attr.one_of(attr.source(), attr.tuple(attr.source(), attr.list(attr.arg()))), sorted = True)), default = []),
        "post_linker_flags": attr.list(attr.arg(), default = []),
        "post_platform_linker_flags": attr.list(attr.tuple(attr.regex(), attr.list(attr.arg())), default = []),
        "precompiled_header": attr.option(attr.source(), default = None),
        "preferred_linkage": attr.option(attr.enum(Linkage), default = None),
        "prefix_header": attr.option(attr.source(), default = None),
        "preprocessor_flags": attr.list(attr.arg(), default = []),
        "public_include_directories": attr.set(attr.string(), sorted = True, default = []),
        "public_system_include_directories": attr.set(attr.string(), sorted = True, default = []),
        "raw_headers": attr.set(attr.source(), sorted = True, default = []),
        "reexport_all_header_dependencies": attr.option(attr.bool(), default = None),
        "run_test_separately": attr.bool(),
        "runner": attr.option(attr.dep(), default = None),
        "sdk_modules": attr.list(attr.string(), default = []),
        "serialize_debugging_options": attr.bool(),
        "skip_copying_swift_stdlib": attr.option(attr.bool(), default = None),
        "snapshot_reference_images_path": attr.option(attr.one_of(attr.source(), attr.string()), default = None),
        "soname": attr.option(attr.string(), default = None),
        "specs": attr.option(attr.arg(json = True), default = None),
        "srcs": attr.list(attr.one_of(attr.source(), attr.tuple(attr.source(), attr.list(attr.arg()))), default = []),
        "static_library_basename": attr.option(attr.string(), default = None),
        "supported_platforms_regex": attr.option(attr.regex(), default = None),
        "supports_merged_linking": attr.option(attr.bool(), default = None),
        "swift_compiler_flags": attr.list(attr.arg(), default = []),
        "swift_version": attr.option(attr.string(), default = None),
        "target_sdk_version": attr.option(attr.string(), default = None),
        "test_host_app": attr.option(attr.dep(), default = None),
        "test_rule_timeout_ms": attr.option(attr.int(), default = None),
        "thin_lto": attr.bool(),
        "try_skip_code_signing": attr.option(attr.bool(), default = None),
        "ui_test_target_app": attr.option(attr.dep(), default = None),
        "use_submodules": attr.bool(),
        "uses_cxx_explicit_modules": attr.bool(),
        "uses_explicit_modules": attr.bool(),
        "uses_modules": attr.bool(),
        "within_view": attr.option(attr.list(attr.string())),
        "xcode_private_headers_symlinks": attr.option(attr.bool(), default = None),
        "xcode_product_type": attr.option(attr.string(), default = None),
        "xcode_public_headers_symlinks": attr.option(attr.bool(), default = None),
    },
    "apple_toolchain": {
        "actool": attr.source(),
        "architecture": attr.string(default = ""),
        "build_version": attr.option(attr.string(), default = None),
        "codesign": attr.source(),
        "codesign_allocate": attr.source(),
        "contacts": attr.list(attr.string(), default = []),
        "copy_scene_kit_assets": attr.option(attr.source(), default = None),
        "cxx_toolchain": attr.dep(),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "developer_path": attr.option(attr.source(), default = None),
        "dsymutil": attr.source(),
        "dwarfdump": attr.option(attr.source(), default = None),
        "ibtool": attr.source(),
        "labels": attr.list(attr.string(), default = []),
        "libtool": attr.source(),
        "licenses": attr.list(attr.source(), default = []),
        "lipo": attr.source(),
        "min_version": attr.string(default = ""),
        "momc": attr.source(),
        "platform_path": attr.source(),
        "sdk_environment": attr.option(attr.string(), default = None),
        "sdk_name": attr.string(default = ""),
        "sdk_path": attr.source(),
        "swift_toolchain": attr.option(attr.dep(), default = None),
        "version": attr.string(default = ""),
        "watch_kit_stub_binary": attr.option(attr.source(), default = None),
        "within_view": attr.option(attr.list(attr.string())),
        "work_around_dsymutil_lto_stack_overflow_bug": attr.option(attr.bool(), default = None),
        "xcode_build_version": attr.string(default = ""),
        "xcode_version": attr.string(default = ""),
        "xctest": attr.source(),
    },
    "apple_toolchain_set": {
        "apple_toolchains": attr.list(attr.dep(), default = []),
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "cgo_library": {
        "cgo_compiler_flags": attr.list(attr.string(), default = []),
        "compiler_flags": attr.list(attr.arg(), default = []),
        "contacts": attr.list(attr.string(), default = []),
        "cxx_runtime_type": attr.option(attr.enum(CxxRuntimeType), default = None),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "default_platform": attr.option(attr.string(), default = None),
        "defaults": attr.dict(key = attr.string(), value = attr.string(), sorted = False, default = {}),
        "deps": attr.list(attr.dep(), default = []),
        "deps_query": attr.option(attr.query(), default = None),
        "devirt_enabled": attr.bool(),
        "executable_name": attr.option(attr.string(), default = None),
        "exported_deps": attr.list(attr.dep(), default = []),
        "fat_lto": attr.bool(),
        "focused_list_target": attr.option(attr.dep(), default = None),
        "frameworks": attr.list(attr.string(), default = []),
        "go_assembler_flags": attr.list(attr.string(), default = []),
        "go_compiler_flags": attr.list(attr.string(), default = []),
        "go_srcs": attr.list(attr.source(), default = []),
        "header_namespace": attr.option(attr.string(), default = None),
        "headers": attr.named_set(attr.source(), sorted = True, default = []),
        "headers_as_raw_headers_mode": attr.option(attr.enum(HeadersAsRawHeadersMode), default = None),
        "include_directories": attr.set(attr.string(), sorted = True, default = []),
        "labels": attr.list(attr.string(), default = []),
        "lang_compiler_flags": attr.dict(key = attr.enum(CxxSourceType), value = attr.list(attr.arg()), sorted = False, default = {}),
        "lang_platform_compiler_flags": attr.dict(key = attr.enum(CxxSourceType), value = attr.list(attr.tuple(attr.regex(), attr.list(attr.arg()))), sorted = False, default = {}),
        "lang_platform_preprocessor_flags": attr.dict(key = attr.enum(CxxSourceType), value = attr.list(attr.tuple(attr.regex(), attr.list(attr.arg()))), sorted = False, default = {}),
        "lang_preprocessor_flags": attr.dict(key = attr.enum(CxxSourceType), value = attr.list(attr.arg()), sorted = False, default = {}),
        "libraries": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "link_deps_query_whole": attr.bool(),
        "link_group": attr.option(attr.string(), default = None),
        "link_group_map": attr.option(attr.list(attr.tuple(attr.string(), attr.list(attr.tuple(attr.dep(), attr.enum(Traversal), attr.option(attr.string()))))), default = None),
        "link_style": attr.option(attr.enum(LinkableDepType), default = None),
        "linker_extra_outputs": attr.list(attr.string(), default = []),
        "linker_flags": attr.list(attr.arg(), default = []),
        "package_name": attr.option(attr.string(), default = None),
        "platform_compiler_flags": attr.list(attr.tuple(attr.regex(), attr.list(attr.arg())), default = []),
        "platform_deps": attr.list(attr.tuple(attr.regex(), attr.set(attr.dep(), sorted = True)), default = []),
        "platform_headers": attr.list(attr.tuple(attr.regex(), attr.named_set(attr.source(), sorted = True)), default = []),
        "platform_linker_flags": attr.list(attr.tuple(attr.regex(), attr.list(attr.arg())), default = []),
        "platform_preprocessor_flags": attr.list(attr.tuple(attr.regex(), attr.list(attr.arg())), default = []),
        "platform_srcs": attr.list(attr.tuple(attr.regex(), attr.set(attr.one_of(attr.source(), attr.tuple(attr.source(), attr.list(attr.arg()))), sorted = True)), default = []),
        "post_linker_flags": attr.list(attr.arg(), default = []),
        "post_platform_linker_flags": attr.list(attr.tuple(attr.regex(), attr.list(attr.arg())), default = []),
        "precompiled_header": attr.option(attr.source(), default = None),
        "prefer_stripped_objects": attr.bool(),
        "prefix_header": attr.option(attr.source(), default = None),
        "preprocessor_flags": attr.list(attr.arg(), default = []),
        "raw_headers": attr.set(attr.source(), sorted = True, default = []),
        "srcs": attr.list(attr.one_of(attr.source(), attr.tuple(attr.source(), attr.list(attr.arg()))), default = []),
        "thin_lto": attr.bool(),
        "version_universe": attr.option(attr.string(), default = None),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "command_alias": {
        "args": attr.list(attr.arg(), default = []),
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "env": attr.dict(key = attr.string(), value = attr.arg(), sorted = False, default = {}),
        "exe": attr.option(attr.dep(), default = None),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "platform_exe": attr.dict(key = attr.enum(Platform), value = attr.dep(), sorted = False, default = {}),
        "resources": attr.list(attr.source(), default = []),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "config_setting": {
        "constraint_values": attr.list(attr.configuration_label(), default = []),
        "values": attr.dict(key = attr.string(), value = attr.string(), sorted = False, default = {}),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "configured_alias": {
        "actual": attr.configuration_label(),
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "platform": attr.configuration_label(),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "constraint_setting": {
        "within_view": attr.option(attr.list(attr.string())),
    },
    "constraint_value": {
        "constraint_setting": attr.configuration_label(),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "core_data_model": {
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "path": attr.source(),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "csharp_library": {
        "compiler_flags": attr.list(attr.string(), default = []),
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "deps": attr.list(attr.one_of(attr.dep(), attr.string()), default = []),
        "dll_name": attr.string(default = ""),
        "framework_ver": attr.enum(FrameworkVersion),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "resources": attr.dict(key = attr.string(), value = attr.source(), sorted = False, default = {}),
        "srcs": attr.list(attr.source(), default = []),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "cxx_binary": {
        "compiler_flags": attr.list(attr.arg(), default = []),
        "contacts": attr.list(attr.string(), default = []),
        "cxx_runtime_type": attr.option(attr.enum(CxxRuntimeType), default = None),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "default_platform": attr.option(attr.string(), default = None),
        "defaults": attr.dict(key = attr.string(), value = attr.string(), sorted = False, default = {}),
        "deps": attr.list(attr.dep(), default = []),
        "deps_query": attr.option(attr.query(), default = None),
        "devirt_enabled": attr.bool(),
        "executable_name": attr.option(attr.string(), default = None),
        "fat_lto": attr.bool(),
        "focused_list_target": attr.option(attr.dep(), default = None),
        "frameworks": attr.list(attr.string(), default = []),
        "header_namespace": attr.option(attr.string(), default = None),
        "headers": attr.named_set(attr.source(), sorted = True, default = []),
        "headers_as_raw_headers_mode": attr.option(attr.enum(HeadersAsRawHeadersMode), default = None),
        "include_directories": attr.set(attr.string(), sorted = True, default = []),
        "labels": attr.list(attr.string(), default = []),
        "lang_compiler_flags": attr.dict(key = attr.enum(CxxSourceType), value = attr.list(attr.arg()), sorted = False, default = {}),
        "lang_platform_compiler_flags": attr.dict(key = attr.enum(CxxSourceType), value = attr.list(attr.tuple(attr.regex(), attr.list(attr.arg()))), sorted = False, default = {}),
        "lang_platform_preprocessor_flags": attr.dict(key = attr.enum(CxxSourceType), value = attr.list(attr.tuple(attr.regex(), attr.list(attr.arg()))), sorted = False, default = {}),
        "lang_preprocessor_flags": attr.dict(key = attr.enum(CxxSourceType), value = attr.list(attr.arg()), sorted = False, default = {}),
        "libraries": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "link_deps_query_whole": attr.bool(),
        "link_group": attr.option(attr.string(), default = None),
        "link_group_map": attr.option(attr.list(attr.tuple(attr.string(), attr.list(attr.tuple(attr.dep(), attr.enum(Traversal), attr.option(attr.string()))))), default = None),
        "link_style": attr.option(attr.enum(LinkableDepType), default = None),
        "linker_extra_outputs": attr.list(attr.string(), default = []),
        "linker_flags": attr.list(attr.arg(), default = []),
        "platform_compiler_flags": attr.list(attr.tuple(attr.regex(), attr.list(attr.arg())), default = []),
        "platform_deps": attr.list(attr.tuple(attr.regex(), attr.set(attr.dep(), sorted = True)), default = []),
        "platform_headers": attr.list(attr.tuple(attr.regex(), attr.named_set(attr.source(), sorted = True)), default = []),
        "platform_linker_flags": attr.list(attr.tuple(attr.regex(), attr.list(attr.arg())), default = []),
        "platform_preprocessor_flags": attr.list(attr.tuple(attr.regex(), attr.list(attr.arg())), default = []),
        "platform_srcs": attr.list(attr.tuple(attr.regex(), attr.set(attr.one_of(attr.source(), attr.tuple(attr.source(), attr.list(attr.arg()))), sorted = True)), default = []),
        "post_linker_flags": attr.list(attr.arg(), default = []),
        "post_platform_linker_flags": attr.list(attr.tuple(attr.regex(), attr.list(attr.arg())), default = []),
        "precompiled_header": attr.option(attr.source(), default = None),
        "prefer_stripped_objects": attr.bool(),
        "prefix_header": attr.option(attr.source(), default = None),
        "preprocessor_flags": attr.list(attr.arg(), default = []),
        "raw_headers": attr.set(attr.source(), sorted = True, default = []),
        "resources": attr.named_set(attr.source(), sorted = True, default = []),
        "srcs": attr.list(attr.one_of(attr.source(), attr.tuple(attr.source(), attr.list(attr.arg()))), default = []),
        "thin_lto": attr.bool(),
        "version_universe": attr.option(attr.string(), default = None),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "cxx_genrule": {
        "bash": attr.option(attr.arg(), default = None),
        "cacheable": attr.option(attr.bool(), default = None),
        "cmd": attr.option(attr.arg(), default = None),
        "cmd_exe": attr.option(attr.arg(), default = None),
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "default_outs": attr.option(attr.set(attr.string(), sorted = False), default = None),
        "enable_sandbox": attr.option(attr.bool(), default = None),
        "environment_expansion_separator": attr.option(attr.string(), default = None),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "need_android_tools": attr.bool(default = False),
        "out": attr.option(attr.string(), default = None),
        "outs": attr.option(attr.dict(key = attr.string(), value = attr.set(attr.string(), sorted = False), sorted = False), default = None),
        "remote": attr.option(attr.bool(), default = None),
        "srcs": attr.named_set(attr.source(), sorted = False, default = []),
        "type": attr.option(attr.string(), default = None),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "cxx_library": {
        "bridging_header": attr.option(attr.source(), default = None),
        "can_be_asset": attr.option(attr.bool(), default = None),
        "compiler_flags": attr.list(attr.arg(), default = []),
        "contacts": attr.list(attr.string(), default = []),
        "cxx_runtime_type": attr.option(attr.enum(CxxRuntimeType), default = None),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "default_platform": attr.option(attr.string(), default = None),
        "defaults": attr.dict(key = attr.string(), value = attr.string(), sorted = False, default = {}),
        "deps": attr.list(attr.dep(), default = []),
        "devirt_enabled": attr.bool(),
        "diagnostics": attr.dict(key = attr.string(), value = attr.source(), sorted = False, default = {}),
        "executable_name": attr.option(attr.string(), default = None),
        "exported_deps": attr.list(attr.dep(), default = []),
        "exported_header_style": attr.enum(IncludeType, default = "local"),
        "exported_headers": attr.named_set(attr.source(), sorted = True, default = []),
        "exported_lang_platform_preprocessor_flags": attr.dict(key = attr.enum(CxxSourceType), value = attr.list(attr.tuple(attr.regex(), attr.list(attr.arg()))), sorted = False, default = {}),
        "exported_lang_preprocessor_flags": attr.dict(key = attr.enum(CxxSourceType), value = attr.list(attr.arg()), sorted = False, default = {}),
        "exported_linker_flags": attr.list(attr.arg(), default = []),
        "exported_platform_deps": attr.list(attr.tuple(attr.regex(), attr.set(attr.dep(), sorted = True)), default = []),
        "exported_platform_headers": attr.list(attr.tuple(attr.regex(), attr.named_set(attr.source(), sorted = True)), default = []),
        "exported_platform_linker_flags": attr.list(attr.tuple(attr.regex(), attr.list(attr.arg())), default = []),
        "exported_platform_preprocessor_flags": attr.list(attr.tuple(attr.regex(), attr.list(attr.arg())), default = []),
        "exported_post_linker_flags": attr.list(attr.arg(), default = []),
        "exported_post_platform_linker_flags": attr.list(attr.tuple(attr.regex(), attr.list(attr.arg())), default = []),
        "exported_preprocessor_flags": attr.list(attr.arg(), default = []),
        "extra_xcode_files": attr.list(attr.source(), default = []),
        "extra_xcode_sources": attr.list(attr.source(), default = []),
        "fat_lto": attr.bool(),
        "focused_list_target": attr.option(attr.dep(), default = None),
        "force_static": attr.option(attr.bool(), default = None),
        "frameworks": attr.list(attr.string(), default = []),
        "header_namespace": attr.option(attr.string(), default = None),
        "headers": attr.named_set(attr.source(), sorted = True, default = []),
        "headers_as_raw_headers_mode": attr.option(attr.enum(HeadersAsRawHeadersMode), default = None),
        "include_directories": attr.set(attr.string(), sorted = True, default = []),
        "include_in_android_merge_map_output": attr.bool(),
        "labels": attr.list(attr.string(), default = []),
        "lang_compiler_flags": attr.dict(key = attr.enum(CxxSourceType), value = attr.list(attr.arg()), sorted = False, default = {}),
        "lang_platform_compiler_flags": attr.dict(key = attr.enum(CxxSourceType), value = attr.list(attr.tuple(attr.regex(), attr.list(attr.arg()))), sorted = False, default = {}),
        "lang_platform_preprocessor_flags": attr.dict(key = attr.enum(CxxSourceType), value = attr.list(attr.tuple(attr.regex(), attr.list(attr.arg()))), sorted = False, default = {}),
        "lang_preprocessor_flags": attr.dict(key = attr.enum(CxxSourceType), value = attr.list(attr.arg()), sorted = False, default = {}),
        "libraries": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "link_group": attr.option(attr.string(), default = None),
        "link_group_map": attr.option(attr.list(attr.tuple(attr.string(), attr.list(attr.tuple(attr.dep(), attr.enum(Traversal), attr.option(attr.string()))))), default = None),
        "link_style": attr.option(attr.enum(LinkableDepType), default = None),
        "link_whole": attr.option(attr.bool(), default = None),
        "linker_extra_outputs": attr.list(attr.string(), default = []),
        "linker_flags": attr.list(attr.arg(), default = []),
        "module_name": attr.option(attr.string(), default = None),
        "platform_compiler_flags": attr.list(attr.tuple(attr.regex(), attr.list(attr.arg())), default = []),
        "platform_deps": attr.list(attr.tuple(attr.regex(), attr.set(attr.dep(), sorted = True)), default = []),
        "platform_headers": attr.list(attr.tuple(attr.regex(), attr.named_set(attr.source(), sorted = True)), default = []),
        "platform_linker_flags": attr.list(attr.tuple(attr.regex(), attr.list(attr.arg())), default = []),
        "platform_preprocessor_flags": attr.list(attr.tuple(attr.regex(), attr.list(attr.arg())), default = []),
        "platform_srcs": attr.list(attr.tuple(attr.regex(), attr.set(attr.one_of(attr.source(), attr.tuple(attr.source(), attr.list(attr.arg()))), sorted = True)), default = []),
        "post_linker_flags": attr.list(attr.arg(), default = []),
        "post_platform_linker_flags": attr.list(attr.tuple(attr.regex(), attr.list(attr.arg())), default = []),
        "precompiled_header": attr.option(attr.source(), default = None),
        "preferred_linkage": attr.option(attr.enum(Linkage), default = None),
        "prefix_header": attr.option(attr.source(), default = None),
        "preprocessor_flags": attr.list(attr.arg(), default = []),
        "public_include_directories": attr.set(attr.string(), sorted = True, default = []),
        "public_system_include_directories": attr.set(attr.string(), sorted = True, default = []),
        "raw_headers": attr.set(attr.source(), sorted = True, default = []),
        "reexport_all_header_dependencies": attr.option(attr.bool(), default = None),
        "resources": attr.named_set(attr.source(), sorted = True, default = []),
        "sdk_modules": attr.list(attr.string(), default = []),
        "soname": attr.option(attr.string(), default = None),
        "srcs": attr.list(attr.one_of(attr.source(), attr.tuple(attr.source(), attr.list(attr.arg()))), default = []),
        "static_library_basename": attr.option(attr.string(), default = None),
        "supported_platforms_regex": attr.option(attr.regex(), default = None),
        "supports_merged_linking": attr.option(attr.bool(), default = None),
        "thin_lto": attr.bool(),
        "use_archive": attr.option(attr.bool(), default = None),
        "uses_cxx_explicit_modules": attr.bool(),
        "uses_explicit_modules": attr.bool(),
        "version_universe": attr.option(attr.string(), default = None),
        "within_view": attr.option(attr.list(attr.string())),
        "xcode_private_headers_symlinks": attr.option(attr.bool(), default = None),
        "xcode_public_headers_symlinks": attr.option(attr.bool(), default = None),
    },
    "cxx_lua_extension": {
        "base_module": attr.option(attr.string(), default = None),
        "compiler_flags": attr.list(attr.arg(), default = []),
        "contacts": attr.list(attr.string(), default = []),
        "cxx_runtime_type": attr.option(attr.enum(CxxRuntimeType), default = None),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "default_platform": attr.option(attr.string(), default = None),
        "defaults": attr.dict(key = attr.string(), value = attr.string(), sorted = False, default = {}),
        "deps": attr.list(attr.dep(), default = []),
        "executable_name": attr.option(attr.string(), default = None),
        "frameworks": attr.list(attr.string(), default = []),
        "header_namespace": attr.option(attr.string(), default = None),
        "headers": attr.named_set(attr.source(), sorted = True, default = []),
        "headers_as_raw_headers_mode": attr.option(attr.enum(HeadersAsRawHeadersMode), default = None),
        "include_directories": attr.set(attr.string(), sorted = True, default = []),
        "labels": attr.list(attr.string(), default = []),
        "lang_compiler_flags": attr.dict(key = attr.enum(CxxSourceType), value = attr.list(attr.arg()), sorted = False, default = {}),
        "lang_platform_compiler_flags": attr.dict(key = attr.enum(CxxSourceType), value = attr.list(attr.tuple(attr.regex(), attr.list(attr.arg()))), sorted = False, default = {}),
        "lang_platform_preprocessor_flags": attr.dict(key = attr.enum(CxxSourceType), value = attr.list(attr.tuple(attr.regex(), attr.list(attr.arg()))), sorted = False, default = {}),
        "lang_preprocessor_flags": attr.dict(key = attr.enum(CxxSourceType), value = attr.list(attr.arg()), sorted = False, default = {}),
        "libraries": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "linker_extra_outputs": attr.list(attr.string(), default = []),
        "linker_flags": attr.list(attr.arg(), default = []),
        "platform_compiler_flags": attr.list(attr.tuple(attr.regex(), attr.list(attr.arg())), default = []),
        "platform_deps": attr.list(attr.tuple(attr.regex(), attr.set(attr.dep(), sorted = True)), default = []),
        "platform_headers": attr.list(attr.tuple(attr.regex(), attr.named_set(attr.source(), sorted = True)), default = []),
        "platform_linker_flags": attr.list(attr.tuple(attr.regex(), attr.list(attr.arg())), default = []),
        "platform_preprocessor_flags": attr.list(attr.tuple(attr.regex(), attr.list(attr.arg())), default = []),
        "platform_srcs": attr.list(attr.tuple(attr.regex(), attr.set(attr.one_of(attr.source(), attr.tuple(attr.source(), attr.list(attr.arg()))), sorted = True)), default = []),
        "post_linker_flags": attr.list(attr.arg(), default = []),
        "post_platform_linker_flags": attr.list(attr.tuple(attr.regex(), attr.list(attr.arg())), default = []),
        "precompiled_header": attr.option(attr.source(), default = None),
        "prefix_header": attr.option(attr.source(), default = None),
        "preprocessor_flags": attr.list(attr.arg(), default = []),
        "raw_headers": attr.set(attr.source(), sorted = True, default = []),
        "srcs": attr.list(attr.one_of(attr.source(), attr.tuple(attr.source(), attr.list(attr.arg()))), default = []),
        "version_universe": attr.option(attr.string(), default = None),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "cxx_precompiled_header": {
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "deps": attr.list(attr.dep(), default = []),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "src": attr.source(),
        "version_universe": attr.option(attr.string(), default = None),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "cxx_python_extension": {
        "base_module": attr.option(attr.string(), default = None),
        "compiler_flags": attr.list(attr.arg(), default = []),
        "contacts": attr.list(attr.string(), default = []),
        "cxx_runtime_type": attr.option(attr.enum(CxxRuntimeType), default = None),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "default_platform": attr.option(attr.string(), default = None),
        "defaults": attr.dict(key = attr.string(), value = attr.string(), sorted = False, default = {}),
        "deps": attr.list(attr.dep(), default = []),
        "executable_name": attr.option(attr.string(), default = None),
        "frameworks": attr.list(attr.string(), default = []),
        "header_namespace": attr.option(attr.string(), default = None),
        "headers": attr.named_set(attr.source(), sorted = True, default = []),
        "headers_as_raw_headers_mode": attr.option(attr.enum(HeadersAsRawHeadersMode), default = None),
        "include_directories": attr.set(attr.string(), sorted = True, default = []),
        "labels": attr.list(attr.string(), default = []),
        "lang_compiler_flags": attr.dict(key = attr.enum(CxxSourceType), value = attr.list(attr.arg()), sorted = False, default = {}),
        "lang_platform_compiler_flags": attr.dict(key = attr.enum(CxxSourceType), value = attr.list(attr.tuple(attr.regex(), attr.list(attr.arg()))), sorted = False, default = {}),
        "lang_platform_preprocessor_flags": attr.dict(key = attr.enum(CxxSourceType), value = attr.list(attr.tuple(attr.regex(), attr.list(attr.arg()))), sorted = False, default = {}),
        "lang_preprocessor_flags": attr.dict(key = attr.enum(CxxSourceType), value = attr.list(attr.arg()), sorted = False, default = {}),
        "libraries": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "link_style": attr.option(attr.enum(LinkableDepType), default = None),
        "linker_extra_outputs": attr.list(attr.string(), default = []),
        "linker_flags": attr.list(attr.arg(), default = []),
        "module_name": attr.option(attr.string(), default = None),
        "platform_compiler_flags": attr.list(attr.tuple(attr.regex(), attr.list(attr.arg())), default = []),
        "platform_deps": attr.list(attr.tuple(attr.regex(), attr.set(attr.dep(), sorted = True)), default = []),
        "platform_headers": attr.list(attr.tuple(attr.regex(), attr.named_set(attr.source(), sorted = True)), default = []),
        "platform_linker_flags": attr.list(attr.tuple(attr.regex(), attr.list(attr.arg())), default = []),
        "platform_preprocessor_flags": attr.list(attr.tuple(attr.regex(), attr.list(attr.arg())), default = []),
        "platform_srcs": attr.list(attr.tuple(attr.regex(), attr.set(attr.one_of(attr.source(), attr.tuple(attr.source(), attr.list(attr.arg()))), sorted = True)), default = []),
        "post_linker_flags": attr.list(attr.arg(), default = []),
        "post_platform_linker_flags": attr.list(attr.tuple(attr.regex(), attr.list(attr.arg())), default = []),
        "precompiled_header": attr.option(attr.source(), default = None),
        "prefix_header": attr.option(attr.source(), default = None),
        "preprocessor_flags": attr.list(attr.arg(), default = []),
        "raw_headers": attr.set(attr.source(), sorted = True, default = []),
        "srcs": attr.list(attr.one_of(attr.source(), attr.tuple(attr.source(), attr.list(attr.arg()))), default = []),
        "type_stub": attr.option(attr.source(), default = None),
        "version_universe": attr.option(attr.string(), default = None),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "cxx_test": {
        "additional_coverage_targets": attr.list(attr.source(), default = []),
        "args": attr.list(attr.arg(), default = []),
        "compiler_flags": attr.list(attr.arg(), default = []),
        "contacts": attr.list(attr.string(), default = []),
        "cxx_runtime_type": attr.option(attr.enum(CxxRuntimeType), default = None),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "default_platform": attr.option(attr.string(), default = None),
        "defaults": attr.dict(key = attr.string(), value = attr.string(), sorted = False, default = {}),
        "deps": attr.list(attr.dep(), default = []),
        "deps_query": attr.option(attr.query(), default = None),
        "devirt_enabled": attr.bool(),
        "env": attr.dict(key = attr.string(), value = attr.arg(), sorted = False, default = {}),
        "executable_name": attr.option(attr.string(), default = None),
        "fat_lto": attr.bool(),
        "focused_list_target": attr.option(attr.dep(), default = None),
        "framework": attr.option(attr.enum(CxxTestType), default = None),
        "frameworks": attr.list(attr.string(), default = []),
        "header_namespace": attr.option(attr.string(), default = None),
        "headers": attr.named_set(attr.source(), sorted = True, default = []),
        "headers_as_raw_headers_mode": attr.option(attr.enum(HeadersAsRawHeadersMode), default = None),
        "include_directories": attr.set(attr.string(), sorted = True, default = []),
        "labels": attr.list(attr.string(), default = []),
        "lang_compiler_flags": attr.dict(key = attr.enum(CxxSourceType), value = attr.list(attr.arg()), sorted = False, default = {}),
        "lang_platform_compiler_flags": attr.dict(key = attr.enum(CxxSourceType), value = attr.list(attr.tuple(attr.regex(), attr.list(attr.arg()))), sorted = False, default = {}),
        "lang_platform_preprocessor_flags": attr.dict(key = attr.enum(CxxSourceType), value = attr.list(attr.tuple(attr.regex(), attr.list(attr.arg()))), sorted = False, default = {}),
        "lang_preprocessor_flags": attr.dict(key = attr.enum(CxxSourceType), value = attr.list(attr.arg()), sorted = False, default = {}),
        "libraries": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "link_deps_query_whole": attr.bool(),
        "link_group": attr.option(attr.string(), default = None),
        "link_group_map": attr.option(attr.list(attr.tuple(attr.string(), attr.list(attr.tuple(attr.dep(), attr.enum(Traversal), attr.option(attr.string()))))), default = None),
        "link_style": attr.option(attr.enum(LinkableDepType), default = None),
        "linker_extra_outputs": attr.list(attr.string(), default = []),
        "linker_flags": attr.list(attr.arg(), default = []),
        "platform_compiler_flags": attr.list(attr.tuple(attr.regex(), attr.list(attr.arg())), default = []),
        "platform_deps": attr.list(attr.tuple(attr.regex(), attr.set(attr.dep(), sorted = True)), default = []),
        "platform_headers": attr.list(attr.tuple(attr.regex(), attr.named_set(attr.source(), sorted = True)), default = []),
        "platform_linker_flags": attr.list(attr.tuple(attr.regex(), attr.list(attr.arg())), default = []),
        "platform_preprocessor_flags": attr.list(attr.tuple(attr.regex(), attr.list(attr.arg())), default = []),
        "platform_srcs": attr.list(attr.tuple(attr.regex(), attr.set(attr.one_of(attr.source(), attr.tuple(attr.source(), attr.list(attr.arg()))), sorted = True)), default = []),
        "post_linker_flags": attr.list(attr.arg(), default = []),
        "post_platform_linker_flags": attr.list(attr.tuple(attr.regex(), attr.list(attr.arg())), default = []),
        "precompiled_header": attr.option(attr.source(), default = None),
        "prefer_stripped_objects": attr.bool(),
        "prefix_header": attr.option(attr.source(), default = None),
        "preprocessor_flags": attr.list(attr.arg(), default = []),
        "raw_headers": attr.set(attr.source(), sorted = True, default = []),
        "resources": attr.named_set(attr.source(), sorted = True, default = []),
        "run_test_separately": attr.option(attr.bool(), default = None),
        "srcs": attr.list(attr.one_of(attr.source(), attr.tuple(attr.source(), attr.list(attr.arg()))), default = []),
        "test_rule_timeout_ms": attr.option(attr.int(), default = None),
        "thin_lto": attr.bool(),
        "use_default_test_main": attr.option(attr.bool(), default = None),
        "version_universe": attr.option(attr.string(), default = None),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "cxx_toolchain": {
        "archive_contents": attr.enum(ArchiveContents, default = "normal"),
        "archiver": attr.source(),
        "archiver_flags": attr.list(attr.arg(), default = []),
        "archiver_type": attr.enum(ArchiverProviderType),
        "asm_compiler": attr.option(attr.source(), default = None),
        "asm_compiler_flags": attr.list(attr.arg(), default = []),
        "asm_compiler_type": attr.option(attr.enum(CxxToolProviderType), default = None),
        "asm_preprocessor": attr.option(attr.source(), default = None),
        "asm_preprocessor_flags": attr.list(attr.arg(), default = []),
        "asm_preprocessor_type": attr.option(attr.enum(CxxToolProviderType), default = None),
        "assembler": attr.source(),
        "assembler_flags": attr.list(attr.arg(), default = []),
        "assembler_preprocessor": attr.option(attr.source(), default = None),
        "assembler_preprocessor_flags": attr.list(attr.arg(), default = []),
        "assembler_preprocessor_type": attr.option(attr.enum(CxxToolProviderType), default = None),
        "assembler_type": attr.option(attr.enum(CxxToolProviderType), default = None),
        "binary_extension": attr.option(attr.string(), default = None),
        "c_compiler": attr.source(),
        "c_compiler_flags": attr.list(attr.arg(), default = []),
        "c_compiler_type": attr.option(attr.enum(CxxToolProviderType), default = None),
        "c_preprocessor_flags": attr.list(attr.arg(), default = []),
        "cache_links": attr.bool(),
        "compiler_type": attr.option(attr.enum(CxxToolProviderType), default = None),
        "conflicting_header_basename_exemptions": attr.set(attr.string(), sorted = True, default = []),
        "contacts": attr.list(attr.string(), default = []),
        "cuda_compiler": attr.option(attr.source(), default = None),
        "cuda_compiler_flags": attr.list(attr.arg(), default = []),
        "cuda_compiler_type": attr.option(attr.enum(CxxToolProviderType), default = None),
        "cuda_preprocessor_flags": attr.list(attr.arg(), default = []),
        "cxx_compiler": attr.source(),
        "cxx_compiler_flags": attr.list(attr.arg(), default = []),
        "cxx_compiler_type": attr.option(attr.enum(CxxToolProviderType), default = None),
        "cxx_preprocessor_flags": attr.list(attr.arg(), default = []),
        "debug_path_prefix_map_sanitizer_format": attr.option(attr.string(), default = None),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "detailed_untracked_header_messages": attr.bool(),
        "filepath_length_limited": attr.bool(),
        "headers_as_raw_headers_mode": attr.option(attr.enum(HeadersAsRawHeadersMode), default = None),
        "headers_whitelist": attr.list(attr.string(), default = []),
        "hip_compiler": attr.option(attr.source(), default = None),
        "hip_compiler_flags": attr.list(attr.arg(), default = []),
        "hip_compiler_type": attr.option(attr.enum(CxxToolProviderType), default = None),
        "hip_preprocessor_flags": attr.list(attr.arg(), default = []),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "link_path_normalization_args_enabled": attr.bool(),
        "linker": attr.source(),
        "linker_flags": attr.list(attr.arg(), default = []),
        "linker_type": attr.enum(LinkerProviderType),
        "nm": attr.source(),
        "objcopy_for_shared_library_interface": attr.source(),
        "objcopy_recalculates_layout": attr.bool(),
        "object_file_extension": attr.string(default = ""),
        "pic_type_for_shared_linking": attr.enum(PicType, default = "pic"),
        "private_headers_symlinks_enabled": attr.bool(),
        "public_headers_symlinks_enabled": attr.bool(),
        "ranlib": attr.option(attr.source(), default = None),
        "ranlib_flags": attr.list(attr.arg(), default = []),
        "requires_archives": attr.bool(),
        "shared_dep_runtime_ld_flags": attr.list(attr.arg(), default = []),
        "shared_library_extension": attr.string(default = ""),
        "shared_library_interface_flags": attr.list(attr.string(), default = []),
        "shared_library_interface_type": attr.enum(SharedLibraryInterfaceParamsType),
        "shared_library_versioned_extension_format": attr.string(default = ""),
        "static_dep_runtime_ld_flags": attr.list(attr.arg(), default = []),
        "static_library_extension": attr.string(default = ""),
        "static_pic_dep_runtime_ld_flags": attr.list(attr.arg(), default = []),
        "strip": attr.source(),
        "strip_all_flags": attr.option(attr.list(attr.arg()), default = None),
        "strip_debug_flags": attr.option(attr.list(attr.arg()), default = None),
        "strip_non_global_flags": attr.option(attr.list(attr.arg()), default = None),
        "use_arg_file": attr.bool(),
        "use_header_map": attr.bool(),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "d_binary": {
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "deps": attr.list(attr.dep(), default = []),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "linker_flags": attr.list(attr.string(), default = []),
        "srcs": attr.named_set(attr.source(), sorted = True, default = []),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "d_library": {
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "deps": attr.list(attr.dep(), default = []),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "linker_flags": attr.list(attr.string(), default = []),
        "srcs": attr.named_set(attr.source(), sorted = True, default = []),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "d_test": {
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "deps": attr.list(attr.dep(), default = []),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "linker_flags": attr.list(attr.string(), default = []),
        "srcs": attr.named_set(attr.source(), sorted = True, default = []),
        "test_rule_timeout_ms": attr.option(attr.int(), default = None),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "export_file": {
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "mode": attr.option(attr.enum(ExportFileDescriptionMode), default = None),
        "out": attr.option(attr.string(), default = None),
        "src": attr.option(attr.source(), default = None),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "external_test_runner": {
        "binary": attr.dep(),
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "filegroup": {
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "srcs": attr.option(attr.named_set(attr.source(), sorted = False), default = None),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "gen_aidl": {
        "aidl": attr.source(),
        "aidl_srcs": attr.set(attr.source(), sorted = True, default = []),
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "deps": attr.list(attr.dep(), default = []),
        "import_path": attr.string(default = ""),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "genrule": {
        "bash": attr.option(attr.arg(), default = None),
        "cacheable": attr.option(attr.bool(), default = None),
        "cmd": attr.option(attr.arg(), default = None),
        "cmd_exe": attr.option(attr.arg(), default = None),
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "default_outs": attr.option(attr.set(attr.string(), sorted = False), default = None),
        "enable_sandbox": attr.option(attr.bool(), default = None),
        "environment_expansion_separator": attr.option(attr.string(), default = None),
        "executable": attr.option(attr.bool(), default = None),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "need_android_tools": attr.bool(default = False),
        "out": attr.option(attr.string(), default = None),
        "outs": attr.option(attr.dict(key = attr.string(), value = attr.set(attr.string(), sorted = False), sorted = False), default = None),
        "remote": attr.option(attr.bool(), default = None),
        "srcs": attr.named_set(attr.source(), sorted = False, default = []),
        "type": attr.option(attr.string(), default = None),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "go_binary": {
        "assembler_flags": attr.list(attr.string(), default = []),
        "compiler_flags": attr.list(attr.string(), default = []),
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "deps": attr.list(attr.dep(), default = []),
        "external_linker_flags": attr.list(attr.arg(), default = []),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "link_mode": attr.option(attr.enum(LinkMode), default = None),
        "link_style": attr.option(attr.enum(LinkableDepType), default = None),
        "linker_flags": attr.list(attr.arg(), default = []),
        "platform": attr.option(attr.string(), default = None),
        "platform_external_linker_flags": attr.list(attr.tuple(attr.regex(), attr.list(attr.arg())), default = []),
        "resources": attr.list(attr.source(), default = []),
        "srcs": attr.list(attr.source(), default = []),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "go_exported_library": {
        "assembler_flags": attr.list(attr.string(), default = []),
        "build_mode": attr.enum(BuildMode),
        "compiler_flags": attr.list(attr.string(), default = []),
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "deps": attr.list(attr.dep(), default = []),
        "external_linker_flags": attr.list(attr.arg(), default = []),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "link_mode": attr.option(attr.enum(LinkMode), default = None),
        "link_style": attr.option(attr.enum(LinkableDepType), default = None),
        "linker_flags": attr.list(attr.arg(), default = []),
        "platform": attr.option(attr.string(), default = None),
        "platform_external_linker_flags": attr.list(attr.tuple(attr.regex(), attr.list(attr.arg())), default = []),
        "resources": attr.list(attr.source(), default = []),
        "srcs": attr.list(attr.source(), default = []),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "go_library": {
        "assembler_flags": attr.list(attr.string(), default = []),
        "compiler_flags": attr.list(attr.string(), default = []),
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "deps": attr.list(attr.dep(), default = []),
        "exported_deps": attr.list(attr.dep(), default = []),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "package_name": attr.option(attr.string(), default = None),
        "srcs": attr.list(attr.source(), default = []),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "go_test": {
        "assembler_flags": attr.list(attr.string(), default = []),
        "compiler_flags": attr.list(attr.string(), default = []),
        "contacts": attr.list(attr.string(), default = []),
        "coverage_mode": attr.option(attr.enum(GoTestCoverStepMode), default = None),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "deps": attr.list(attr.dep(), default = []),
        "env": attr.dict(key = attr.string(), value = attr.arg(), sorted = False, default = {}),
        "external_linker_flags": attr.list(attr.arg(), default = []),
        "labels": attr.list(attr.string(), default = []),
        "library": attr.option(attr.dep(), default = None),
        "licenses": attr.list(attr.source(), default = []),
        "link_mode": attr.option(attr.enum(LinkMode), default = None),
        "link_style": attr.option(attr.enum(LinkableDepType), default = None),
        "linker_flags": attr.list(attr.arg(), default = []),
        "package_name": attr.option(attr.string(), default = None),
        "platform": attr.option(attr.string(), default = None),
        "resources": attr.list(attr.source(), default = []),
        "run_test_separately": attr.bool(),
        "runner": attr.option(attr.dep(), default = None),
        "specs": attr.option(attr.arg(json = True), default = None),
        "srcs": attr.list(attr.source(), default = []),
        "test_rule_timeout_ms": attr.option(attr.int(), default = None),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "go_test_runner": {
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "test_runner_generator": attr.source(),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "groovy_library": {
        "annotation_processor_deps": attr.list(attr.dep(), default = []),
        "annotation_processor_params": attr.list(attr.string(), default = []),
        "annotation_processors": attr.list(attr.string(), default = []),
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "deps": attr.list(attr.dep(), default = []),
        "exported_deps": attr.list(attr.dep(), default = []),
        "exported_provided_deps": attr.list(attr.dep(), default = []),
        "extra_arguments": attr.list(attr.string(), default = []),
        "extra_groovyc_arguments": attr.list(attr.string(), default = []),
        "java_version": attr.option(attr.string(), default = None),
        "javac": attr.option(attr.source(), default = None),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "manifest_file": attr.option(attr.source(), default = None),
        "maven_coords": attr.option(attr.string(), default = None),
        "never_mark_as_unused_dependency": attr.option(attr.bool(), default = None),
        "on_unused_dependencies": attr.option(attr.enum(UnusedDependenciesAction), default = None),
        "plugins": attr.list(attr.dep(), default = []),
        "proguard_config": attr.option(attr.source(), default = None),
        "provided_deps": attr.list(attr.dep(), default = []),
        "remove_classes": attr.list(attr.regex(), default = []),
        "required_for_source_only_abi": attr.bool(),
        "resources": attr.list(attr.source(), default = []),
        "resources_root": attr.option(attr.source(), default = None),
        "runtime_deps": attr.list(attr.dep(), default = []),
        "source": attr.option(attr.string(), default = None),
        "source_abi_verification_mode": attr.option(attr.enum(SourceAbiVerificationMode), default = None),
        "source_only_abi_deps": attr.list(attr.dep(), default = []),
        "srcs": attr.list(attr.source(), default = []),
        "target": attr.option(attr.string(), default = None),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "groovy_test": {
        "annotation_processor_deps": attr.list(attr.dep(), default = []),
        "annotation_processor_params": attr.list(attr.string(), default = []),
        "annotation_processors": attr.list(attr.string(), default = []),
        "contacts": attr.list(attr.string(), default = []),
        "cxx_library_whitelist": attr.list(attr.dep(), default = []),
        "default_cxx_platform": attr.option(attr.string(), default = None),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "deps": attr.list(attr.dep(), default = []),
        "deps_query": attr.option(attr.query(), default = None),
        "env": attr.dict(key = attr.string(), value = attr.arg(), sorted = False, default = {}),
        "exported_deps": attr.list(attr.dep(), default = []),
        "exported_provided_deps": attr.list(attr.dep(), default = []),
        "extra_arguments": attr.list(attr.string(), default = []),
        "extra_groovyc_arguments": attr.list(attr.string(), default = []),
        "fork_mode": attr.enum(ForkMode, default = "none"),
        "java_version": attr.option(attr.string(), default = None),
        "javac": attr.option(attr.source(), default = None),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "manifest_file": attr.option(attr.source(), default = None),
        "maven_coords": attr.option(attr.string(), default = None),
        "never_mark_as_unused_dependency": attr.option(attr.bool(), default = None),
        "on_unused_dependencies": attr.option(attr.enum(UnusedDependenciesAction), default = None),
        "plugins": attr.list(attr.dep(), default = []),
        "proguard_config": attr.option(attr.source(), default = None),
        "provided_deps": attr.list(attr.dep(), default = []),
        "remove_classes": attr.list(attr.regex(), default = []),
        "required_for_source_only_abi": attr.bool(),
        "resources": attr.list(attr.source(), default = []),
        "resources_root": attr.option(attr.source(), default = None),
        "run_test_separately": attr.bool(),
        "runtime_deps": attr.list(attr.dep(), default = []),
        "source": attr.option(attr.string(), default = None),
        "source_abi_verification_mode": attr.option(attr.enum(SourceAbiVerificationMode), default = None),
        "source_only_abi_deps": attr.list(attr.dep(), default = []),
        "srcs": attr.list(attr.source(), default = []),
        "std_err_log_level": attr.option(attr.one_of(attr.enum(LogLevel), attr.int()), default = None),
        "std_out_log_level": attr.option(attr.one_of(attr.enum(LogLevel), attr.int()), default = None),
        "target": attr.option(attr.string(), default = None),
        "test_case_timeout_ms": attr.option(attr.int(), default = None),
        "test_rule_timeout_ms": attr.option(attr.int(), default = None),
        "test_type": attr.option(attr.enum(TestType), default = None),
        "use_cxx_libraries": attr.option(attr.bool(), default = None),
        "use_dependency_order_classpath": attr.option(attr.bool(), default = None),
        "vm_args": attr.list(attr.arg(), default = []),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "gwt_binary": {
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "deps": attr.list(attr.dep(), default = []),
        "draft_compile": attr.option(attr.bool(), default = None),
        "experimental_args": attr.list(attr.string(), default = []),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "local_workers": attr.option(attr.int(), default = None),
        "module_deps": attr.list(attr.dep(), default = []),
        "modules": attr.list(attr.string(), default = []),
        "optimize": attr.option(attr.int(), default = None),
        "strict": attr.option(attr.bool(), default = None),
        "style": attr.option(attr.enum(Style), default = None),
        "vm_args": attr.list(attr.string(), default = []),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "halide_library": {
        "compiler_deps": attr.list(attr.dep(), default = []),
        "compiler_flags": attr.list(attr.arg(), default = []),
        "compiler_invocation_flags": attr.list(attr.string(), default = []),
        "configs": attr.dict(key = attr.string(), value = attr.dict(key = attr.string(), value = attr.string(), sorted = False), sorted = False, default = {}),
        "contacts": attr.list(attr.string(), default = []),
        "cxx_runtime_type": attr.option(attr.enum(CxxRuntimeType), default = None),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "default_platform": attr.option(attr.string(), default = None),
        "defaults": attr.dict(key = attr.string(), value = attr.string(), sorted = False, default = {}),
        "deps": attr.list(attr.dep(), default = []),
        "deps_query": attr.option(attr.query(), default = None),
        "devirt_enabled": attr.bool(),
        "executable_name": attr.option(attr.string(), default = None),
        "fat_lto": attr.bool(),
        "focused_list_target": attr.option(attr.dep(), default = None),
        "frameworks": attr.list(attr.string(), default = []),
        "function_name": attr.option(attr.string(), default = None),
        "header_namespace": attr.option(attr.string(), default = None),
        "headers": attr.named_set(attr.source(), sorted = True, default = []),
        "headers_as_raw_headers_mode": attr.option(attr.enum(HeadersAsRawHeadersMode), default = None),
        "include_directories": attr.set(attr.string(), sorted = True, default = []),
        "labels": attr.list(attr.string(), default = []),
        "lang_compiler_flags": attr.dict(key = attr.enum(CxxSourceType), value = attr.list(attr.arg()), sorted = False, default = {}),
        "lang_platform_compiler_flags": attr.dict(key = attr.enum(CxxSourceType), value = attr.list(attr.tuple(attr.regex(), attr.list(attr.arg()))), sorted = False, default = {}),
        "lang_platform_preprocessor_flags": attr.dict(key = attr.enum(CxxSourceType), value = attr.list(attr.tuple(attr.regex(), attr.list(attr.arg()))), sorted = False, default = {}),
        "lang_preprocessor_flags": attr.dict(key = attr.enum(CxxSourceType), value = attr.list(attr.arg()), sorted = False, default = {}),
        "libraries": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "link_deps_query_whole": attr.bool(),
        "link_group": attr.option(attr.string(), default = None),
        "link_group_map": attr.option(attr.list(attr.tuple(attr.string(), attr.list(attr.tuple(attr.dep(), attr.enum(Traversal), attr.option(attr.string()))))), default = None),
        "link_style": attr.option(attr.enum(LinkableDepType), default = None),
        "linker_extra_outputs": attr.list(attr.string(), default = []),
        "linker_flags": attr.list(attr.arg(), default = []),
        "platform_compiler_flags": attr.list(attr.tuple(attr.regex(), attr.list(attr.arg())), default = []),
        "platform_deps": attr.list(attr.tuple(attr.regex(), attr.set(attr.dep(), sorted = True)), default = []),
        "platform_headers": attr.list(attr.tuple(attr.regex(), attr.named_set(attr.source(), sorted = True)), default = []),
        "platform_linker_flags": attr.list(attr.tuple(attr.regex(), attr.list(attr.arg())), default = []),
        "platform_preprocessor_flags": attr.list(attr.tuple(attr.regex(), attr.list(attr.arg())), default = []),
        "platform_srcs": attr.list(attr.tuple(attr.regex(), attr.set(attr.one_of(attr.source(), attr.tuple(attr.source(), attr.list(attr.arg()))), sorted = True)), default = []),
        "post_linker_flags": attr.list(attr.arg(), default = []),
        "post_platform_linker_flags": attr.list(attr.tuple(attr.regex(), attr.list(attr.arg())), default = []),
        "precompiled_header": attr.option(attr.source(), default = None),
        "prefer_stripped_objects": attr.bool(),
        "prefix_header": attr.option(attr.source(), default = None),
        "preprocessor_flags": attr.list(attr.arg(), default = []),
        "raw_headers": attr.set(attr.source(), sorted = True, default = []),
        "srcs": attr.list(attr.one_of(attr.source(), attr.tuple(attr.source(), attr.list(attr.arg()))), default = []),
        "supported_platforms_regex": attr.option(attr.regex(), default = None),
        "thin_lto": attr.bool(),
        "version_universe": attr.option(attr.string(), default = None),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "haskell_binary": {
        "compiler_flags": attr.list(attr.string(), default = []),
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "deps": attr.list(attr.dep(), default = []),
        "deps_query": attr.option(attr.query(), default = None),
        "enable_profiling": attr.bool(),
        "ghci_platform_preload_deps": attr.list(attr.tuple(attr.regex(), attr.set(attr.dep(), sorted = True)), default = []),
        "ghci_preload_deps": attr.set(attr.dep(), sorted = True, default = []),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "link_deps_query_whole": attr.bool(),
        "link_style": attr.option(attr.enum(LinkableDepType), default = None),
        "linker_flags": attr.list(attr.arg(), default = []),
        "main": attr.option(attr.string(), default = None),
        "platform": attr.option(attr.string(), default = None),
        "platform_deps": attr.list(attr.tuple(attr.regex(), attr.set(attr.dep(), sorted = True)), default = []),
        "platform_linker_flags": attr.list(attr.tuple(attr.regex(), attr.list(attr.arg())), default = []),
        "srcs": attr.named_set(attr.source(), sorted = True, default = []),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "haskell_ghci": {
        "compiler_flags": attr.list(attr.string(), default = []),
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "deps": attr.list(attr.dep(), default = []),
        "deps_query": attr.option(attr.query(), default = None),
        "enable_profiling": attr.bool(),
        "extra_script_templates": attr.list(attr.source(), default = []),
        "ghci_bin_dep": attr.option(attr.dep(), default = None),
        "ghci_init": attr.option(attr.source(), default = None),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "linker_flags": attr.list(attr.arg(), default = []),
        "platform": attr.option(attr.string(), default = None),
        "platform_deps": attr.list(attr.tuple(attr.regex(), attr.set(attr.dep(), sorted = True)), default = []),
        "platform_preload_deps": attr.list(attr.tuple(attr.regex(), attr.set(attr.dep(), sorted = True)), default = []),
        "preload_deps": attr.set(attr.dep(), sorted = True, default = []),
        "srcs": attr.named_set(attr.source(), sorted = True, default = []),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "haskell_haddock": {
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "deps": attr.list(attr.dep(), default = []),
        "deps_query": attr.option(attr.query(), default = None),
        "haddock_flags": attr.list(attr.string(), default = []),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "platform": attr.option(attr.string(), default = None),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "haskell_ide": {
        "compiler_flags": attr.list(attr.string(), default = []),
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "deps": attr.list(attr.dep(), default = []),
        "deps_query": attr.option(attr.query(), default = None),
        "extra_script_templates": attr.list(attr.source(), default = []),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "link_style": attr.enum(LinkableDepType),
        "linker_flags": attr.list(attr.arg(), default = []),
        "platform": attr.option(attr.string(), default = None),
        "platform_deps": attr.list(attr.tuple(attr.regex(), attr.set(attr.dep(), sorted = True)), default = []),
        "srcs": attr.named_set(attr.source(), sorted = True, default = []),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "haskell_library": {
        "compiler_flags": attr.list(attr.string(), default = []),
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "deps": attr.list(attr.dep(), default = []),
        "enable_profiling": attr.bool(),
        "ghci_platform_preload_deps": attr.list(attr.tuple(attr.regex(), attr.set(attr.dep(), sorted = True)), default = []),
        "ghci_preload_deps": attr.set(attr.dep(), sorted = True, default = []),
        "haddock_flags": attr.list(attr.string(), default = []),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "link_whole": attr.bool(),
        "linker_flags": attr.list(attr.arg(), default = []),
        "platform": attr.option(attr.string(), default = None),
        "platform_deps": attr.list(attr.tuple(attr.regex(), attr.set(attr.dep(), sorted = True)), default = []),
        "platform_linker_flags": attr.list(attr.tuple(attr.regex(), attr.list(attr.arg())), default = []),
        "preferred_linkage": attr.enum(Linkage),
        "srcs": attr.named_set(attr.source(), sorted = True, default = []),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "haskell_prebuilt_library": {
        "contacts": attr.list(attr.string(), default = []),
        "cxx_header_dirs": attr.list(attr.source(), default = []),
        "db": attr.source(),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "deps": attr.list(attr.dep(), default = []),
        "enable_profiling": attr.bool(),
        "exported_compiler_flags": attr.list(attr.string(), default = []),
        "exported_linker_flags": attr.list(attr.string(), default = []),
        "id": attr.string(default = ""),
        "import_dirs": attr.list(attr.source(), default = []),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "pic_profiled_static_libs": attr.list(attr.source(), default = []),
        "pic_static_libs": attr.list(attr.source(), default = []),
        "profiled_static_libs": attr.list(attr.source(), default = []),
        "shared_libs": attr.dict(key = attr.string(), value = attr.source(), sorted = False, default = {}),
        "static_libs": attr.list(attr.source(), default = []),
        "version": attr.string(default = ""),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "http_archive": {
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "excludes": attr.list(attr.regex(), default = []),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "out": attr.option(attr.string(), default = None),
        "sha1": attr.option(attr.string(), default = None),
        "sha256": attr.string(default = ""),
        "strip_prefix": attr.option(attr.string(), default = None),
        "type": attr.option(attr.string(), default = None),
        "urls": attr.list(attr.string(validate = _uri), default = []),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "http_file": {
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "executable": attr.option(attr.bool(), default = None),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "out": attr.option(attr.string(), default = None),
        "sha1": attr.option(attr.string(), default = None),
        "sha256": attr.string(default = ""),
        "urls": attr.list(attr.string(validate = _uri), default = []),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "jar_genrule": {
        "bash": attr.option(attr.arg(), default = None),
        "cacheable": attr.option(attr.bool(), default = None),
        "cmd": attr.option(attr.arg(), default = None),
        "cmd_exe": attr.option(attr.arg(), default = None),
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "enable_sandbox": attr.option(attr.bool(), default = None),
        "environment_expansion_separator": attr.option(attr.string(), default = None),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "need_android_tools": attr.bool(default = False),
        "remote": attr.option(attr.bool(), default = None),
        "srcs": attr.named_set(attr.source(), sorted = False, default = []),
        "type": attr.option(attr.string(), default = None),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "java_annotation_processor": {
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "deps": attr.list(attr.dep(), default = []),
        "does_not_affect_abi": attr.bool(),
        "isolate_class_loader": attr.bool(),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "processor_class": attr.string(default = ""),
        "supports_abi_generation_from_source": attr.bool(),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "java_binary": {
        "blacklist": attr.list(attr.regex(), default = []),
        "contacts": attr.list(attr.string(), default = []),
        "default_cxx_platform": attr.option(attr.string(), default = None),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "deps": attr.list(attr.dep(), default = []),
        "generate_wrapper": attr.bool(),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "main_class": attr.option(attr.string(), default = None),
        "manifest_file": attr.option(attr.source(), default = None),
        "meta_inf_directory": attr.option(attr.source(), default = None),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "java_library": {
        "abi_generation_mode": attr.option(attr.enum(AbiGenerationMode), default = None),
        "annotation_processor_deps": attr.list(attr.dep(), default = []),
        "annotation_processor_params": attr.list(attr.string(), default = []),
        "annotation_processors": attr.list(attr.string(), default = []),
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "deps": attr.list(attr.dep(), default = []),
        "exported_deps": attr.list(attr.dep(), default = []),
        "exported_provided_deps": attr.list(attr.dep(), default = []),
        "extra_arguments": attr.list(attr.string(), default = []),
        "java_version": attr.option(attr.string(), default = None),
        "javac": attr.option(attr.source(), default = None),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "manifest_file": attr.option(attr.source(), default = None),
        "maven_coords": attr.option(attr.string(), default = None),
        "never_mark_as_unused_dependency": attr.option(attr.bool(), default = None),
        "on_unused_dependencies": attr.option(attr.enum(UnusedDependenciesAction), default = None),
        "plugins": attr.list(attr.dep(), default = []),
        "proguard_config": attr.option(attr.source(), default = None),
        "provided_deps": attr.list(attr.dep(), default = []),
        "remove_classes": attr.list(attr.regex(), default = []),
        "required_for_source_only_abi": attr.bool(),
        "resources": attr.list(attr.source(), default = []),
        "resources_root": attr.option(attr.source(), default = None),
        "runtime_deps": attr.list(attr.dep(), default = []),
        "source": attr.option(attr.string(), default = None),
        "source_abi_verification_mode": attr.option(attr.enum(SourceAbiVerificationMode), default = None),
        "source_only_abi_deps": attr.list(attr.dep(), default = []),
        "srcs": attr.list(attr.source(), default = []),
        "target": attr.option(attr.string(), default = None),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "java_plugin": {
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "deps": attr.list(attr.dep(), default = []),
        "does_not_affect_abi": attr.bool(),
        "isolate_class_loader": attr.bool(),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "plugin_name": attr.string(default = ""),
        "supports_abi_generation_from_source": attr.bool(),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "java_test": {
        "abi_generation_mode": attr.option(attr.enum(AbiGenerationMode), default = None),
        "annotation_processor_deps": attr.list(attr.dep(), default = []),
        "annotation_processor_params": attr.list(attr.string(), default = []),
        "annotation_processors": attr.list(attr.string(), default = []),
        "contacts": attr.list(attr.string(), default = []),
        "cxx_library_whitelist": attr.list(attr.dep(), default = []),
        "default_cxx_platform": attr.option(attr.string(), default = None),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "deps": attr.list(attr.dep(), default = []),
        "deps_query": attr.option(attr.query(), default = None),
        "env": attr.dict(key = attr.string(), value = attr.arg(), sorted = False, default = {}),
        "exported_deps": attr.list(attr.dep(), default = []),
        "exported_provided_deps": attr.list(attr.dep(), default = []),
        "extra_arguments": attr.list(attr.string(), default = []),
        "fork_mode": attr.enum(ForkMode, default = "none"),
        "java_version": attr.option(attr.string(), default = None),
        "javac": attr.option(attr.source(), default = None),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "manifest_file": attr.option(attr.source(), default = None),
        "maven_coords": attr.option(attr.string(), default = None),
        "never_mark_as_unused_dependency": attr.option(attr.bool(), default = None),
        "on_unused_dependencies": attr.option(attr.enum(UnusedDependenciesAction), default = None),
        "plugins": attr.list(attr.dep(), default = []),
        "proguard_config": attr.option(attr.source(), default = None),
        "provided_deps": attr.list(attr.dep(), default = []),
        "remove_classes": attr.list(attr.regex(), default = []),
        "required_for_source_only_abi": attr.bool(),
        "resources": attr.list(attr.source(), default = []),
        "resources_root": attr.option(attr.source(), default = None),
        "run_test_separately": attr.bool(),
        "runner": attr.option(attr.dep(), default = None),
        "runtime_deps": attr.list(attr.dep(), default = []),
        "source": attr.option(attr.string(), default = None),
        "source_abi_verification_mode": attr.option(attr.enum(SourceAbiVerificationMode), default = None),
        "source_only_abi_deps": attr.list(attr.dep(), default = []),
        "specs": attr.option(attr.arg(json = True), default = None),
        "srcs": attr.list(attr.source(), default = []),
        "std_err_log_level": attr.option(attr.one_of(attr.enum(LogLevel), attr.int()), default = None),
        "std_out_log_level": attr.option(attr.one_of(attr.enum(LogLevel), attr.int()), default = None),
        "target": attr.option(attr.string(), default = None),
        "test_case_timeout_ms": attr.option(attr.int(), default = None),
        "test_rule_timeout_ms": attr.option(attr.int(), default = None),
        "test_type": attr.option(attr.enum(TestType), default = None),
        "use_cxx_libraries": attr.option(attr.bool(), default = None),
        "use_dependency_order_classpath": attr.option(attr.bool(), default = None),
        "vm_args": attr.list(attr.arg(), default = []),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "java_test_runner": {
        "abi_generation_mode": attr.option(attr.enum(AbiGenerationMode), default = None),
        "annotation_processor_deps": attr.list(attr.dep(), default = []),
        "annotation_processor_params": attr.list(attr.string(), default = []),
        "annotation_processors": attr.list(attr.string(), default = []),
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "deps": attr.list(attr.dep(), default = []),
        "exported_deps": attr.list(attr.dep(), default = []),
        "exported_provided_deps": attr.list(attr.dep(), default = []),
        "extra_arguments": attr.list(attr.string(), default = []),
        "java_version": attr.option(attr.string(), default = None),
        "javac": attr.option(attr.source(), default = None),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "main_class": attr.string(default = ""),
        "manifest_file": attr.option(attr.source(), default = None),
        "maven_coords": attr.option(attr.string(), default = None),
        "never_mark_as_unused_dependency": attr.option(attr.bool(), default = None),
        "on_unused_dependencies": attr.option(attr.enum(UnusedDependenciesAction), default = None),
        "plugins": attr.list(attr.dep(), default = []),
        "proguard_config": attr.option(attr.source(), default = None),
        "provided_deps": attr.list(attr.dep(), default = []),
        "remove_classes": attr.list(attr.regex(), default = []),
        "required_for_source_only_abi": attr.bool(),
        "resources": attr.list(attr.source(), default = []),
        "resources_root": attr.option(attr.source(), default = None),
        "runtime_deps": attr.list(attr.dep(), default = []),
        "source": attr.option(attr.string(), default = None),
        "source_abi_verification_mode": attr.option(attr.enum(SourceAbiVerificationMode), default = None),
        "source_only_abi_deps": attr.list(attr.dep(), default = []),
        "srcs": attr.list(attr.source(), default = []),
        "target": attr.option(attr.string(), default = None),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "js_bundle": {
        "android_package": attr.option(attr.string(), default = None),
        "bundle_name": attr.option(attr.string(), default = None),
        "bundle_name_for_flavor": attr.list(attr.tuple(attr.string(), attr.string()), default = []),
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "deps": attr.list(attr.dep(), default = []),
        "entry": attr.one_of(attr.set(attr.string(), sorted = False), attr.string()),
        "extra_json": attr.option(attr.arg(), default = None),
        "fallback_transform_profile": attr.option(attr.string(), default = None),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "within_view": attr.option(attr.list(attr.string())),
        "worker": attr.dep(),
    },
    "js_bundle_genrule": {
        "bash": attr.option(attr.arg(), default = None),
        "bundle_name": attr.option(attr.string(), default = None),
        "bundle_name_for_flavor": attr.list(attr.tuple(attr.string(), attr.string()), default = []),
        "cacheable": attr.option(attr.bool(), default = None),
        "cmd": attr.option(attr.arg(), default = None),
        "cmd_exe": attr.option(attr.arg(), default = None),
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "enable_sandbox": attr.option(attr.bool(), default = None),
        "environment_expansion_separator": attr.option(attr.string(), default = None),
        "js_bundle": attr.dep(),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "need_android_tools": attr.bool(default = False),
        "remote": attr.option(attr.bool(), default = None),
        "rewrite_deps_file": attr.bool(),
        "rewrite_misc": attr.bool(),
        "rewrite_sourcemap": attr.bool(),
        "skip_resources": attr.bool(),
        "srcs": attr.named_set(attr.source(), sorted = False, default = []),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "js_library": {
        "asset_extensions": attr.option(attr.set(attr.string(), sorted = False), default = None),
        "asset_platforms": attr.option(attr.set(attr.string(), sorted = False), default = None),
        "base_path": attr.option(attr.string(), default = None),
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "deps": attr.list(attr.dep(), default = []),
        "deps_query": attr.option(attr.query(), default = None),
        "extra_json": attr.option(attr.arg(), default = None),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "srcs": attr.list(attr.one_of(attr.source(), attr.tuple(attr.source(), attr.string())), default = []),
        "within_view": attr.option(attr.list(attr.string())),
        "worker": attr.dep(),
    },
    "keystore": {
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "deps": attr.list(attr.dep(), default = []),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "properties": attr.source(),
        "store": attr.source(),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "kotlin_library": {
        "abi_generation_mode": attr.option(attr.enum(AbiGenerationMode), default = None),
        "annotation_processing_tool": attr.option(attr.enum(AnnotationProcessingTool), default = None),
        "annotation_processor_deps": attr.list(attr.dep(), default = []),
        "annotation_processor_params": attr.list(attr.string(), default = []),
        "annotation_processors": attr.list(attr.string(), default = []),
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "deps": attr.list(attr.dep(), default = []),
        "exported_deps": attr.list(attr.dep(), default = []),
        "exported_provided_deps": attr.list(attr.dep(), default = []),
        "extra_arguments": attr.list(attr.string(), default = []),
        "extra_kotlinc_arguments": attr.list(attr.string(), default = []),
        "friend_paths": attr.list(attr.dep(), default = []),
        "java_version": attr.option(attr.string(), default = None),
        "javac": attr.option(attr.source(), default = None),
        "kotlin_compiler_plugins": attr.dict(key = attr.source(), value = attr.dict(key = attr.string(), value = attr.string(), sorted = False), sorted = False, default = {}),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "manifest_file": attr.option(attr.source(), default = None),
        "maven_coords": attr.option(attr.string(), default = None),
        "never_mark_as_unused_dependency": attr.option(attr.bool(), default = None),
        "on_unused_dependencies": attr.option(attr.enum(UnusedDependenciesAction), default = None),
        "plugins": attr.list(attr.dep(), default = []),
        "proguard_config": attr.option(attr.source(), default = None),
        "provided_deps": attr.list(attr.dep(), default = []),
        "remove_classes": attr.list(attr.regex(), default = []),
        "required_for_source_only_abi": attr.bool(),
        "resources": attr.list(attr.source(), default = []),
        "resources_root": attr.option(attr.source(), default = None),
        "runtime_deps": attr.list(attr.dep(), default = []),
        "source": attr.option(attr.string(), default = None),
        "source_abi_verification_mode": attr.option(attr.enum(SourceAbiVerificationMode), default = None),
        "source_only_abi_deps": attr.list(attr.dep(), default = []),
        "srcs": attr.list(attr.source(), default = []),
        "target": attr.option(attr.string(), default = None),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "kotlin_test": {
        "abi_generation_mode": attr.option(attr.enum(AbiGenerationMode), default = None),
        "annotation_processing_tool": attr.option(attr.enum(AnnotationProcessingTool), default = None),
        "annotation_processor_deps": attr.list(attr.dep(), default = []),
        "annotation_processor_params": attr.list(attr.string(), default = []),
        "annotation_processors": attr.list(attr.string(), default = []),
        "contacts": attr.list(attr.string(), default = []),
        "cxx_library_whitelist": attr.list(attr.dep(), default = []),
        "default_cxx_platform": attr.option(attr.string(), default = None),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "deps": attr.list(attr.dep(), default = []),
        "deps_query": attr.option(attr.query(), default = None),
        "env": attr.dict(key = attr.string(), value = attr.arg(), sorted = False, default = {}),
        "exported_deps": attr.list(attr.dep(), default = []),
        "exported_provided_deps": attr.list(attr.dep(), default = []),
        "extra_arguments": attr.list(attr.string(), default = []),
        "extra_kotlinc_arguments": attr.list(attr.string(), default = []),
        "fork_mode": attr.enum(ForkMode, default = "none"),
        "friend_paths": attr.list(attr.dep(), default = []),
        "java_version": attr.option(attr.string(), default = None),
        "javac": attr.option(attr.source(), default = None),
        "kotlin_compiler_plugins": attr.dict(key = attr.source(), value = attr.dict(key = attr.string(), value = attr.string(), sorted = False), sorted = False, default = {}),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "manifest_file": attr.option(attr.source(), default = None),
        "maven_coords": attr.option(attr.string(), default = None),
        "never_mark_as_unused_dependency": attr.option(attr.bool(), default = None),
        "on_unused_dependencies": attr.option(attr.enum(UnusedDependenciesAction), default = None),
        "plugins": attr.list(attr.dep(), default = []),
        "proguard_config": attr.option(attr.source(), default = None),
        "provided_deps": attr.list(attr.dep(), default = []),
        "remove_classes": attr.list(attr.regex(), default = []),
        "required_for_source_only_abi": attr.bool(),
        "resources": attr.list(attr.source(), default = []),
        "resources_root": attr.option(attr.source(), default = None),
        "run_test_separately": attr.bool(),
        "runtime_deps": attr.list(attr.dep(), default = []),
        "source": attr.option(attr.string(), default = None),
        "source_abi_verification_mode": attr.option(attr.enum(SourceAbiVerificationMode), default = None),
        "source_only_abi_deps": attr.list(attr.dep(), default = []),
        "srcs": attr.list(attr.source(), default = []),
        "std_err_log_level": attr.option(attr.one_of(attr.enum(LogLevel), attr.int()), default = None),
        "std_out_log_level": attr.option(attr.one_of(attr.enum(LogLevel), attr.int()), default = None),
        "target": attr.option(attr.string(), default = None),
        "test_case_timeout_ms": attr.option(attr.int(), default = None),
        "test_rule_timeout_ms": attr.option(attr.int(), default = None),
        "test_type": attr.option(attr.enum(TestType), default = None),
        "use_cxx_libraries": attr.option(attr.bool(), default = None),
        "use_dependency_order_classpath": attr.option(attr.bool(), default = None),
        "vm_args": attr.list(attr.arg(), default = []),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "legacy_toolchain": {
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "toolchain_name": attr.string(default = ""),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "lua_binary": {
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "deps": attr.list(attr.dep(), default = []),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "main_module": attr.string(default = ""),
        "native_starter_library": attr.option(attr.dep(), default = None),
        "package_style": attr.option(attr.enum(LuaPlatformPackageStyle), default = None),
        "platform": attr.option(attr.string(), default = None),
        "platform_deps": attr.list(attr.tuple(attr.regex(), attr.set(attr.dep(), sorted = True)), default = []),
        "python_platform": attr.option(attr.string(), default = None),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "lua_library": {
        "base_module": attr.option(attr.string(), default = None),
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "deps": attr.list(attr.dep(), default = []),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "platform_deps": attr.list(attr.tuple(attr.regex(), attr.set(attr.dep(), sorted = True)), default = []),
        "srcs": attr.named_set(attr.source(), sorted = True, default = []),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "ndk_library": {
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "deps": attr.list(attr.dep(), default = []),
        "flags": attr.list(attr.arg(), default = []),
        "is_asset": attr.bool(),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "srcs": attr.list(attr.source(), default = []),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "ndk_toolchain": {
        "contacts": attr.list(attr.string(), default = []),
        "cxx_runtime": attr.option(attr.enum(NdkCxxRuntime), default = None),
        "cxx_toolchain": attr.dep(),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "objdump": attr.source(),
        "shared_runtime_path": attr.option(attr.source(), default = None),
        "strip_apk_libs_flags": attr.option(attr.list(attr.arg()), default = None),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "ocaml_binary": {
        "bytecode_only": attr.option(attr.bool(), default = None),
        "compiler_flags": attr.list(attr.arg(), default = []),
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "deps": attr.list(attr.dep(), default = []),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "linker_flags": attr.list(attr.string(), default = []),
        "ocamldep_flags": attr.list(attr.arg(), default = []),
        "platform": attr.option(attr.string(), default = None),
        "platform_deps": attr.list(attr.tuple(attr.regex(), attr.set(attr.dep(), sorted = True)), default = []),
        "platform_linker_flags": attr.list(attr.tuple(attr.regex(), attr.list(attr.string())), default = []),
        "srcs": attr.option(attr.named_set(attr.source(), sorted = False), default = None),
        "warnings_flags": attr.option(attr.string(), default = None),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "ocaml_library": {
        "bytecode_only": attr.bool(),
        "compiler_flags": attr.list(attr.arg(), default = []),
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "deps": attr.list(attr.dep(), default = []),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "linker_flags": attr.list(attr.arg(), default = []),
        "native_plugin": attr.bool(),
        "ocamldep_flags": attr.list(attr.arg(), default = []),
        "platform_compiler_flags": attr.list(attr.tuple(attr.regex(), attr.list(attr.arg())), default = []),
        "platform_deps": attr.list(attr.tuple(attr.regex(), attr.set(attr.dep(), sorted = True)), default = []),
        "srcs": attr.option(attr.named_set(attr.source(), sorted = False), default = None),
        "warnings_flags": attr.option(attr.string(), default = None),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "platform": {
        "constraint_values": attr.list(attr.configuration_label(), default = []),
        "deps": attr.list(attr.configuration_label(), default = []),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "prebuilt_apple_framework": {
        "code_sign_on_copy": attr.option(attr.bool(), default = None),
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "deps": attr.list(attr.dep(), default = []),
        "exported_linker_flags": attr.list(attr.string(), default = []),
        "exported_platform_linker_flags": attr.list(attr.tuple(attr.regex(), attr.list(attr.string())), default = []),
        "framework": attr.source(),
        "frameworks": attr.list(attr.string(), default = []),
        "labels": attr.list(attr.string(), default = []),
        "libraries": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "preferred_linkage": attr.enum(Linkage),
        "supported_platforms_regex": attr.option(attr.regex(), default = None),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "prebuilt_cxx_library": {
        "can_be_asset": attr.bool(),
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "deps": attr.list(attr.dep(), default = []),
        "exported_deps": attr.list(attr.dep(), default = []),
        "exported_headers": attr.named_set(attr.source(), sorted = True, default = []),
        "exported_lang_platform_preprocessor_flags": attr.dict(key = attr.enum(CxxSourceType), value = attr.list(attr.tuple(attr.regex(), attr.list(attr.arg()))), sorted = False, default = {}),
        "exported_lang_preprocessor_flags": attr.dict(key = attr.enum(CxxSourceType), value = attr.list(attr.arg()), sorted = False, default = {}),
        "exported_linker_flags": attr.list(attr.arg(), default = []),
        "exported_platform_deps": attr.list(attr.tuple(attr.regex(), attr.set(attr.dep(), sorted = True)), default = []),
        "exported_platform_headers": attr.list(attr.tuple(attr.regex(), attr.named_set(attr.source(), sorted = True)), default = []),
        "exported_platform_linker_flags": attr.list(attr.tuple(attr.regex(), attr.list(attr.arg())), default = []),
        "exported_platform_preprocessor_flags": attr.list(attr.tuple(attr.regex(), attr.list(attr.arg())), default = []),
        "exported_post_linker_flags": attr.list(attr.arg(), default = []),
        "exported_post_platform_linker_flags": attr.list(attr.tuple(attr.regex(), attr.list(attr.arg())), default = []),
        "exported_preprocessor_flags": attr.list(attr.arg(), default = []),
        "force_static": attr.bool(),
        "frameworks": attr.list(attr.string(), default = []),
        "header_dirs": attr.option(attr.list(attr.source()), default = None),
        "header_namespace": attr.option(attr.string(), default = None),
        "header_only": attr.bool(),
        "import_lib": attr.option(attr.source(), default = None),
        "include_in_android_merge_map_output": attr.bool(),
        "labels": attr.list(attr.string(), default = []),
        "libraries": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "link_whole": attr.bool(),
        "link_without_soname": attr.bool(),
        "platform_header_dirs": attr.option(attr.list(attr.tuple(attr.regex(), attr.list(attr.source()))), default = None),
        "platform_import_lib": attr.option(attr.list(attr.tuple(attr.regex(), attr.source())), default = None),
        "platform_shared_lib": attr.option(attr.list(attr.tuple(attr.regex(), attr.source())), default = None),
        "platform_static_lib": attr.option(attr.list(attr.tuple(attr.regex(), attr.source())), default = None),
        "platform_static_pic_lib": attr.option(attr.list(attr.tuple(attr.regex(), attr.source())), default = None),
        "preferred_linkage": attr.option(attr.enum(Linkage), default = None),
        "provided": attr.bool(),
        "shared_lib": attr.option(attr.source(), default = None),
        "soname": attr.option(attr.string(), default = None),
        "static_lib": attr.option(attr.source(), default = None),
        "static_pic_lib": attr.option(attr.source(), default = None),
        "supported_platforms_regex": attr.option(attr.regex(), default = None),
        "supports_merged_linking": attr.option(attr.bool(), default = None),
        "supports_shared_library_interface": attr.bool(),
        "versioned_exported_lang_platform_preprocessor_flags": attr.versioned(attr.dict(key = attr.enum(CxxSourceType), value = attr.list(attr.tuple(attr.regex(), attr.list(attr.arg()))), sorted = False)),
        "versioned_exported_lang_preprocessor_flags": attr.versioned(attr.dict(key = attr.enum(CxxSourceType), value = attr.list(attr.arg()), sorted = False)),
        "versioned_exported_platform_preprocessor_flags": attr.versioned(attr.list(attr.tuple(attr.regex(), attr.list(attr.arg())))),
        "versioned_exported_preprocessor_flags": attr.versioned(attr.list(attr.arg())),
        "versioned_header_dirs": attr.option(attr.versioned(attr.list(attr.source())), default = None),
        "versioned_import_lib": attr.option(attr.versioned(attr.source()), default = None),
        "versioned_shared_lib": attr.option(attr.versioned(attr.source()), default = None),
        "versioned_static_lib": attr.option(attr.versioned(attr.source()), default = None),
        "versioned_static_pic_lib": attr.option(attr.versioned(attr.source()), default = None),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "prebuilt_cxx_library_group": {
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "deps": attr.list(attr.dep(), default = []),
        "exported_deps": attr.list(attr.dep(), default = []),
        "exported_platform_deps": attr.list(attr.tuple(attr.regex(), attr.set(attr.dep(), sorted = True)), default = []),
        "exported_preprocessor_flags": attr.list(attr.string(), default = []),
        "import_libs": attr.dict(key = attr.string(), value = attr.source(), sorted = False, default = {}),
        "include_dirs": attr.list(attr.source(), default = []),
        "include_in_android_merge_map_output": attr.bool(),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "provided_shared_libs": attr.dict(key = attr.string(), value = attr.source(), sorted = False, default = {}),
        "shared_libs": attr.dict(key = attr.string(), value = attr.source(), sorted = False, default = {}),
        "shared_link": attr.list(attr.string(), default = []),
        "static_libs": attr.list(attr.source(), default = []),
        "static_link": attr.list(attr.string(), default = []),
        "static_pic_libs": attr.list(attr.source(), default = []),
        "static_pic_link": attr.list(attr.string(), default = []),
        "supported_platforms_regex": attr.option(attr.regex(), default = None),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "prebuilt_dotnet_library": {
        "assembly": attr.source(),
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "prebuilt_go_library": {
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "deps": attr.list(attr.dep(), default = []),
        "exported_deps": attr.list(attr.dep(), default = []),
        "labels": attr.list(attr.string(), default = []),
        "library": attr.source(),
        "licenses": attr.list(attr.source(), default = []),
        "package_name": attr.option(attr.string(), default = None),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "prebuilt_jar": {
        "binary_jar": attr.source(),
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "deps": attr.list(attr.dep(), default = []),
        "generate_abi": attr.bool(),
        "javadoc_url": attr.option(attr.string(), default = None),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "maven_coords": attr.option(attr.string(), default = None),
        "never_mark_as_unused_dependency": attr.bool(),
        "required_for_source_only_abi": attr.bool(),
        "source_jar": attr.option(attr.source(), default = None),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "prebuilt_native_library": {
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "deps": attr.list(attr.dep(), default = []),
        "is_asset": attr.bool(),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "native_libs": attr.source(),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "prebuilt_ocaml_library": {
        "bytecode_c_libs": attr.list(attr.string(), default = []),
        "bytecode_lib": attr.string(default = ""),
        "bytecode_only": attr.bool(),
        "c_libs": attr.list(attr.string(), default = []),
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "deps": attr.list(attr.dep(), default = []),
        "include_dir": attr.string(default = ""),
        "labels": attr.list(attr.string(), default = []),
        "lib_dir": attr.string(default = ""),
        "lib_name": attr.string(default = ""),
        "licenses": attr.list(attr.source(), default = []),
        "native_c_libs": attr.list(attr.string(), default = []),
        "native_lib": attr.string(default = ""),
        "platform_deps": attr.list(attr.tuple(attr.regex(), attr.set(attr.dep(), sorted = True)), default = []),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "prebuilt_python_library": {
        "binary_src": attr.source(),
        "compile": attr.bool(),
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "deps": attr.list(attr.dep(), default = []),
        "exclude_deps_from_merged_linking": attr.bool(),
        "ignore_compile_errors": attr.bool(),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "prebuilt_rust_library": {
        "contacts": attr.list(attr.string(), default = []),
        "crate": attr.string(default = ""),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "deps": attr.list(attr.dep(), default = []),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "link_style": attr.option(attr.enum(LinkableDepType), default = None),
        "platform_deps": attr.list(attr.tuple(attr.regex(), attr.set(attr.dep(), sorted = True)), default = []),
        "proc_macro": attr.bool(),
        "rlib": attr.source(),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "python_binary": {
        "base_module": attr.option(attr.string(), default = None),
        "build_args": attr.list(attr.arg(), default = []),
        "compile": attr.option(attr.bool(), default = None),
        "contacts": attr.list(attr.string(), default = []),
        "cxx_platform": attr.option(attr.string(), default = None),
        "deduplicate_merged_link_roots": attr.option(attr.bool(), default = None),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "deps": attr.list(attr.dep(), default = []),
        "dummy_omnibus": attr.option(attr.dep(), default = None),
        "extension": attr.option(attr.string(), default = None),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "linker_flags": attr.list(attr.arg(), default = []),
        "main": attr.option(attr.source(), default = None),
        "main_module": attr.option(attr.string(), default = None),
        "native_link_strategy": attr.option(attr.enum(NativeLinkStrategy), default = None),
        "package_style": attr.option(attr.enum(PythonBuckConfigPackageStyle), default = None),
        "platform": attr.option(attr.string(), default = None),
        "platform_deps": attr.list(attr.tuple(attr.regex(), attr.set(attr.dep(), sorted = True)), default = []),
        "platform_linker_flags": attr.list(attr.tuple(attr.regex(), attr.list(attr.arg())), default = []),
        "prefer_stripped_native_objects": attr.bool(),
        "preload_deps": attr.list(attr.dep(), default = []),
        "version_universe": attr.option(attr.string(), default = None),
        "within_view": attr.option(attr.list(attr.string())),
        "zip_safe": attr.option(attr.bool(), default = None),
    },
    "python_library": {
        "base_module": attr.option(attr.string(), default = None),
        "contacts": attr.list(attr.string(), default = []),
        "cxx_platform": attr.option(attr.string(), default = None),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "deps": attr.list(attr.dep(), default = []),
        "exclude_deps_from_merged_linking": attr.bool(),
        "ignore_compile_errors": attr.bool(),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "platform": attr.option(attr.string(), default = None),
        "platform_deps": attr.list(attr.tuple(attr.regex(), attr.set(attr.dep(), sorted = True)), default = []),
        "platform_resources": attr.list(attr.tuple(attr.regex(), attr.named_set(attr.source(), sorted = True)), default = []),
        "platform_srcs": attr.list(attr.tuple(attr.regex(), attr.named_set(attr.source(), sorted = True)), default = []),
        "resources": attr.named_set(attr.source(), sorted = True, default = []),
        "srcs": attr.named_set(attr.source(), sorted = True, default = []),
        "type_stubs": attr.named_set(attr.source(), sorted = True, default = []),
        "version_universe": attr.option(attr.string(), default = None),
        "versioned_resources": attr.option(attr.versioned(attr.named_set(attr.source(), sorted = True)), default = None),
        "versioned_srcs": attr.option(attr.versioned(attr.named_set(attr.source(), sorted = True)), default = None),
        "within_view": attr.option(attr.list(attr.string())),
        "zip_safe": attr.option(attr.bool(), default = None),
    },
    "python_test": {
        "additional_coverage_targets": attr.list(attr.dep(), default = []),
        "base_module": attr.option(attr.string(), default = None),
        "build_args": attr.list(attr.arg(), default = []),
        "compile": attr.option(attr.bool(), default = None),
        "contacts": attr.list(attr.string(), default = []),
        "cxx_platform": attr.option(attr.string(), default = None),
        "deduplicate_merged_link_roots": attr.option(attr.bool(), default = None),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "deps": attr.list(attr.dep(), default = []),
        "dummy_omnibus": attr.option(attr.dep(), default = None),
        "env": attr.dict(key = attr.string(), value = attr.arg(), sorted = False, default = {}),
        "exclude_deps_from_merged_linking": attr.bool(),
        "extension": attr.option(attr.string(), default = None),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "linker_flags": attr.list(attr.arg(), default = []),
        "main_module": attr.option(attr.string(), default = None),
        "native_link_strategy": attr.option(attr.enum(NativeLinkStrategy), default = None),
        "needed_coverage": attr.list(attr.tuple(attr.int(), attr.dep(), attr.option(attr.string())), default = []),
        "package_style": attr.option(attr.enum(PythonBuckConfigPackageStyle), default = None),
        "platform": attr.option(attr.string(), default = None),
        "platform_deps": attr.list(attr.tuple(attr.regex(), attr.set(attr.dep(), sorted = True)), default = []),
        "platform_linker_flags": attr.list(attr.tuple(attr.regex(), attr.list(attr.arg())), default = []),
        "platform_resources": attr.list(attr.tuple(attr.regex(), attr.named_set(attr.source(), sorted = True)), default = []),
        "platform_srcs": attr.list(attr.tuple(attr.regex(), attr.named_set(attr.source(), sorted = True)), default = []),
        "prefer_stripped_native_objects": attr.bool(),
        "preload_deps": attr.list(attr.dep(), default = []),
        "resources": attr.named_set(attr.source(), sorted = True, default = []),
        "runner": attr.option(attr.dep(), default = None),
        "specs": attr.option(attr.arg(json = True), default = None),
        "srcs": attr.named_set(attr.source(), sorted = True, default = []),
        "test_rule_timeout_ms": attr.option(attr.int(), default = None),
        "version_universe": attr.option(attr.string(), default = None),
        "versioned_resources": attr.option(attr.versioned(attr.named_set(attr.source(), sorted = True)), default = None),
        "versioned_srcs": attr.option(attr.versioned(attr.named_set(attr.source(), sorted = True)), default = None),
        "within_view": attr.option(attr.list(attr.string())),
        "zip_safe": attr.option(attr.bool(), default = None),
    },
    "python_test_runner": {
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "main_module": attr.string(default = ""),
        "src": attr.source(),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "remote_file": {
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "out": attr.option(attr.string(), default = None),
        "sha1": attr.string(default = ""),
        "sha256": attr.option(attr.string(), default = None),
        "type": attr.option(attr.enum(RemoteFileType), default = None),
        "url": attr.string(validate = _uri),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "robolectric_test": {
        "abi_generation_mode": attr.option(attr.enum(AbiGenerationMode), default = None),
        "annotation_processing_tool": attr.option(attr.enum(AnnotationProcessingTool), default = None),
        "annotation_processor_deps": attr.list(attr.dep(), default = []),
        "annotation_processor_params": attr.list(attr.string(), default = []),
        "annotation_processors": attr.list(attr.string(), default = []),
        "contacts": attr.list(attr.string(), default = []),
        "cxx_library_whitelist": attr.list(attr.dep(), default = []),
        "default_cxx_platform": attr.option(attr.string(), default = None),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "deps": attr.list(attr.dep(), default = []),
        "deps_query": attr.option(attr.query(), default = None),
        "env": attr.dict(key = attr.string(), value = attr.arg(), sorted = False, default = {}),
        "exported_deps": attr.list(attr.dep(), default = []),
        "exported_provided_deps": attr.list(attr.dep(), default = []),
        "extra_arguments": attr.list(attr.string(), default = []),
        "extra_kotlinc_arguments": attr.list(attr.string(), default = []),
        "fork_mode": attr.enum(ForkMode, default = "none"),
        "friend_paths": attr.list(attr.dep(), default = []),
        "java_version": attr.option(attr.string(), default = None),
        "javac": attr.option(attr.source(), default = None),
        "kotlin_compiler_plugins": attr.dict(key = attr.source(), value = attr.dict(key = attr.string(), value = attr.string(), sorted = False), sorted = False, default = {}),
        "labels": attr.list(attr.string(), default = []),
        "language": attr.option(attr.enum(JvmLanguage), default = None),
        "licenses": attr.list(attr.source(), default = []),
        "locales_for_binary_resources": attr.list(attr.string(), default = []),
        "manifest_entries": attr.dict(key = attr.string(), value = attr.any(), default = {}),
        "manifest_file": attr.option(attr.source(), default = None),
        "maven_coords": attr.option(attr.string(), default = None),
        "never_mark_as_unused_dependency": attr.option(attr.bool(), default = None),
        "on_unused_dependencies": attr.option(attr.enum(UnusedDependenciesAction), default = None),
        "plugins": attr.list(attr.dep(), default = []),
        "preferred_density_for_binary_resources": attr.option(attr.string(), default = None),
        "proguard_config": attr.option(attr.source(), default = None),
        "provided_deps": attr.list(attr.dep(), default = []),
        "remove_classes": attr.list(attr.regex(), default = []),
        "required_for_source_only_abi": attr.bool(),
        "resource_union_package": attr.option(attr.string(), default = None),
        "resources": attr.list(attr.source(), default = []),
        "resources_root": attr.option(attr.source(), default = None),
        "robolectric_manifest": attr.source(),
        "robolectric_runtime_dependencies": attr.list(attr.dep(), default = []),
        "robolectric_runtime_dependency": attr.option(attr.source(), default = None),
        "run_test_separately": attr.bool(),
        "runtime_deps": attr.list(attr.dep(), default = []),
        "source": attr.option(attr.string(), default = None),
        "source_abi_verification_mode": attr.option(attr.enum(SourceAbiVerificationMode), default = None),
        "source_only_abi_deps": attr.list(attr.dep(), default = []),
        "srcs": attr.list(attr.source(), default = []),
        "std_err_log_level": attr.option(attr.one_of(attr.enum(LogLevel), attr.int()), default = None),
        "std_out_log_level": attr.option(attr.one_of(attr.enum(LogLevel), attr.int()), default = None),
        "target": attr.option(attr.string(), default = None),
        "test_case_timeout_ms": attr.option(attr.int(), default = None),
        "test_rule_timeout_ms": attr.option(attr.int(), default = None),
        "test_type": attr.option(attr.enum(TestType), default = None),
        "use_cxx_libraries": attr.option(attr.bool(), default = None),
        "use_dependency_order_classpath": attr.option(attr.bool(), default = None),
        "vm_args": attr.list(attr.arg(), default = []),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "rust_binary": {
        "contacts": attr.list(attr.string(), default = []),
        "crate": attr.option(attr.string(), default = None),
        "crate_root": attr.option(attr.string(), default = None),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "default_platform": attr.option(attr.string(), default = None),
        "deps": attr.list(attr.dep(), default = []),
        "edition": attr.option(attr.string(), default = None),
        "env": attr.dict(key = attr.string(), value = attr.arg(), sorted = False, default = {}),
        "features": attr.list(attr.string(), default = []),
        "flagged_deps": attr.list(attr.tuple(attr.dep(), attr.list(attr.string())), default = []),
        "framework": attr.bool(),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "link_style": attr.option(attr.enum(LinkableDepType), default = None),
        "linker_flags": attr.list(attr.arg(), default = []),
        "mapped_srcs": attr.dict(key = attr.source(), value = attr.string(), sorted = False, default = {}),
        "named_deps": attr.dict(key = attr.string(), value = attr.dep(), sorted = False, default = {}),
        "platform_deps": attr.list(attr.tuple(attr.regex(), attr.set(attr.dep(), sorted = True)), default = []),
        "platform_flagged_deps": attr.list(attr.tuple(attr.regex(), attr.list(attr.tuple(attr.dep(), attr.list(attr.string())))), default = []),
        "platform_linker_flags": attr.list(attr.tuple(attr.regex(), attr.list(attr.arg())), default = []),
        "platform_rustc_flags": attr.dict(key = attr.string(), value = attr.list(attr.arg()), sorted = False, default = {}),
        "rpath": attr.bool(),
        "rustc_flags": attr.list(attr.arg(), default = []),
        "rustdoc_flags": attr.list(attr.arg(), default = []),
        "srcs": attr.list(attr.source(), default = []),
        "version_universe": attr.option(attr.string(), default = None),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "rust_library": {
        "contacts": attr.list(attr.string(), default = []),
        "crate": attr.option(attr.string(), default = None),
        "crate_root": attr.option(attr.string(), default = None),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "default_platform": attr.option(attr.string(), default = None),
        "deps": attr.list(attr.dep(), default = []),
        "edition": attr.option(attr.string(), default = None),
        "env": attr.dict(key = attr.string(), value = attr.arg(), sorted = False, default = {}),
        "features": attr.list(attr.string(), default = []),
        "flagged_deps": attr.list(attr.tuple(attr.dep(), attr.list(attr.string())), default = []),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "mapped_srcs": attr.dict(key = attr.source(), value = attr.string(), sorted = False, default = {}),
        "named_deps": attr.dict(key = attr.string(), value = attr.dep(), sorted = False, default = {}),
        "platform_deps": attr.list(attr.tuple(attr.regex(), attr.set(attr.dep(), sorted = True)), default = []),
        "platform_flagged_deps": attr.list(attr.tuple(attr.regex(), attr.list(attr.tuple(attr.dep(), attr.list(attr.string())))), default = []),
        "platform_rustc_flags": attr.dict(key = attr.string(), value = attr.list(attr.arg()), sorted = False, default = {}),
        "preferred_linkage": attr.enum(Linkage),
        "proc_macro": attr.bool(),
        "rustc_flags": attr.list(attr.arg(), default = []),
        "rustdoc_flags": attr.list(attr.arg(), default = []),
        "srcs": attr.list(attr.source(), default = []),
        "version_universe": attr.option(attr.string(), default = None),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "rust_test": {
        "contacts": attr.list(attr.string(), default = []),
        "crate": attr.option(attr.string(), default = None),
        "crate_root": attr.option(attr.string(), default = None),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "default_platform": attr.option(attr.string(), default = None),
        "deps": attr.list(attr.dep(), default = []),
        "edition": attr.option(attr.string(), default = None),
        "env": attr.dict(key = attr.string(), value = attr.arg(), sorted = False, default = {}),
        "features": attr.list(attr.string(), default = []),
        "flagged_deps": attr.list(attr.tuple(attr.dep(), attr.list(attr.string())), default = []),
        "framework": attr.bool(),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "link_style": attr.option(attr.enum(LinkableDepType), default = None),
        "linker_flags": attr.list(attr.arg(), default = []),
        "mapped_srcs": attr.dict(key = attr.source(), value = attr.string(), sorted = False, default = {}),
        "named_deps": attr.dict(key = attr.string(), value = attr.dep(), sorted = False, default = {}),
        "platform_deps": attr.list(attr.tuple(attr.regex(), attr.set(attr.dep(), sorted = True)), default = []),
        "platform_flagged_deps": attr.list(attr.tuple(attr.regex(), attr.list(attr.tuple(attr.dep(), attr.list(attr.string())))), default = []),
        "platform_linker_flags": attr.list(attr.tuple(attr.regex(), attr.list(attr.arg())), default = []),
        "platform_rustc_flags": attr.dict(key = attr.string(), value = attr.list(attr.arg()), sorted = False, default = {}),
        "rpath": attr.bool(),
        "rustc_flags": attr.list(attr.arg(), default = []),
        "rustdoc_flags": attr.list(attr.arg(), default = []),
        "srcs": attr.list(attr.source(), default = []),
        "version_universe": attr.option(attr.string(), default = None),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "scala_library": {
        "abi_generation_mode": attr.option(attr.enum(AbiGenerationMode), default = None),
        "annotation_processor_deps": attr.list(attr.dep(), default = []),
        "annotation_processor_params": attr.list(attr.string(), default = []),
        "annotation_processors": attr.list(attr.string(), default = []),
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "deps": attr.list(attr.dep(), default = []),
        "exported_deps": attr.list(attr.dep(), default = []),
        "exported_provided_deps": attr.list(attr.dep(), default = []),
        "extra_arguments": attr.list(attr.string(), default = []),
        "java_version": attr.option(attr.string(), default = None),
        "javac": attr.option(attr.source(), default = None),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "manifest_file": attr.option(attr.source(), default = None),
        "maven_coords": attr.option(attr.string(), default = None),
        "never_mark_as_unused_dependency": attr.option(attr.bool(), default = None),
        "on_unused_dependencies": attr.option(attr.enum(UnusedDependenciesAction), default = None),
        "plugins": attr.list(attr.dep(), default = []),
        "proguard_config": attr.option(attr.source(), default = None),
        "provided_deps": attr.list(attr.dep(), default = []),
        "remove_classes": attr.list(attr.regex(), default = []),
        "required_for_source_only_abi": attr.bool(),
        "resources": attr.list(attr.source(), default = []),
        "resources_root": attr.option(attr.source(), default = None),
        "runtime_deps": attr.list(attr.dep(), default = []),
        "source": attr.option(attr.string(), default = None),
        "source_abi_verification_mode": attr.option(attr.enum(SourceAbiVerificationMode), default = None),
        "source_only_abi_deps": attr.list(attr.dep(), default = []),
        "srcs": attr.list(attr.source(), default = []),
        "target": attr.option(attr.string(), default = None),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "scala_test": {
        "abi_generation_mode": attr.option(attr.enum(AbiGenerationMode), default = None),
        "annotation_processor_deps": attr.list(attr.dep(), default = []),
        "annotation_processor_params": attr.list(attr.string(), default = []),
        "annotation_processors": attr.list(attr.string(), default = []),
        "contacts": attr.list(attr.string(), default = []),
        "cxx_library_whitelist": attr.list(attr.dep(), default = []),
        "default_cxx_platform": attr.option(attr.string(), default = None),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "deps": attr.list(attr.dep(), default = []),
        "deps_query": attr.option(attr.query(), default = None),
        "env": attr.dict(key = attr.string(), value = attr.arg(), sorted = False, default = {}),
        "exported_deps": attr.list(attr.dep(), default = []),
        "exported_provided_deps": attr.list(attr.dep(), default = []),
        "extra_arguments": attr.list(attr.string(), default = []),
        "fork_mode": attr.enum(ForkMode, default = "none"),
        "java_version": attr.option(attr.string(), default = None),
        "javac": attr.option(attr.source(), default = None),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "manifest_file": attr.option(attr.source(), default = None),
        "maven_coords": attr.option(attr.string(), default = None),
        "never_mark_as_unused_dependency": attr.option(attr.bool(), default = None),
        "on_unused_dependencies": attr.option(attr.enum(UnusedDependenciesAction), default = None),
        "plugins": attr.list(attr.dep(), default = []),
        "proguard_config": attr.option(attr.source(), default = None),
        "provided_deps": attr.list(attr.dep(), default = []),
        "remove_classes": attr.list(attr.regex(), default = []),
        "required_for_source_only_abi": attr.bool(),
        "resources": attr.list(attr.source(), default = []),
        "resources_root": attr.option(attr.source(), default = None),
        "run_test_separately": attr.bool(),
        "runtime_deps": attr.list(attr.dep(), default = []),
        "source": attr.option(attr.string(), default = None),
        "source_abi_verification_mode": attr.option(attr.enum(SourceAbiVerificationMode), default = None),
        "source_only_abi_deps": attr.list(attr.dep(), default = []),
        "srcs": attr.list(attr.source(), default = []),
        "std_err_log_level": attr.option(attr.one_of(attr.enum(LogLevel), attr.int()), default = None),
        "std_out_log_level": attr.option(attr.one_of(attr.enum(LogLevel), attr.int()), default = None),
        "target": attr.option(attr.string(), default = None),
        "test_case_timeout_ms": attr.option(attr.int(), default = None),
        "test_rule_timeout_ms": attr.option(attr.int(), default = None),
        "test_type": attr.option(attr.enum(TestType), default = None),
        "use_cxx_libraries": attr.option(attr.bool(), default = None),
        "use_dependency_order_classpath": attr.option(attr.bool(), default = None),
        "vm_args": attr.list(attr.arg(), default = []),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "scene_kit_assets": {
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "path": attr.source(),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "sh_binary": {
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "deps": attr.list(attr.dep(), default = []),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "main": attr.source(),
        "resources": attr.list(attr.source(), default = []),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "sh_test": {
        "args": attr.list(attr.arg(), default = []),
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "deps": attr.list(attr.dep(), default = []),
        "env": attr.dict(key = attr.string(), value = attr.arg(), sorted = False, default = {}),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "list_args": attr.option(attr.list(attr.string()), default = None),
        "list_env": attr.option(attr.dict(key = attr.string(), value = attr.string(), sorted = False), default = None),
        "resources": attr.list(attr.source(), default = []),
        "run_args": attr.option(attr.list(attr.string()), default = None),
        "run_env": attr.option(attr.dict(key = attr.string(), value = attr.string(), sorted = False), default = None),
        "run_test_separately": attr.bool(),
        "test": attr.option(attr.source(), default = None),
        "test_rule_timeout_ms": attr.option(attr.int(), default = None),
        "type": attr.option(attr.string(), default = None),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "supermodule_target_graph": {
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "deps": attr.set(attr.dep(), sorted = True, default = []),
        "label_pattern": attr.option(attr.regex(), default = None),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "on_duplicate_entry": attr.enum(OnDuplicateEntry, default = "overwrite"),
        "out": attr.string(default = ""),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "swift_library": {
        "bridging_header": attr.option(attr.source(), default = None),
        "compiler_flags": attr.list(attr.arg(), default = []),
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "deps": attr.list(attr.dep(), default = []),
        "enable_cxx_interop": attr.bool(),
        "frameworks": attr.list(attr.string(), default = []),
        "labels": attr.list(attr.string(), default = []),
        "libraries": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "module_name": attr.option(attr.string(), default = None),
        "preferred_linkage": attr.option(attr.enum(Linkage), default = None),
        "sdk_modules": attr.list(attr.string(), default = []),
        "serialize_debugging_options": attr.bool(),
        "soname": attr.option(attr.string(), default = None),
        "srcs": attr.list(attr.source(), default = []),
        "supported_platforms_regex": attr.option(attr.regex(), default = None),
        "target_sdk_version": attr.option(attr.string(), default = None),
        "uses_explicit_modules": attr.bool(),
        "version": attr.option(attr.string(), default = None),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "swift_toolchain": {
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "platform_path": attr.source(),
        "prefix_serialized_debug_info": attr.bool(),
        "resource_dir": attr.option(attr.source(), default = None),
        "runtime_paths_for_bundling": attr.list(attr.string(), default = []),
        "runtime_paths_for_linking": attr.list(attr.string(), default = []),
        "runtime_run_paths": attr.list(attr.string(), default = []),
        "sdk_dependencies_path": attr.option(attr.string(), default = None),
        "sdk_path": attr.source(),
        "static_runtime_paths": attr.list(attr.string(), default = []),
        "swift_stdlib_tool": attr.option(attr.source(), default = None),
        "swift_stdlib_tool_flags": attr.list(attr.arg(), default = []),
        "swiftc": attr.source(),
        "swiftc_flags": attr.list(attr.arg(), default = []),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "test_suite": {
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "versioned_alias": {
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "versions": attr.dict(key = attr.string(), value = attr.dep(), sorted = False, default = {}),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "worker_tool": {
        "args": attr.one_of(attr.arg(), attr.list(attr.arg())),
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "env": attr.dict(key = attr.string(), value = attr.arg(), sorted = False, default = {}),
        "exe": attr.option(attr.dep(), default = None),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "max_workers": attr.option(attr.int(), default = None),
        "max_workers_per_thread_percent": attr.option(attr.int(), default = None),
        "persistent": attr.option(attr.bool(), default = None),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "xcode_postbuild_script": {
        "cmd": attr.string(default = ""),
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "input_file_lists": attr.list(attr.string(), default = []),
        "inputs": attr.list(attr.string(), default = []),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "output_file_lists": attr.list(attr.string(), default = []),
        "outputs": attr.list(attr.string(), default = []),
        "srcs": attr.list(attr.source(), default = []),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "xcode_prebuild_script": {
        "cmd": attr.string(default = ""),
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "input_file_lists": attr.list(attr.string(), default = []),
        "inputs": attr.list(attr.string(), default = []),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "output_file_lists": attr.list(attr.string(), default = []),
        "outputs": attr.list(attr.string(), default = []),
        "srcs": attr.list(attr.source(), default = []),
        "within_view": attr.option(attr.list(attr.string())),
    },
    "xcode_workspace_config": {
        "action_config_names": attr.dict(key = attr.enum(SchemeActionType), value = attr.string(), sorted = False, default = {}),
        "additional_scheme_actions": attr.option(attr.dict(key = attr.enum(SchemeActionType), value = attr.dict(key = attr.enum(AdditionalActions), value = attr.list(attr.string()), sorted = False), sorted = False), default = None),
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "environment_variables": attr.option(attr.dict(key = attr.enum(SchemeActionType), value = attr.dict(key = attr.string(), value = attr.string(), sorted = False), sorted = False), default = None),
        "explicit_runnable_path": attr.option(attr.string(), default = None),
        "extra_schemes": attr.dict(key = attr.string(), value = attr.dep(), sorted = False, default = {}),
        "extra_shallow_targets": attr.list(attr.dep(), default = []),
        "extra_targets": attr.list(attr.dep(), default = []),
        "extra_tests": attr.list(attr.dep(), default = []),
        "is_remote_runnable": attr.option(attr.bool(), default = None),
        "labels": attr.list(attr.string(), default = []),
        "launch_style": attr.option(attr.enum(LaunchStyle), default = None),
        "licenses": attr.list(attr.source(), default = []),
        "notification_payload_file": attr.option(attr.string(), default = None),
        "src_target": attr.option(attr.dep(), default = None),
        "was_created_for_app_extension": attr.option(attr.bool(), default = None),
        "watch_interface": attr.option(attr.enum(WatchInterface), default = None),
        "within_view": attr.option(attr.list(attr.string())),
        "workspace_name": attr.option(attr.string(), default = None),
    },
    "zip_file": {
        "contacts": attr.list(attr.string(), default = []),
        "default_host_platform": attr.option(attr.configuration_label(), default = None),
        "entries_to_exclude": attr.list(attr.regex(), default = []),
        "labels": attr.list(attr.string(), default = []),
        "licenses": attr.list(attr.source(), default = []),
        "on_duplicate_entry": attr.enum(OnDuplicateEntry, default = "overwrite"),
        "out": attr.string(default = ""),
        "srcs": attr.list(attr.source(), default = []),
        "within_view": attr.option(attr.list(attr.string())),
        "zip_srcs": attr.list(attr.source(), default = []),
    },
}
