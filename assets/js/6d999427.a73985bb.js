"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[18053],{24829:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>x,frontMatter:()=>a,metadata:()=>t,toc:()=>u});const t=JSON.parse('{"id":"api/build/ExternalRunnerTestInfo","title":"ExternalRunnerTestInfo","description":"Provider that signals that a rule can be tested using an external runner. This is the Buck1-compatible API for tests.","source":"@site/../docs/api/build/ExternalRunnerTestInfo.md","sourceDirName":"api/build","slug":"/api/build/ExternalRunnerTestInfo","permalink":"/docs/api/build/ExternalRunnerTestInfo","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"apiSidebar","previous":{"title":"DynamicValue","permalink":"/docs/api/build/DynamicValue"},"next":{"title":"Label","permalink":"/docs/api/build/Label"}}');var s=r(74848),l=r(28453),o=r(56289);const a={},i="ExternalRunnerTestInfo",c={},u=[{value:"ExternalRunnerTestInfo.command",id:"externalrunnertestinfocommand",level:2},{value:"ExternalRunnerTestInfo.contacts",id:"externalrunnertestinfocontacts",level:2},{value:"ExternalRunnerTestInfo.default_executor",id:"externalrunnertestinfodefault_executor",level:2},{value:"ExternalRunnerTestInfo.env",id:"externalrunnertestinfoenv",level:2},{value:"ExternalRunnerTestInfo.executor_overrides",id:"externalrunnertestinfoexecutor_overrides",level:2},{value:"ExternalRunnerTestInfo.labels",id:"externalrunnertestinfolabels",level:2},{value:"ExternalRunnerTestInfo.local_resources",id:"externalrunnertestinfolocal_resources",level:2},{value:"ExternalRunnerTestInfo.required_local_resources",id:"externalrunnertestinforequired_local_resources",level:2},{value:"ExternalRunnerTestInfo.run_from_project_root",id:"externalrunnertestinforun_from_project_root",level:2},{value:"ExternalRunnerTestInfo.test_type",id:"externalrunnertestinfotest_type",level:2},{value:"ExternalRunnerTestInfo.use_project_relative_paths",id:"externalrunnertestinfouse_project_relative_paths",level:2},{value:"ExternalRunnerTestInfo.worker",id:"externalrunnertestinfoworker",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",p:"p",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"externalrunnertestinfo",children:"ExternalRunnerTestInfo"})}),"\n",(0,s.jsx)(n.p,{children:"Provider that signals that a rule can be tested using an external runner. This is the Buck1-compatible API for tests."}),"\n",(0,s.jsx)(n.h2,{id:"externalrunnertestinfocommand",children:"ExternalRunnerTestInfo.command"}),"\n",(0,s.jsx)("pre",{class:"language-python",children:(0,s.jsx)("code",{children:"ExternalRunnerTestInfo.command: list"})}),"\n",(0,s.jsx)(n.p,{children:"A Starlark value representing the command for this test. The external test runner is what gives meaning to this command."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"externalrunnertestinfocontacts",children:"ExternalRunnerTestInfo.contacts"}),"\n",(0,s.jsx)("pre",{class:"language-python",children:(0,s.jsxs)("code",{children:["ExternalRunnerTestInfo.contacts: list[",(0,s.jsx)(o.default,{to:"/docs/api/starlark/str",children:"str"}),"]"]})}),"\n",(0,s.jsx)(n.p,{children:"A starlark value representing the contacts for this test. This is largely expected to be an oncall, though it's not validated in any way."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"externalrunnertestinfodefault_executor",children:"ExternalRunnerTestInfo.default_executor"}),"\n",(0,s.jsx)("pre",{class:"language-python",children:(0,s.jsxs)("code",{children:["ExternalRunnerTestInfo.default_executor: ",(0,s.jsx)(o.default,{to:"/docs/api/build/CommandExecutorConfig",children:"CommandExecutorConfig"})]})}),"\n",(0,s.jsx)(n.p,{children:"Default executor to use to run tests. If none is passed we will default to the execution platform."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"externalrunnertestinfoenv",children:"ExternalRunnerTestInfo.env"}),"\n",(0,s.jsx)("pre",{class:"language-python",children:(0,s.jsxs)("code",{children:["ExternalRunnerTestInfo.env: dict[",(0,s.jsx)(o.default,{to:"/docs/api/starlark/str",children:"str"}),", typing.Any]"]})}),"\n",(0,s.jsxs)(n.p,{children:["A Starlark value representing the environment for this test. Here again, the external test runner is what will this meaning. This is of type ",(0,s.jsx)(n.code,{children:"dict[str, ArgLike]"}),"."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"externalrunnertestinfoexecutor_overrides",children:"ExternalRunnerTestInfo.executor_overrides"}),"\n",(0,s.jsx)("pre",{class:"language-python",children:(0,s.jsxs)("code",{children:["ExternalRunnerTestInfo.executor_overrides: dict[",(0,s.jsx)(o.default,{to:"/docs/api/starlark/str",children:"str"}),", ",(0,s.jsx)(o.default,{to:"/docs/api/build/CommandExecutorConfig",children:"CommandExecutorConfig"}),"]"]})}),"\n",(0,s.jsx)(n.p,{children:"Executors that Tpx can use to override the default executor."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"externalrunnertestinfolabels",children:"ExternalRunnerTestInfo.labels"}),"\n",(0,s.jsx)("pre",{class:"language-python",children:(0,s.jsxs)("code",{children:["ExternalRunnerTestInfo.labels: list[",(0,s.jsx)(o.default,{to:"/docs/api/starlark/str",children:"str"}),"]"]})}),"\n",(0,s.jsx)(n.p,{children:"A starlark value representing the labels for this test."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"externalrunnertestinfolocal_resources",children:"ExternalRunnerTestInfo.local_resources"}),"\n",(0,s.jsx)("pre",{class:"language-python",children:(0,s.jsxs)("code",{children:["ExternalRunnerTestInfo.local_resources: dict[",(0,s.jsx)(o.default,{to:"/docs/api/starlark/str",children:"str"}),", ",(0,s.jsx)(o.default,{to:"/docs/api/build/Label",children:"Label"})," | None]"]})}),"\n",(0,s.jsx)(n.p,{children:"Mapping from a local resource type to a target with a corresponding provider. Required types are passed from test runner. If the value for a corresponding type is omitted it means local resource should be ignored when executing tests even if those are passed as required from test runner."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"externalrunnertestinforequired_local_resources",children:"ExternalRunnerTestInfo.required_local_resources"}),"\n",(0,s.jsx)("pre",{class:"language-python",children:(0,s.jsxs)("code",{children:["ExternalRunnerTestInfo.required_local_resources: list[",(0,s.jsx)(o.default,{to:"/docs/api/build/RequiredTestLocalResource",children:"RequiredTestLocalResource"}),"]"]})}),"\n",(0,s.jsx)(n.p,{children:"List of local resource types which should be set up additionally to those which are passed from test runner. Allows specifying local resources on a per-rule basis."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"externalrunnertestinforun_from_project_root",children:"ExternalRunnerTestInfo.run_from_project_root"}),"\n",(0,s.jsx)("pre",{class:"language-python",children:(0,s.jsxs)("code",{children:["ExternalRunnerTestInfo.run_from_project_root: ",(0,s.jsx)(o.default,{to:"/docs/api/starlark/bool",children:"bool"})]})}),"\n",(0,s.jsx)(n.p,{children:"Whether this test should run from the project root, as opposed to the cell root"}),"\n",(0,s.jsxs)(n.p,{children:["Defaults to ",(0,s.jsx)(n.code,{children:"True"}),"."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"externalrunnertestinfotest_type",children:"ExternalRunnerTestInfo.test_type"}),"\n",(0,s.jsx)("pre",{class:"language-python",children:(0,s.jsxs)("code",{children:["ExternalRunnerTestInfo.test_type: ",(0,s.jsx)(o.default,{to:"/docs/api/starlark/str",children:"str"})]})}),"\n",(0,s.jsx)(n.p,{children:"A Starlark value representing the type of this test."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"externalrunnertestinfouse_project_relative_paths",children:"ExternalRunnerTestInfo.use_project_relative_paths"}),"\n",(0,s.jsx)("pre",{class:"language-python",children:(0,s.jsxs)("code",{children:["ExternalRunnerTestInfo.use_project_relative_paths: ",(0,s.jsx)(o.default,{to:"/docs/api/starlark/bool",children:"bool"})]})}),"\n",(0,s.jsx)(n.p,{children:"Whether this test should use relative paths"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"externalrunnertestinfoworker",children:"ExternalRunnerTestInfo.worker"}),"\n",(0,s.jsx)("pre",{class:"language-python",children:(0,s.jsx)("code",{children:"ExternalRunnerTestInfo.worker: WorkerInfo"})}),"\n",(0,s.jsx)(n.p,{children:"Configuration needed to spawn a new worker. This worker will be used to run every single command related to test execution, including listing."})]})}function x(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>a});var t=r(96540);const s={},l=t.createContext(s);function o(e){const n=t.useContext(l);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);