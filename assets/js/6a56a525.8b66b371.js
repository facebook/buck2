"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[88148],{28453:(e,n,o)=>{o.d(n,{R:()=>a,x:()=>s});var t=o(96540);const i={},l=t.createContext(i);function a(e){const n=t.useContext(l);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(l.Provider,{value:n},e.children)}},53880:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>r,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"rule_authors/writing_toolchains","title":"Writing Toolchains","description":"Toolchains are regular rules that:","source":"@site/../docs/rule_authors/writing_toolchains.md","sourceDirName":"rule_authors","slug":"/rule_authors/writing_toolchains","permalink":"/docs/rule_authors/writing_toolchains","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"writing_toolchains","title":"Writing Toolchains"},"sidebar":"main","previous":{"title":"Writing Rules","permalink":"/docs/rule_authors/writing_rules"},"next":{"title":"Transitive Sets","permalink":"/docs/rule_authors/transitive_sets"}}');var i=o(74848),l=o(28453);const a={id:"writing_toolchains",title:"Writing Toolchains"},s=void 0,r={},c=[{value:"Writing a custom toolchain",id:"writing-a-custom-toolchain",level:2},{value:"Writing a prelude-compatible toolchain",id:"writing-a-prelude-compatible-toolchain",level:3},{value:"Writing a toolchain for a custom language",id:"writing-a-toolchain-for-a-custom-language",level:3},{value:"Accessing a toolchain in a build rule implementation",id:"accessing-a-toolchain-in-a-build-rule-implementation",level:2},{value:"Writing a hermetic toolchain",id:"writing-a-hermetic-toolchain",level:2}];function h(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Toolchains are regular rules that:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Have ",(0,i.jsx)(n.code,{children:"is_toolchain_rule = True"})," passed to the ",(0,i.jsx)(n.code,{children:"rule"})," call."]}),"\n",(0,i.jsxs)(n.li,{children:["Return the provider(s) expected by rules using that toolchain, conventionally\nnamed ",(0,i.jsx)(n.code,{children:"*ToolchainInfo"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Toolchain rules are instantiated once in the ",(0,i.jsx)(n.code,{children:"toolchains//"})," cell. The location\nof the ",(0,i.jsx)(n.code,{children:"toolchains"})," cell is determined by the value of ",(0,i.jsx)(n.code,{children:"cells.toolchains"})," in the\n",(0,i.jsx)(n.code,{children:".buckconfig"})," file."]}),"\n",(0,i.jsxs)(n.p,{children:["Regular build rules reference those toolchain targets as\n",(0,i.jsx)(n.a,{href:"../../api/build/attrs/#toolchain_dep",children:(0,i.jsx)(n.code,{children:"toolchain_dep"})})," attrs (often\n",(0,i.jsx)(n.a,{href:"../../api/build/attrs/#default_only",children:(0,i.jsx)(n.code,{children:"default_only"})})," ones). See\n",(0,i.jsx)(n.a,{href:"/docs/rule_authors/configurations#toolchain-deps",children:"Toolchain Deps"})," for more information about\ntoolchain deps."]}),"\n",(0,i.jsx)(n.h2,{id:"writing-a-custom-toolchain",children:"Writing a custom toolchain"}),"\n",(0,i.jsxs)(n.p,{children:["The prelude exposes a few demo toolchains with specific configurations (e.g.\nhardcoded compiler and linker flags), that expect to find the tools on the\n",(0,i.jsx)(n.code,{children:"PATH"}),". Many users will want more control over those toolchains. Several options\nare available:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Defining a custom toolchain for a language that is supported in the prelude.\nOne can then either:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Return the ",(0,i.jsx)(n.code,{children:"*ToolchainInfo"})," provider defined in the prelude, to get\ncompatibility with all the prelude target rules for free."]}),"\n",(0,i.jsx)(n.li,{children:"Return a custom toolchain provider, for use with a custom set of target\nrules (which is a lot more effort)."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"Defining a toolchain for a custom language/process. One then has to define a\ntoolchain provider for it, which will be used by the rules for that language."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"writing-a-prelude-compatible-toolchain",children:"Writing a prelude-compatible toolchain"}),"\n",(0,i.jsxs)(n.p,{children:["People will often first encounter toolchains when they want to switch off of the\ndemo toolchains that ",(0,i.jsx)(n.code,{children:"buck2 init"})," uses by default. For example, one might want\nto tweak which compiler is used, which flags are passed to it, or where it is\nfetched from."]}),"\n",(0,i.jsxs)(n.p,{children:['The most straightforward thing to do first is to instantiate one of the "system"\ntoolchain rules that the prelude offers. Studying the toolchains defined by the\n',(0,i.jsx)(n.code,{children:"system_demo_toolchains"})," macro in ",(0,i.jsx)(n.code,{children:"@prelude//toolchains:demo.bzl"})," is a good way\nto get started."]}),"\n",(0,i.jsx)(n.p,{children:"For example, here is how one could define a C++ toolchain that builds projects\nin C++23, with warnings as errors and optimizations enabled:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'load("@prelude//toolchains:cxx.bzl", "system_cxx_toolchain")\n\nsystem_cxx_toolchain(\n    name = "cxx",\n    compiler_type = "clang",\n    cxx_flags = [\n        "-std=c++23",\n        "-Wall",\n        "-Wextra",\n        "-Werror",\n        "-O3",\n    ],\n    visibility = ["PUBLIC"],\n)\n'})}),"\n",(0,i.jsxs)(n.p,{children:["One would typically use ",(0,i.jsx)(n.a,{href:"/docs/rule_authors/configurations_by_example",children:(0,i.jsx)(n.code,{children:"select"})})," to customize\nthe toolchain e.g. based on the build mode (debug vs release) or compiler type."]}),"\n",(0,i.jsxs)(n.p,{children:["Note that several toolchains require you to also define a ",(0,i.jsx)(n.code,{children:"python_bootstrap"}),"\ntoolchain. This is because those toolchains use Python scripts (e.g. to generate\ncompilation databases for C++), and the prelude gives you control over the\nPython toolchain used for this purpose. The bootstrap Python toolchain can be\ndifferent from the toolchain used by ",(0,i.jsx)(n.code,{children:"python_*"})," rules.\n",(0,i.jsx)(n.code,{children:"@prelude//toolchains:python.bzl"})," provides a simple\n",(0,i.jsx)(n.code,{children:"system_python_bootstrap_toolchain"})," in case you do not care about tightly\ncontrolling the Python used when building other languages."]}),"\n",(0,i.jsx)(n.h3,{id:"writing-a-toolchain-for-a-custom-language",children:"Writing a toolchain for a custom language"}),"\n",(0,i.jsxs)(n.p,{children:["Toolchains for custom languages (and more generally, any custom process/build)\ncan also easily be written as rules with ",(0,i.jsx)(n.code,{children:"is_toolchain_rule = True"})," which return\nany provider struct (conventionally named ",(0,i.jsx)(n.code,{children:"*ToolchainInfo"}),"). The\n",(0,i.jsx)(n.a,{href:"https://github.com/facebook/buck2/tree/main/prelude/toolchains",children:"prelude's toolchains"}),",\nincluding ",(0,i.jsx)(n.code,{children:"system_cxx_toolchain"})," referenced earlier, can serve as examples."]}),"\n",(0,i.jsx)(n.p,{children:"There is no technical difference between toolchains defined in the prelude\ncompared to custom one, just like there is nothing special about languages\nsupported by the prelude."}),"\n",(0,i.jsx)(n.h2,{id:"accessing-a-toolchain-in-a-build-rule-implementation",children:"Accessing a toolchain in a build rule implementation"}),"\n",(0,i.jsxs)(n.p,{children:["Before going any further, note that using a toolchain is often unnecessary. It\nis perfectly possible for a build rule to reference regular targets as\ndependencies, without the added complexity of defining a toolchain for them. For\nexample, one can add an (often ",(0,i.jsx)(n.code,{children:"default_only"}),") ",(0,i.jsx)(n.code,{children:"attrs.exec_dep"})," to a build\nrule's ",(0,i.jsx)(n.code,{children:"attrs"})," to do code generation in a custom rule without creating a\ntoolchain for it, as long as there is no need to decouple the code generator\nbeing used from the rule implementation."]}),"\n",(0,i.jsxs)(n.p,{children:["With that being said, when a rule must be made generic over a toolchain, all\nthat is needed is to add that toolchain as a ",(0,i.jsx)(n.code,{children:"toolchain_dep"})," attr to a build\nrule. Let's consider the following made up rule that would simply call a\ncompiler on a source file:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# We assume that `FooToolchainInfo` is a struct with a `compiler` field.\ndef _foo_binary_impl(ctx: AnalysisContext) -> list[Provider]:\n    output = ctx.actions.declare_output(ctx.label.name)\n    ctx.actions.run(\n        [ctx.attrs._foo_toolchain[FooToolchainInfo].compiler, ctx.attrs.source, "-o", output.as_output()],\n        category = "foo_compile",\n    )\n    return [DefaultInfo(default_outputs = [output])]\n\nfoo_binary = rule(\n    impl = _foo_binary_impl,\n    attrs = {\n        "source": attrs.source(),\n        "_foo_toolchain": attrs.default_only(attrs.toolchain_dep(default = "toolchains//:foo", providers = [FooToolchainInfo])),\n    },\n)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"writing-a-hermetic-toolchain",children:"Writing a hermetic toolchain"}),"\n",(0,i.jsx)(n.p,{children:"One of the benefits of Buck2 is that it makes it quite easy to write a hermetic\ntoolchain, meaning one that does not look up tools in the environment, but\ninstead explicitly downloads and tracks them as part of the build."}),"\n",(0,i.jsx)(n.p,{children:"Doing is typically as follows:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Download the tools, e.g. using the\n",(0,i.jsx)(n.a,{href:"../../prelude/rules/core/http_archive",children:(0,i.jsx)(n.code,{children:"http_archive"})})," rule (see the\n",(0,i.jsx)(n.a,{href:"https://github.com/facebook/buck2/tree/main/prelude/toolchains/cxx/zig",children:"Zig-based C++ toolchain in the prelude"}),"\nas an example)."]}),"\n",(0,i.jsxs)(n.li,{children:["Expose those tools as ",(0,i.jsx)(n.a,{href:"../../api/build/RunInfo/",children:(0,i.jsx)(n.code,{children:"RunInfo"})})," providers in rules\nthat are referenced as ",(0,i.jsx)(n.a,{href:"/docs/rule_authors/configurations_by_example#exec-deps",children:"exec deps"})," in\na toolchain implementation."]}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}}}]);