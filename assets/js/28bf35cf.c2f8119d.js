"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[17258],{28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>c});var i=t(96540);const s={},a=i.createContext(s);function r(e){const n=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(a.Provider,{value:n},e.children)}},96733:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>c,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"rule_authors/dynamic_dependencies","title":"Dynamic Dependencies","description":"Dynamic dependencies allow a rule to use information that was not available when","source":"@site/../docs/rule_authors/dynamic_dependencies.md","sourceDirName":"rule_authors","slug":"/rule_authors/dynamic_dependencies","permalink":"/docs/rule_authors/dynamic_dependencies","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"dynamic_dependencies","title":"Dynamic Dependencies"},"sidebar":"main","previous":{"title":"Configuration Transitions","permalink":"/docs/rule_authors/configuration_transitions"},"next":{"title":"Anonymous Targets","permalink":"/docs/rule_authors/anon_targets"}}');var s=t(74848),a=t(28453),r=t(78191);const c={id:"dynamic_dependencies",title:"Dynamic Dependencies"},d=void 0,o={},l=[{value:"Implementation",id:"implementation",level:2}];function u(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["Dynamic dependencies allow a rule to use information that was not available when\nthe rule was first run at analysis time. Dynamic dependencies in Buck2 are\nimplemented using ",(0,s.jsx)(n.code,{children:"dynamic_output"})," and are restricted in their power compared to\nfully generic dynamic dependencies."]}),"\n",(0,s.jsxs)(n.p,{children:["A rule for a target is run with the attributes of the target, plus the providers\nof its attribute dependencies, which contain artifacts. Those values (but not\nthe artifact contents) are all available directly and immediately when running\nthe rule. The rule generates providers containing artifacts. Using\n",(0,s.jsx)(n.code,{children:"dynamic_output"}),", a rule can read the contents of an artifact to produce new\nartifacts and bind existing artifacts, which were already returned in providers."]}),"\n",(0,s.jsx)(n.p,{children:"Examples of rules requiring dynamic dependencies include:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Distributed ThinLTO, where the index file says what the dependencies are."}),"\n",(0,s.jsxs)(n.li,{children:["OCaml builds, where the dependencies between source files can only be obtained\nfrom running ",(0,s.jsx)(n.code,{children:"ocamldeps"}),"."]}),"\n",(0,s.jsx)(n.li,{children:"Erlang header files, where only a subset of the available headers are\naccessed, which can be determined by reading the source file."}),"\n",(0,s.jsx)(n.li,{children:"Erlang BEAM files, where some subset of BEAM files must be compiled in a given\norder, as they provide features like compiler plugins, but most can be\ncompiled in parallel."}),"\n"]}),"\n",(0,s.jsx)(r.FbInternalOnly,{children:(0,s.jsxs)(n.p,{children:["The original design document with discussion is available\n",(0,s.jsx)(n.a,{href:"https://docs.google.com/document/d/1K8RgvDMvdDFsLWAu0cehauJstHZaFe-7NeaAqWe4-L4/edit",children:"here"}),"."]})}),"\n",(0,s.jsx)(n.h2,{id:"implementation",children:"Implementation"}),"\n",(0,s.jsx)(n.p,{children:"Buck2 provides the following function:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"ctx.actions.dynamic_output(dynamic, inputs, outputs, lambda ctx: \u2026)\n"})}),"\n",(0,s.jsx)(n.p,{children:"The arguments are:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"dynamic"})," - a list of artifacts whose values will be available in the\nfunction. These will be built before the function is run."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"inputs"})," - a container of artifacts (",(0,s.jsx)(n.code,{children:"cmd_args"}),", list of artifacts, and so\non).","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["These inputs must include all the inputs that are referenced by the body of\nthe function argument, apart from those listed in ",(0,s.jsx)(n.code,{children:"dynamic"})," and ",(0,s.jsx)(n.code,{children:"outputs"}),":\nextra inputs may be passed that are not used."]}),"\n",(0,s.jsxs)(n.li,{children:["The inputs are used for ",(0,s.jsx)(n.code,{children:"buck2 aquery"})," functionality, but do not cause\nspeculative building. In fact, these inputs may form a cycle with other\n",(0,s.jsx)(n.code,{children:"dynamic_output"})," actions if they were all required."]}),"\n",(0,s.jsx)(n.li,{children:"In the future, it may be possible to not pass all the inputs if the repo is\nset to permissive mode, allowing a more powerful form of dynamic\ndependencies."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"outputs"})," - a list of unbound artifacts (created with ",(0,s.jsx)(n.code,{children:"declare_artifact"}),")\nwhich will be bound by the function."]}),"\n",(0,s.jsxs)(n.li,{children:["The function argument is given 3 arguments:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ctx"})," (context) - which is the same as that passed to the initial rule\nanalysis."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"outputs"})," - using one of the artifacts from the ",(0,s.jsx)(n.code,{children:"dynamic_output"}),"'s ",(0,s.jsx)(n.code,{children:"outputs"}),"\n(example usage: ",(0,s.jsx)(n.code,{children:"outputs[artifact_from_dynamic_output_outputs]"}),") gives an\nunbounded artifact. The function argument must use its ",(0,s.jsx)(n.code,{children:"outputs"})," argument to\nbind output artifacts, rather than reusing artifacts from the outputs passed\ninto ",(0,s.jsx)(n.code,{children:"dynamic_output"})," directly."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"artifacts"})," - using one of the artifacts from ",(0,s.jsx)(n.code,{children:"dynamic"})," (example usage:\n",(0,s.jsx)(n.code,{children:"artifacts[artifact_from_dynamic])"})," gives an artifact value containing the\nmethods ",(0,s.jsx)(n.code,{children:"read_string"}),", ",(0,s.jsx)(n.code,{children:"read_lines"}),", and ",(0,s.jsx)(n.code,{children:"read_json"})," to obtain the values\nfrom the disk in various formats. Anything too complex should be piped\nthrough a Python script for transformation to JSON."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["The function must call ",(0,s.jsx)(n.code,{children:"ctx.actions"})," (probably ",(0,s.jsx)(n.code,{children:"ctx.actions.run"}),") to bind all\noutputs. It can examine the values of the dynamic variables and depends on the\ninputs.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The function will usually be a ",(0,s.jsx)(n.code,{children:"def"}),", as ",(0,s.jsx)(n.code,{children:"lambda"})," in Starlark does not allow\nstatements, making it quite underpowered."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Following is an example of using the function to determine Erlang BEAM\ndependencies:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'def erlang(ctx):\n  beams = {}\n  for x in ctx.attr.srcs:\n    dep_file = ctx.actions.declare_output(x + ".out")\n    ctx.actions.run("erl", "-dump-output", x, dep_file.as_output())\n    beam_file = ctx.actions.declare_output(x + ".beam")\n    beams[x] = beam_file\n    def f(ctx, artifacts, outputs, x=x, dep_file=dep_file):\n      deps = artifacts[dep_file].read_lines()\n      ctx.actions.run(\n        "erl", "-comp", x,\n        [beams[d] for d in deps],\n        outputs[beams[x]].as_output()\n      )\n    ctx.actions.dynamic_output([dep_file], [x] + deps, [beam_file], f)\n  return [ErlangInfo(objects = beams.values())]\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The above code uses ",(0,s.jsx)(n.code,{children:"declare_output"})," for the ",(0,s.jsx)(n.code,{children:"beam_file"})," then binds it within\nthe function ",(0,s.jsx)(n.code,{children:"f"}),", after having read the ",(0,s.jsx)(n.code,{children:"dep_file"})," with ",(0,s.jsx)(n.code,{children:"read_lines"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}}}]);