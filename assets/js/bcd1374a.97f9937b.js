"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[59980],{28453:(e,n,o)=>{o.d(n,{R:()=>l,x:()=>s});var t=o(96540);const r={},i=t.createContext(r);function l(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),t.createElement(i.Provider,{value:n},e.children)}},65914:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>f,frontMatter:()=>s,metadata:()=>t,toc:()=>p});const t=JSON.parse('{"id":"api/build/DepOnlyIncompatibleInfo","title":"DepOnlyIncompatibleInfo","description":"A provider for defining custom soft error categories for dep-only incompatible targets. This can be used to get finer-grained data on whether it is safe to enable errorondeponlyincompatible for a given target.","source":"@site/../docs/api/build/DepOnlyIncompatibleInfo.md","sourceDirName":"api/build","slug":"/api/build/DepOnlyIncompatibleInfo","permalink":"/docs/api/build/DepOnlyIncompatibleInfo","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"apiSidebar","previous":{"title":"DefaultInfo","permalink":"/docs/api/build/DefaultInfo"},"next":{"title":"DepOnlyIncompatibleRollout","permalink":"/docs/api/build/DepOnlyIncompatibleRollout"}}');var r=o(74848),i=o(28453),l=o(56289);const s={},a="DepOnlyIncompatibleInfo",c={},p=[{value:"DepOnlyIncompatibleInfo.custom_soft_errors",id:"deponlyincompatibleinfocustom_soft_errors",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"deponlyincompatibleinfo",children:"DepOnlyIncompatibleInfo"})}),"\n",(0,r.jsxs)(n.p,{children:["A provider for defining custom soft error categories for dep-only incompatible targets. This can be used to get finer-grained data on whether it is safe to enable ",(0,r.jsx)(n.code,{children:"error_on_dep_only_incompatible"})," for a given target."]}),"\n",(0,r.jsx)(n.p,{children:"To use this, first define rule returning this provider."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def _impl(ctx: AnalysisContext) -> list[Provider]:\n   return [\n      DefaultInfo(),\n      DepOnlyIncompatibleInfo(custom_soft_errors = {\n         "dep_only_incompatible_foo": DepOnlyIncompatibleRollout(\n            target_patterns = ["root//foo/..."],\n            exclusions = ["root//foo/excluded/..."],\n         ),\n         "dep_only_incompatible_bar": DepOnlyIncompatibleRollout(\n            target_patterns = ["root//bar/..."],\n            exclusions = [],\n         ),\n      })\n   ]\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Then register a target of this rule in root .buckconfig under ",(0,r.jsx)(n.code,{children:"buck2.dep_only_incompatible_info"}),'\nbuckconfig key. Once registered, soft errors will be fired under category "dep_only_incompatible_foo"\nwhen a target in ',(0,r.jsx)(n.code,{children:"root//foo/..."})," is dep-only incompatible and likewise ",(0,r.jsx)(n.code,{children:"dep_only_incompatible_bar"})," for\na target in ",(0,r.jsx)(n.code,{children:"root//bar/..."}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"deponlyincompatibleinfocustom_soft_errors",children:"DepOnlyIncompatibleInfo.custom_soft_errors"}),"\n",(0,r.jsx)("pre",{class:"language-python",children:(0,r.jsxs)("code",{children:["DepOnlyIncompatibleInfo.custom_soft_errors: dict[",(0,r.jsx)(l.default,{to:"/docs/api/starlark/str",children:"str"}),", DepOnlyIncompatibleRollout]"]})})]})}function f(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);