"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[31441],{28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>c});var i=t(96540);const a={},o=i.createContext(a);function s(e){const n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),i.createElement(o.Provider,{value:n},e.children)}},35740:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>c,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"bxl/how_tos/how_to_run_actions_based_on_the_content_of_artifact","title":"How to run actions based on the content of artifact","description":"This guide shows you how to run actions that need to read artifact contents","source":"@site/../docs/bxl/how_tos/how_to_run_actions_based_on_the_content_of_artifact.md","sourceDirName":"bxl/how_tos","slug":"/bxl/how_tos/how_to_run_actions_based_on_the_content_of_artifact","permalink":"/docs/bxl/how_tos/how_to_run_actions_based_on_the_content_of_artifact","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"how_to_run_actions_based_on_the_content_of_artifact","title":"How to run actions based on the content of artifact"},"sidebar":"main","previous":{"title":"How to Catch Building Artifacts Errors","permalink":"/docs/bxl/how_tos/how_to_catch_building_artifacts_errors"},"next":{"title":"How to Use Target Universe in BXL","permalink":"/docs/bxl/how_tos/how_to_use_target_universe"}}');var a=t(74848),o=t(28453);const s={id:"how_to_run_actions_based_on_the_content_of_artifact",title:"How to run actions based on the content of artifact"},c=void 0,r={},d=[{value:"Steps",id:"steps",level:2},{value:"1. Identify and prepare your dynamic dependencies",id:"1-identify-and-prepare-your-dynamic-dependencies",level:3},{value:"2. Declare your output artifacts",id:"2-declare-your-output-artifacts",level:3},{value:"3. Define dynamic action",id:"3-define-dynamic-action",level:3},{value:"4. Define dynamic action impl function",id:"4-define-dynamic-action-impl-function",level:3},{value:"5. Use it in your bxl main function",id:"5-use-it-in-your-bxl-main-function",level:3},{value:"Limitations",id:"limitations",level:2},{value:"Examples",id:"examples",level:2}];function l(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:["This guide shows you how to run actions that need to read artifact contents\nfirst. You'll learn how to use\n",(0,a.jsx)(n.a,{href:"../../../rule_authors/dynamic_dependencies",children:"dynamic actions"})," to handle cases\nwhere you need to read a file's content first."]}),"\n",(0,a.jsx)(n.p,{children:"Common examples include:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Reading a dependency list file to determine compilation order"}),"\n",(0,a.jsx)(n.li,{children:"Processing an index file to find required dependencies"}),"\n",(0,a.jsx)(n.li,{children:"Parsing source files to discover header dependencies"}),"\n",(0,a.jsx)(n.li,{children:"Reading configuration files to determine build parameters"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"steps",children:"Steps"}),"\n",(0,a.jsx)(n.h3,{id:"1-identify-and-prepare-your-dynamic-dependencies",children:"1. Identify and prepare your dynamic dependencies"}),"\n",(0,a.jsx)(n.p,{children:'First, determine which artifacts you need to read before running your action.\nThese will be your "dynamic" artifacts. For example:'}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"A dependency file listing required inputs"}),"\n",(0,a.jsx)(n.li,{children:"A configuration file specifying build parameters"}),"\n",(0,a.jsx)(n.li,{children:"A index file listing the dependencies"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"You need to either use BXL APIs to obtain your artifacts from the build graph,\nor run actions to generate them."}),"\n",(0,a.jsx)(n.h3,{id:"2-declare-your-output-artifacts",children:"2. Declare your output artifacts"}),"\n",(0,a.jsx)(n.p,{children:"Declare the outputs that your dynamic action will produce:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'output_artifact = ctx.actions.declare_output("output.txt")\n'})}),"\n",(0,a.jsx)(n.h3,{id:"3-define-dynamic-action",children:"3. Define dynamic action"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'process_dynamic = bxl.dynamic_actions(\n    impl = process_dynamic_impl,\n    attrs = {\n        "file": dynattrs.artifact_value(),\n        "output": dynattrs.output(),\n        "my_data": dynattrs.value(MyData)\n    }\n)\n'})}),"\n",(0,a.jsxs)(n.p,{children:["It needs a impl function which we will define in step 4, and attributes that you\nwant to passed in the dynamic actions includes the artifacts you want to read,\noutput artifacts you declared in step 2, and any other values you want to pass\nin. You can using ",(0,a.jsx)(n.code,{children:"dynattrs.value([type])"})," to pass in any type. More details for\ndynamic attributes can be found ",(0,a.jsx)(n.a,{href:"../../../api/build/dynattrs",children:"here"})]}),"\n",(0,a.jsx)(n.h3,{id:"4-define-dynamic-action-impl-function",children:"4. Define dynamic action impl function"}),"\n",(0,a.jsx)(n.p,{children:"We need to declare all arguments defined in step3 and bxl context."}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Note:"})," The name of the first argument in the impl function must be ",(0,a.jsx)(n.code,{children:"bxl_ctx"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["We can read the ",(0,a.jsx)(n.code,{children:"file"})," content by ",(0,a.jsx)(n.code,{children:"read_string()"})," or ",(0,a.jsx)(n.code,{children:"read_json()"}),". Details can\nbe found ",(0,a.jsx)(n.a,{href:"../../../api/build/ArtifactValue/",children:"here"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def process_dynamic_impl(\n    bxl_ctx: bxl.Context,          # BXL context\n    file: ArtifactValue,           # Dynamic input to read\n    output: OutputArtifact,        # Output to write\n    my_data: MyData                # Additional args used in the dynamic action\n):\n    # Read content of dynamic artifact\n    content = file.read_string()\n\n    # Process content and run actions\n    processed_content = ...\n    bxl_actions = bxl_ctx.bxl_actions().actions\n    bxl_actions.write(output, processed_content)\n    return []\n"})}),"\n",(0,a.jsx)(n.h3,{id:"5-use-it-in-your-bxl-main-function",children:"5. Use it in your bxl main function"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'def _main(bxl_ctx: bxl.Context):\n    # Prepare input/output artifacts\n    input_file = ...\n    output = bxl_actions.declare_output("output.txt")\n\n    bxl_actions.dynamic_output_new(\n        process_dynamic(\n            dep_file = input_file,\n            output = output.as_output()\n        )\n    )\n\n    # Don\'t forgot ensure it to get the output to be materialized\n    ctx.output.ensure(output)\n'})}),"\n",(0,a.jsx)(n.h2,{id:"limitations",children:"Limitations"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"ctx.output"})," is not available from a dynamic lambda. This means you can\u2019t\nensure artifacts or print cached outputs within a dynamic lambda."]}),"\n",(0,a.jsx)(n.li,{children:"Error messages from skipping incompatible targets are only emitted to the\nconsole, and not cached in the stderr"}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"build()"})," is not available from a dynamic lambda"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"bxl_actions"})," in a dynamic lambda always inherits the execution platform\nresolution of the root/parent BXL.","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["The expected usage of ",(0,a.jsx)(n.code,{children:"bxl_actions"})," from within a dynamic lambda is to\ninstantiate it without any named parameters, but the ",(0,a.jsx)(n.code,{children:"exec_deps"})," and\n",(0,a.jsx)(n.code,{children:"toolchains"})," of the execution platform resolution are accessible, and return\nthe same values as the root/parent BXL"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.li,{children:"Profiling is not hooked up to dynamic BXL context"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,a.jsx)(n.p,{children:"Examples can be found at 'tests/core/bxl/test_dynamic_new_data/dynamic.bxl' of\nbuck2 repo folder."}),"\n",(0,a.jsxs)(n.p,{children:["Run such command at ",(0,a.jsx)(n.code,{children:"tests/core/bxl/test_dynamic_new_data/"})," to run the example\nbxl script"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sh",children:"buck2 bxl dynamic.bxl:basic\n"})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}}}]);