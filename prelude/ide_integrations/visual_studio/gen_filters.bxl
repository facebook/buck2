# Copyright (c) Meta Platforms, Inc. and affiliates.
#
# This source code is licensed under both the MIT license found in the
# LICENSE-MIT file in the root directory of this source tree and the Apache
# License, Version 2.0 found in the LICENSE-APACHE file in the root directory
# of this source tree.

load("get_attrs.bxl", "get_attrs")
load("get_vs_settings.bxl", "get_vs_settings")
load("utils.bxl", "dedupe_by_value", "dirname", "get_project_file_path", "h")

def _get_common_directory(paths) -> str:
    # handle single file case separately, otherwise it will return the full path
    if len(paths) == 1:
        return paths[0].rsplit("\\", 2)[0] + "\\"

    components = [path.split("\\") for path in paths]
    common_prefix = []
    for component_list in zip(*components):
        if len(set(component_list)) == 1:
            common_prefix.append(component_list[0])
        else:
            break

    # Remove the last level of common directory so that there's always something in the filters file
    if len(common_prefix) != 0:
        common_prefix.pop()
    return "\\".join(common_prefix) + ("\\" if len(common_prefix) != 0 else "")

def _get_file_filter_map(vs_settings: dict) -> dict:
    filters = {}
    files = vs_settings["Headers"] + vs_settings["Sources"].keys()

    # Handle paths that start with "buck-out"(exported files) separately since these file
    # don't have any common dir with the others and would make the hierarchy really nested
    # if processed together
    buck_out_paths = [path for path in files if path.startswith("buck-out")]
    buck_out_common_dir = _get_common_directory(buck_out_paths)
    for file in buck_out_paths:
        # Add a "generated_files" folder so that the files don't get mixed up with the others
        filters[file] = "\\".join(["generated_files", dirname(file[len(buck_out_common_dir):], "\\")])

    non_buck_out_paths = [path for path in files if not path.startswith("buck-out")]
    non_buck_out_common_dir = _get_common_directory(non_buck_out_paths)
    for file in non_buck_out_paths:
        filters[file] = dirname(file[len(non_buck_out_common_dir):], "\\")
    return filters

def _get_filter_list(file_filter_map: dict) -> list:
    """
    All levels of directory need to defined as filters
    e.g. To define a filter "include\\npc\\AI\\Attention", we need to define
    ["include", "include\\npc", "include\\npc\\AI", "include\\npc\\AI\\Attention"]
    """
    filters = []
    for filter in file_filter_map.values():
        components = filter.split("\\")
        current_path = ""
        for component in components:
            if current_path:
                current_path += "\\" + component
            else:
                current_path = component
            filters.append(current_path)
    return dedupe_by_value(filters)

def gen_filters(vs_settings: dict):
    filters_map = _get_file_filter_map(vs_settings)
    filters_list = _get_filter_list(filters_map)
    content = cmd_args(
        """<?xml version="1.0" encoding="utf-8"?>""",
        """<Project ToolsVersion="17.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">""",
        h(
            "ItemGroup",
            [
                h("Filter", None, {"Include": filter}, indent_level = 2)
                for filter in filters_list
            ],
            {
                "Label": "Filters",
            },
            indent_level = 1,
        ),
        h(
            "ItemGroup",
            [
                h(
                    "ClCompile",
                    [h("Filter", filters_map[file], indent_level = 3)],
                    {"Include": "$(RepoRoot)\\" + file},
                    indent_level = 2,
                )
                for file in vs_settings["Sources"]
            ],
            {
                "Label": "Sources",
            },
            indent_level = 1,
        ),
        h(
            "ItemGroup",
            [
                h(
                    "ClInclude",
                    [h("Filter", filters_map[file], indent_level = 3)],
                    {"Include": "$(RepoRoot)\\" + file},
                    indent_level = 2,
                )
                for file in vs_settings["Headers"]
            ],
            {
                "Label": "Headers",
            },
            indent_level = 1,
        ),
        """</Project>""",
        delimiter = "\n",
    )
    return content

def _main(bxl_ctx):
    target_label = bxl_ctx.cli_args.target
    target_node = bxl_ctx.configured_targets(target_label)
    actions = bxl_ctx.bxl_actions().actions
    attrs = get_attrs(target_node, bxl_ctx)
    attrs_outfile = actions.write_json(get_project_file_path(target_node.label, ".json"), attrs)
    filters_artifact = actions.declare_output(get_project_file_path(target_node.label, ".vcxproj.filters"))

    def f(ctx, artifacts, outputs, attrs_outfile = attrs_outfile, filters_artifact = filters_artifact, target = target_node, cli_args = bxl_ctx.cli_args, buck_root = bxl_ctx.root()):
        attrs_input = artifacts[attrs_outfile].read_json()
        vs_settings = get_vs_settings(target, attrs_input, {}, cli_args, buck_root, ctx)
        content = gen_filters(vs_settings)
        ctx.bxl_actions().actions.write(outputs[filters_artifact].as_output(), content, allow_args = True)

    actions.dynamic_output(
        dynamic = [attrs_outfile],
        inputs = [],
        outputs = [
            filters_artifact.as_output(),
        ],
        f = f,
    )
    bxl_ctx.output.print(bxl_ctx.output.ensure(filters_artifact))

main = bxl_main(
    impl = _main,
    cli_args = {
        "debug_settings": cli_args.option(cli_args.json()),  # target label => debug_settings.
        "extra_buck_options": cli_args.list(cli_args.string(), default = []),
        "immediate_buck_options": cli_args.list(cli_args.string(), default = []),
        "log_level": cli_args.int(default = 30),
        "mode_files": cli_args.list(cli_args.string(), default = ["fbsource//arvr/mode/win/dev"]),
        "mode_hashes": cli_args.option(cli_args.json()),  # mode => configuration hash.
        "target": cli_args.target_label(),
    },
)
