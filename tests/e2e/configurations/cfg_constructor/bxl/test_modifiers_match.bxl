# Copyright (c) Meta Platforms, Inc. and affiliates.
#
# This source code is licensed under both the MIT license found in the
# LICENSE-MIT file in the root directory of this source tree and the Apache
# License, Version 2.0 found in the LICENSE-APACHE file in the root directory
# of this source tree.

load("@prelude//:asserts.bzl", "asserts")
load("@prelude//cfg/modifier:common.bzl", "resolve_modifier")
load("@prelude//cfg/modifier:types.bzl", "ModifiersMatchInfo")
load(":util.bxl", "TestRefs", "get_test_refs")

# These tests run `cfg_constructor_pre_constraint_analysis` and `cfg_constructor_post_constraint_analysis` with test arguments
# and check if they return the expected PlatformInfo. They act like unit tests except for the fact that they use certain
# constraint targets from the repo (listed below), which requires running from within fbsource.
# TODO(scottcao): Make this test runnable as isolated test.

def test_resolve_constraint_value_modifier(
        test_refs: TestRefs):
    cfg = test_refs.make_cfg(["ovr_config//os/constraints:macos", "ovr_config//cpu/constraints:arm64"])
    asan_constraint = test_refs.get("ovr_config//build_mode/constraints:asan")[ConstraintValueInfo]
    resolved_modifier = resolve_modifier(
        cfg = cfg,
        modifier = asan_constraint,
    )
    asserts.equals(asan_constraint, resolved_modifier)

def test_resolve_modifiers_match_with_constraint_value_keys(
        test_refs: TestRefs):
    modifier = {
        "ovr_config//os/constraints:linux": {
            "DEFAULT": "ovr_config//build_mode/constraints:no-san",
            "ovr_config//cpu/constraints:x86_64": "ovr_config//build_mode/constraints:asan",
        },
        "ovr_config//os/constraints:windows": {
            # These are fairly contrived match since it only contains DEFAULT
            "DEFAULT": {
                "DEFAULT": {
                    "ovr_config//cpu/constraints:x86_64": "ovr_config//build_mode/constraints:tsan",
                },
            },
        },
    }
    modifier_info = test_refs.get_modifier_info(modifier)
    linux_x86_64 = test_refs.make_cfg(["ovr_config//os/constraints:linux", "ovr_config//cpu/constraints:x86_64"])
    linux_arm64 = test_refs.make_cfg(["ovr_config//os/constraints:linux", "ovr_config//cpu/constraints:arm64"])
    macos_x86_64 = test_refs.make_cfg(["ovr_config//os/constraints:macos", "ovr_config//cpu/constraints:x86_64"])
    macos_arm64 = test_refs.make_cfg(["ovr_config//os/constraints:macos", "ovr_config//cpu/constraints:arm64"])
    windows_x86_64 = test_refs.make_cfg(["ovr_config//os/constraints:windows", "ovr_config//cpu/constraints:x86_64"])
    windows_arm64 = test_refs.make_cfg(["ovr_config//os/constraints:windows", "ovr_config//cpu/constraints:arm64"])
    asserts.equals(test_refs.get("ovr_config//build_mode/constraints:asan")[ConstraintValueInfo], resolve_modifier(linux_x86_64, modifier_info))
    asserts.equals(test_refs.get("ovr_config//build_mode/constraints:no-san")[ConstraintValueInfo], resolve_modifier(linux_arm64, modifier_info))
    asserts.equals(None, resolve_modifier(macos_x86_64, modifier_info))
    asserts.equals(None, resolve_modifier(macos_arm64, modifier_info))
    asserts.equals(test_refs.get("ovr_config//build_mode/constraints:tsan")[ConstraintValueInfo], resolve_modifier(windows_x86_64, modifier_info))
    asserts.equals(None, resolve_modifier(windows_arm64, modifier_info))

def test_resolve_modifiers_match_with_config_setting_keys(
        test_refs: TestRefs):
    modifier_info = ModifiersMatchInfo(
        selector = [
            (test_refs.make_cfg(["ovr_config//os/constraints:linux", "ovr_config//cpu/constraints:x86_64"]), test_refs.get("ovr_config//build_mode/constraints:asan")[ConstraintValueInfo]),
            (test_refs.make_cfg(["ovr_config//os/constraints:linux", "ovr_config//cpu/constraints:arm64"]), test_refs.get("ovr_config//build_mode/constraints:tsan")[ConstraintValueInfo]),
        ],
        default = test_refs.get("ovr_config//build_mode/constraints:no-san")[ConstraintValueInfo],
    )
    linux_x86_64 = test_refs.make_cfg(["ovr_config//os/constraints:linux", "ovr_config//cpu/constraints:x86_64"])
    linux_arm64 = test_refs.make_cfg(["ovr_config//os/constraints:linux", "ovr_config//cpu/constraints:arm64"])
    macos_x86_64 = test_refs.make_cfg(["ovr_config//os/constraints:macos", "ovr_config//cpu/constraints:x86_64"])
    macos_arm64 = test_refs.make_cfg(["ovr_config//os/constraints:macos", "ovr_config//cpu/constraints:arm64"])
    windows_x86_64 = test_refs.make_cfg(["ovr_config//os/constraints:windows", "ovr_config//cpu/constraints:x86_64"])
    windows_arm64 = test_refs.make_cfg(["ovr_config//os/constraints:windows", "ovr_config//cpu/constraints:arm64"])
    asserts.equals(test_refs.get("ovr_config//build_mode/constraints:asan")[ConstraintValueInfo], resolve_modifier(linux_x86_64, modifier_info))
    asserts.equals(test_refs.get("ovr_config//build_mode/constraints:tsan")[ConstraintValueInfo], resolve_modifier(linux_arm64, modifier_info))
    nosan_constraint = test_refs.get("ovr_config//build_mode/constraints:no-san")[ConstraintValueInfo]
    asserts.equals(nosan_constraint, resolve_modifier(macos_x86_64, modifier_info), resolve_modifier(macos_x86_64, modifier_info))
    asserts.equals(nosan_constraint, resolve_modifier(macos_arm64, modifier_info))
    asserts.equals(nosan_constraint, resolve_modifier(windows_x86_64, modifier_info))
    asserts.equals(nosan_constraint, resolve_modifier(windows_arm64, modifier_info))

def test_modifiers_match_resolve_first_matching_key(
        test_refs: TestRefs):
    cfg = test_refs.make_cfg(["ovr_config//os/constraints:linux", "ovr_config//cpu/constraints:x86_64"])
    linux_x86_64_match = test_refs.get_modifier_info({
        "ovr_config//cpu/constraints:x86_64": "ovr_config//build_mode/constraints:tsan",
        "ovr_config//os/constraints:linux": "ovr_config//build_mode/constraints:asan",
    })

    # buildifier: disable=unsorted-dict-items
    x86_64_linux_match = test_refs.get_modifier_info({
        "ovr_config//os/constraints:linux": "ovr_config//build_mode/constraints:asan",
        "ovr_config//cpu/constraints:x86_64": "ovr_config//build_mode/constraints:tsan",
    })
    asan_constraint = test_refs.get("ovr_config//build_mode/constraints:asan")[ConstraintValueInfo]
    tsan_constraint = test_refs.get("ovr_config//build_mode/constraints:tsan")[ConstraintValueInfo]
    asserts.equals(tsan_constraint, resolve_modifier(cfg, linux_x86_64_match))
    asserts.equals(asan_constraint, resolve_modifier(cfg, x86_64_linux_match))

def test_modifiers_match_with_none(test_refs: TestRefs):
    match = test_refs.get_modifier_info({
        "DEFAULT": "ovr_config//build_mode/constraints:tsan",
        "ovr_config//os/constraints:linux": None,
    })
    cfg = test_refs.make_cfg(["ovr_config//os/constraints:linux"])
    asserts.equals(None, resolve_modifier(cfg, match))
    cfg = test_refs.make_cfg(["ovr_config//os/constraints:windows"])
    asserts.equals(test_refs.get("ovr_config//build_mode/constraints:tsan")[ConstraintValueInfo], resolve_modifier(cfg, match))

def _impl(ctx: bxl.Context):
    test_refs = get_test_refs(ctx)

    test_resolve_modifiers_match_with_constraint_value_keys(test_refs)
    test_resolve_modifiers_match_with_config_setting_keys(test_refs)
    test_modifiers_match_resolve_first_matching_key(test_refs)
    test_modifiers_match_with_none(test_refs)

test = bxl_main(
    cli_args = {},
    impl = _impl,
)
