"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[83648],{20799:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>c,default:()=>d,frontMatter:()=>o,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"rule_authors/string_parameter_macros","title":"String parameter macros","description":"Many rule attributes (the ones with type attrs.arg) support expanding","source":"@site/../docs/rule_authors/string_parameter_macros.md","sourceDirName":"rule_authors","slug":"/rule_authors/string_parameter_macros","permalink":"/docs/rule_authors/string_parameter_macros","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"string_parameter_macros","title":"String parameter macros"},"sidebar":"main","previous":{"title":"Dep Files","permalink":"/docs/rule_authors/dep_files"},"next":{"title":"Why BXL","permalink":"/docs/bxl/"}}');var n=a(74848),s=a(28453);const o={id:"string_parameter_macros",title:"String parameter macros"},c="String parameter macros",i={},l=[{value:"<code>$(location //path/to:target)</code>",id:"location-pathtotarget",level:2},{value:"<code>$(location_exec //path/to:target)</code>",id:"location_exec-pathtotarget",level:2},{value:"<code>$(source relative/path/to/source)</code>",id:"source-relativepathtosource",level:2},{value:"<code>$(exe //path/to:target)</code>",id:"exe-pathtotarget",level:2},{value:"<code>$(exe_target //path/to:target)</code>",id:"exe_target-pathtotarget",level:2},{value:"<code>$(query_targets queryfunction(//path/to:target))</code>",id:"query_targets-queryfunctionpathtotarget",level:2},{value:"<code>$(query_outputs queryfunction(//path/to:target))</code>",id:"query_outputs-queryfunctionpathtotarget",level:2},{value:"<code>$(query_targets_and_outputs [separator] queryfunction(//path/to:target))</code>",id:"query_targets_and_outputs-separator-queryfunctionpathtotarget",level:2},{value:"<code>$(classpath //path/to:target)</code>",id:"classpath-pathtotarget",level:2}];function h(e){const t={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"string-parameter-macros",children:"String parameter macros"})}),"\n",(0,n.jsxs)(t.p,{children:["Many rule attributes (the ones with type ",(0,n.jsx)(t.code,{children:"attrs.arg"}),") support expanding\nreferences to other rules using a mechanism called string parameter macros. All\nexpanded build rules are automatically added as dependencies."]}),"\n",(0,n.jsxs)(t.p,{children:["Note that the paths returned by these macros are ",(0,n.jsx)(t.em,{children:"relative"})," paths. Using\nrelative paths ensures that your builds are ",(0,n.jsx)(t.em,{children:"hermetic"}),", that is, they are\nreproducible across different machine environments."]}),"\n",(0,n.jsx)(t.h2,{id:"location-pathtotarget",children:(0,n.jsx)(t.code,{children:"$(location //path/to:target)"})}),"\n",(0,n.jsx)(t.p,{children:"Expands to the location of the output of the specified build rule. This means\nthat you can refer to the output without needing to be aware of how Buck is\nstoring data on the disk mid-build."}),"\n",(0,n.jsx)(t.p,{children:"For example:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-starlark",children:'cxx_test(\n    name = "my_test",\n    srcs = ["main.cpp"],\n    preprocessor_flags = ["-DTEST_DIR=$(location :test_dir)"],\n)\n\nfilegroup(\n    name = "test_dir",\n    srcs = [\n        "test_files/foo.json",\n        "test_files/bar.toml",\n    ],\n)\n'})}),"\n",(0,n.jsx)(t.h2,{id:"location_exec-pathtotarget",children:(0,n.jsx)(t.code,{children:"$(location_exec //path/to:target)"})}),"\n",(0,n.jsxs)(t.p,{children:["Identical to ",(0,n.jsx)(t.code,{children:"$(location //path/to:target)"}),", but the configuration is\ntransitioned to the execution platform. This can be useful when using ",(0,n.jsx)(t.code,{children:"genrule"}),"\nto wrap another build system with buck."]}),"\n",(0,n.jsx)(t.h2,{id:"source-relativepathtosource",children:(0,n.jsx)(t.code,{children:"$(source relative/path/to/source)"})}),"\n",(0,n.jsxs)(t.p,{children:["Expands to the location of the specified source. The difference with using\n",(0,n.jsx)(t.code,{children:"$(location path/to:export_file_target)"})," is that the path points to the file in\nthe source tree, rather than a copy or symlink in ",(0,n.jsx)(t.code,{children:"buck-out"}),"."]}),"\n",(0,n.jsx)(t.p,{children:"For example:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-starlark",children:'cxx_test(\n    name = "my_test",\n    srcs = ["main.cpp"],\n    preprocessor_flags = ["-DMY_SOURCE_FILE=$(source path/to/my_source_file)"],\n)\n'})}),"\n",(0,n.jsx)(t.h2,{id:"exe-pathtotarget",children:(0,n.jsx)(t.code,{children:"$(exe //path/to:target)"})}),"\n",(0,n.jsx)(t.p,{children:"Expands a build rule that results in an executable to the commands necessary to\nrun that executable as part of the build."}),"\n",(0,n.jsxs)(t.p,{children:["For example, a ",(0,n.jsx)(t.code,{children:"java_binary()"})," might expand to a call to\n",(0,n.jsx)(t.code,{children:"java -jar path/to/target.jar"}),". Files that are executable (perhaps generated by\na ",(0,n.jsx)(t.code,{children:"genrule()"}),") are also expanded."]}),"\n",(0,n.jsx)(t.p,{children:"If the build rule does not generate an executable output, then an exception is\nthrown and the build breaks."}),"\n",(0,n.jsxs)(t.p,{children:["If the ",(0,n.jsx)(t.code,{children:"$(exe my_dependency)"})," dependency should actually be built with the\ntarget platform, use ",(0,n.jsx)(t.code,{children:"$(exe_target my_dependency)"})," instead, which will stick to\nthe same platform as the target."]}),"\n",(0,n.jsx)(t.h2,{id:"exe_target-pathtotarget",children:(0,n.jsx)(t.code,{children:"$(exe_target //path/to:target)"})}),"\n",(0,n.jsxs)(t.p,{children:["Identical to ",(0,n.jsx)(t.code,{children:"$(exe //path/to:target)"}),", except that the target is built using\nthe target platform, rather than the execution platform."]}),"\n",(0,n.jsx)(t.p,{children:"This is for example useful to get the paths to executables to be run as part of\ntests. For example:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-starlark",children:'sh_test(\n    name = "my_test",\n    args = [\n        "$(exe_target //path/to:target_to_test)",\n    ],\n    # `my_test.sh` takes a single argument, which is the path to an executable\n    # to test.\n    test = "my_test.sh",\n    visibility = ["//risk/tap_enricher/..."],\n)\n'})}),"\n",(0,n.jsx)(t.h2,{id:"query_targets-queryfunctionpathtotarget",children:(0,n.jsx)(t.code,{children:"$(query_targets queryfunction(//path/to:target))"})}),"\n",(0,n.jsx)(t.p,{children:"Runs a query on the given target and replaces the macro with the matching\ntargets."}),"\n",(0,n.jsx)(t.p,{children:"For example:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-starlark",children:'my_rule(\n    name = "example",\n    # Will be replaced by all dependencies of `some_target`.\n    foo = "$(query_targets deps(:some_target))"\n)\n'})}),"\n",(0,n.jsx)(t.h2,{id:"query_outputs-queryfunctionpathtotarget",children:(0,n.jsx)(t.code,{children:"$(query_outputs queryfunction(//path/to:target))"})}),"\n",(0,n.jsx)(t.p,{children:"Runs a query on the given target and replaces the macro with the outputs of the\nmatching targets."}),"\n",(0,n.jsx)(t.p,{children:"For example:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-starlark",children:'my_rule(\n    name = "example",\n    # Will be replaced by the outputs of all dependencies of `some_target`.\n    foo = "$(query_outputs deps(:some_target))"\n)\n'})}),"\n",(0,n.jsx)(t.h2,{id:"query_targets_and_outputs-separator-queryfunctionpathtotarget",children:(0,n.jsx)(t.code,{children:"$(query_targets_and_outputs [separator] queryfunction(//path/to:target))"})}),"\n",(0,n.jsxs)(t.p,{children:["Runs a query on the given target and replaces the macro with matching targets\nand their outputs, which are separated by an optional ",(0,n.jsx)(t.code,{children:"separator"})," (defaults to a\nspace)."]}),"\n",(0,n.jsx)(t.p,{children:"For example:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-starlark",children:'my_rule(\n    name = "example",\n    # Will be replaced by the space-separated dependencies of `some_target`, as\n    # well as their outputs.\n    foo = "$(query_targets_and_outputs deps(:some_target))"\n)\n'})}),"\n",(0,n.jsx)(t.h2,{id:"classpath-pathtotarget",children:(0,n.jsx)(t.code,{children:"$(classpath //path/to:target)"})}),"\n",(0,n.jsx)(t.p,{children:"Expands to the transitive classpath of the specified build rule, provided that\nthe rule has a Java classpath. If the rule does not have (or contribute to) a\nclasspath, then an exception is thrown and the build breaks."})]})}function d(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},28453:(e,t,a)=>{a.d(t,{R:()=>o,x:()=>c});var r=a(96540);const n={},s=r.createContext(n);function o(e){const t=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);