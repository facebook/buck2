commands:
  print_versions:
    description: Version Info
    steps:
      - run:
          name: Version Info
          command: |
            rustup show
            rustc --version
            cargo --version
            rustup --version
            python3 --version

  init_opam:
    description: Init Opam
    steps:
      - run:
          name: Init opam
          command: |
            opam init --disable-sandboxing -y
            opam install menhir ppxlib -y
      - run:
          name: OCaml Configuration Info
          command: |
            eval $(opam env --switch=default)
            env | grep OPAM_SWITCH_PREFIX
            ocamlopt.opt -config

  setup_linux_env:
    description: Setup env for Linux
    steps:
      - run: sudo apt-get update
      - run: sudo apt-get install libssl-dev cmake clang lld opam
      - run:
          # the xlarge linux resource class has 8 CPUs, limit the number of jobs to 6 to avoid running out of resources
          name: "Set CARGO_BUILD_JOBS=6 to limit the number of CPUs used"
          command: echo 'export CARGO_BUILD_JOBS="6"' >> "$BASH_ENV"
      - print_versions

  setup_macos_env:
    description: Setup env for macOS
    steps:
      - run:
          name: Install Rustup
          command: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
      - run:
          name: Brew install
          command: |
            brew install cmake coreutils opam llvm protobuf
            # TODO: Remove once non intel macos platform is supported on https://github.com/stepancheg/rust-protoc-bin-vendored/
            echo 'export BUCK2_BUILD_PROTOC=/opt/homebrew/opt/protobuf/bin/protoc' >> "$BASH_ENV"
            echo 'export BUCK2_BUILD_PROTOC_INCLUDE=/opt/homebrew/opt/protobuf/include' >> "$BASH_ENV"
      - run:
          # the xlarge linux resource class has 8 CPUs, limit the number of jobs to 6 to avoid running out of resources
          name: "Set CARGO_BUILD_JOBS=6 to limit the number of CPUs used"
          command: echo 'export CARGO_BUILD_JOBS="6"' >> "$BASH_ENV"
      - run:
          name: "Add LLVM to PATH"
          command: echo 'export PATH=/usr/local/opt/llvm/bin:"$PATH"' >> "$BASH_ENV"
      - print_versions

  setup_windows_env:
    description: Setup env for Windows
    steps:
      - run:
          # Use Rust toolchain installed by Rustup and uninstall default one.
          name: Install Rustup
          command: |
            choco uninstall -y rust
            choco install -y rustup.install
            write-output "[net]`ngit-fetch-with-cli = true" | out-file -append -encoding utf8 $Env:USERPROFILE/.cargo/config.toml
            type $Env:USERPROFILE/.cargo/config.toml
      - run:
          name: Create python3 symlink
          command: |
            New-Item -ItemType SymbolicLink -Path C:\ProgramData\chocolatey\bin\python3.exe -Target $(Get-Command python).Source
      - run:
          name: Write Powershell profile
          command: |
            $psProfileContent = @'
            $vsPath = & "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe" -latest -requires Microsoft.VisualStudio.Component.VC.Llvm.Clang -property installationPath
            $llvmPath = Join-Path $vsPath "VC\Tools\Llvm\x64\bin"
            $env:PATH = "$env:USERPROFILE\.cargo\bin;$llvmPath;" + $env:PATH
            $env:TEMP = "$env:USERPROFILE\temp"
            $env:TMP = $env:TEMP
            '@
            Add-Content "$PsHome\profile.ps1" $psProfileContent
            New-Item -ItemType Directory -Path "$env:USERPROFILE\temp"
      - print_versions

  setup_reindeer:
    description: Install Reindeer
    steps:
      - run:
          name: Install Reindeer
          command: |
            cargo install --locked --git https://github.com/facebookincubator/reindeer reindeer
            reindeer --third-party-dir shim/third-party/rust buckify

  build_debug:
    description: Build buck2 binary (debug)
    steps:
      - run:
          name: Build buck2 binary (debug)
          command: |
            mkdir /tmp/artifacts
            cargo build --bin=buck2 -Z unstable-options --out-dir=/tmp/artifacts

  build_release:
    description: Build buck2 binary (release)
    steps:
      - run:
          name: Build buck2 binary (release)
          command: |
            mkdir /tmp/artifacts
            cargo build --bin=buck2 --release -Z unstable-options --out-dir=/tmp/artifacts

  run_test_py:
    description: Run test.py
    steps:
      - run:
          name: Run test.py
          command: python3 test.py --ci --git --buck2=/tmp/artifacts/buck2

  build_bootstrap:
    description: Build `buck2` with `buck2`
    steps:
      - run:
          name: Build `buck2` with `buck2`
          command: |
            /tmp/artifacts/buck2 build :buck2 -v 2

  build_example_no_prelude:
    description: Build example/no_prelude directory
    steps:
      - run:
          name: Build example/no_prelude directory
          command: |
            cd examples/no_prelude
            /tmp/artifacts/buck2 build //... -v 2


version: 2.1
orbs:
  win: circleci/windows@5.0
jobs:
  linux-build-and-test:
    description: |
      Build and test all with cargo for Linux
    docker:
      - image: cimg/rust:1.65.0
    resource_class: xlarge
    steps:
      - checkout
      - setup_linux_env
      - build_debug
      - run_test_py

  linux-build-examples:
    description: Build example projects
    docker:
      - image: cimg/rust:1.65.0
    resource_class: xlarge
    steps:
      - checkout
      - setup_linux_env
      - init_opam
      - build_release
      - run:
          name: Build example/prelude directory
          command: |
            cd examples/with_prelude
            /tmp/artifacts/buck2 init
            cp -r ../../prelude prelude
            # Additional setup for ocaml
            source ./setup.sh
            /tmp/artifacts/buck2 build //... -v 2
      - build_example_no_prelude
      - setup_reindeer
      - build_bootstrap

  macos-build-and-test:
    description: |
      Build all with cargo for macOS
    macos:
      xcode: "14.2.0"
    resource_class: macos.m1.medium.gen1
    steps:
      - checkout
      - setup_macos_env
      - build_debug
      - run_test_py

  macos-build-examples:
    description: Build example projects
    macos:
      xcode: "14.2.0"
    resource_class: macos.m1.medium.gen1
    steps:
      - checkout
      - setup_macos_env
      - init_opam
      - build_release
      - run:
          name: Build example/prelude directory
          command: |
            cd examples/with_prelude
            /tmp/artifacts/buck2 init
            cp -r ../../prelude prelude
            # Additional setup for ocaml
            source ./setup.sh
            /tmp/artifacts/buck2 build //... -v 2
      - build_example_no_prelude
      - setup_reindeer
      - build_bootstrap

  windows-build-and-test:
    description: |
      Build and test all with cargo for Windows
    executor:
      name: win/default
      size: "xlarge"
      shell: powershell.exe
    steps:
      - checkout
      - setup_windows_env
      - build_debug
      - run_test_py

  windows-build-examples:
    description: Build example projects
    executor:
      name: win/default
      size: "xlarge"
      shell: powershell.exe
    steps:
      - checkout
      - setup_windows_env
      - build_release
      - run:
          name: Build example/prelude directory
          command: |
            cd examples/with_prelude
            /tmp/artifacts/buck2 init
            copy-item -Path $env:CIRCLE_WORKING_DIRECTORY\prelude -Destination prelude -Recurse
            /tmp/artifacts/buck2 build //... -v 2
      - build_example_no_prelude
      - setup_reindeer
      - build_bootstrap

workflows:
  build-and-test:
    jobs:
      - linux-build-and-test
      - linux-build-examples
      - macos-build-and-test
      - macos-build-examples
      - windows-build-and-test
      - windows-build-examples
