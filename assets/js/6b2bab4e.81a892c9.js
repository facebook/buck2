"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[10523],{28453:(e,n,a)=>{a.d(n,{R:()=>r,x:()=>l});var i=a(96540);const s={},t=i.createContext(s);function r(e){const n=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(t.Provider,{value:n},e.children)}},70381:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"rule_authors/alias","title":"Alias","description":"The alias rule creates another name by which an existing rule can be referred","source":"@site/../docs/rule_authors/alias.md","sourceDirName":"rule_authors","slug":"/rule_authors/alias","permalink":"/docs/rule_authors/alias","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"alias","title":"Alias"},"sidebar":"main","previous":{"title":"Incremental Actions","permalink":"/docs/rule_authors/incremental_actions"},"next":{"title":"Local Resources For Tests Execution","permalink":"/docs/rule_authors/local_resources"}}');var s=a(74848),t=a(28453);const r={id:"alias",title:"Alias"},l=void 0,o={},d=[{value:"alias",id:"alias",level:2},{value:"versioned_alias",id:"versioned_alias",level:2},{value:"configured_alias",id:"configured_alias",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"alias"})," rule creates another name by which an existing rule can be referred\nto. There two variants: ",(0,s.jsx)(n.a,{href:"#versionedalias",children:"versioned_alias"})," and\n",(0,s.jsx)(n.a,{href:"#configuredalias",children:"configured_alias"}),", which are detailed below."]}),"\n",(0,s.jsx)(n.h2,{id:"alias",children:"alias"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"alias"})," rule has the following relevant attributes:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"name"})," - (required) what the ",(0,s.jsx)(n.code,{children:"actual"}),"'s label should be aliased as."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"actual"})," - (required) a target label."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"default_host_platform"})," - default host platform to use for the aliased target."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'filegroup(\n    name = "foo",\n    srcs = ["foo.txt"],\n)\n\nalias(\n    name = "other_foo",\n    actual = ":foo",\n)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"versioned_alias",children:"versioned_alias"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"versioned_alias"})," rule has the following relevant attributes:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"name"})," - (required) what the ",(0,s.jsx)(n.code,{children:"actual"}),"'s label should be aliased as."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"versions"})," - (required) a map of versions to their respective versioned target\nlabels."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Under the hood, any versioned parameters from the ",(0,s.jsx)(n.code,{children:"versioned_alias"}),"'s underlying\n",(0,s.jsx)(n.code,{children:"actual"})," are translated into their ",(0,s.jsx)(n.code,{children:"select"}),"-based equivalents, which rely on\nconstraint settings added to the target platform."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-Python",children:'versioned_alias(\n    name = "foo",\n    versions = {\n        # Target labels for foo versions\n        "1.1": "//path/to/lib/1.1:foo",\n        "1.2": "//path/to/lib/1.2:foo",\n    },\n    visibility = [\n        "PUBLIC",\n    ],\n)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"configured_alias",children:"configured_alias"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"configured_alias"})," rule has the following relevant attributes:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"name"})," - (required) what the ",(0,s.jsx)(n.code,{children:"actual"}),"'s label should be aliased as."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"configured_actual"})," - a configured label (mapped to a configured dep under the\nhood so the providers can be simply forwarded)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"fallback_actual"})," - if ",(0,s.jsx)(n.code,{children:"configured_actual"})," is not set, then fallback to this\nvalue, which is an unconfigured dep. If ",(0,s.jsx)(n.code,{children:"configured_actual"})," is not set, then\n",(0,s.jsx)(n.code,{children:"fallback_actual"})," must be set."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"platform"})," - the platform to build the aliased target with."]}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"actual"})," field is available for ",(0,s.jsx)(n.code,{children:"configured_alias"})," but it is not used under\nthe hood (to keep compatibility of output format with Buck1 queries)."]})}),"\n",(0,s.jsx)(n.p,{children:"Outside of simply pointing at another target, this target has one other useful\nfeature - it contains a platform argument."}),"\n",(0,s.jsx)(n.p,{children:"This makes the alias rule useful for two distinct scenarios:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Configuration switching during the build"}),". For example, there is an iOS\ntarget that needs to build a dependency for WatchOS so it can include it in\nthe bundle. This can be represented by the iOS target having a dependency on\nan alias of the Watch app with ",(0,s.jsx)(n.code,{children:'platform = "//the/desired/watchos:platform"'}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Using a target to refer to another in a non-standard configuration"}),". For\nexample, if you want to have an experimental version of an app, you could\nrepresent that as an alias with an 'experimental' configuration pointing to\nthe original target."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-Python",children:'configured_alias(\n    name = "foo-with-platform1",\n    actual = "//lib:foo",\n    platform = "//some_config:platform1",\n    visibility = ["PUBLIC"],\n)\n'})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);