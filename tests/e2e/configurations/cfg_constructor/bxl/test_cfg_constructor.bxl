# Copyright (c) Meta Platforms, Inc. and affiliates.
#
# This source code is licensed under both the MIT license found in the
# LICENSE-MIT file in the root directory of this source tree and the Apache
# License, Version 2.0 found in the LICENSE-APACHE file in the root directory
# of this source tree.

load("@fbcode//buck2/cfg/experimental:modifiers.bzl", "modifiers")
load("@prelude//:asserts.bzl", "asserts")
load("@prelude//cfg/modifier:cfg_constructor.bzl", "cfg_constructor_post_constraint_analysis", "cfg_constructor_pre_constraint_analysis")
load("@prelude//cfg/modifier:common.bzl", "tagged_modifiers_to_json")
load(
    "@prelude//cfg/modifier:types.bzl",
    "Modifier",
    "ModifierPackageLocation",
    "TaggedModifiers",
)
load(":util.bxl", "ALIASES", "TestRefs", "get_test_refs")

# These tests run `cfg_constructor_pre_constraint_analysis` and `cfg_constructor_post_constraint_analysis` with test arguments
# and check if they return the expected PlatformInfo. They act like unit tests except for the fact that they use certain
# constraint targets from the repo (listed below), which requires running from within fbsource.
# TODO(scottcao): Make this test runnable as isolated test.

def _run_cfg_constructor(
        legacy_platform: PlatformInfo | None,
        package_modifiers: list[TaggedModifiers],
        target_modifiers: list[Modifier],
        cli_modifiers: list[str],
        rule_name: str,
        test_refs: TestRefs) -> PlatformInfo:
    refs, params = cfg_constructor_pre_constraint_analysis(
        package_modifiers = [tagged_modifiers_to_json(tagged_modifiers) for tagged_modifiers in package_modifiers],
        legacy_platform = legacy_platform,
        target_modifiers = target_modifiers,
        cli_modifiers = cli_modifiers,
        rule_name = rule_name,
        aliases = ALIASES,
        extra_data = struct(),
    )
    refs = {ref: test_refs.get(ref) for ref in refs}
    return cfg_constructor_post_constraint_analysis(refs = refs, params = params)

def test_cfg_constructor_returns_legacy_platform_with_no_modifiers(
        test_refs: TestRefs):
    linux_cfg = test_refs.get("ovr_config//os/constraints:linux")[ConfigurationInfo]
    legacy_platform = PlatformInfo(label = "platform", configuration = linux_cfg)
    platform = _run_cfg_constructor(
        legacy_platform = legacy_platform,
        package_modifiers = [],
        target_modifiers = [],
        cli_modifiers = [],
        test_refs = test_refs,
        rule_name = "test_rule",
    )
    asserts.equals(legacy_platform.label, platform.label)
    asserts.equals(legacy_platform.configuration, platform.configuration)

def test_cfg_constructor_with_cli_modifiers(
        test_refs: TestRefs):
    constraints = ["ovr_config//os/constraints:linux", "ovr_config//cpu/constraints:x86_64"]
    platform = _run_cfg_constructor(
        legacy_platform = None,
        package_modifiers = [],
        target_modifiers = [],
        cli_modifiers = constraints,
        test_refs = test_refs,
        rule_name = "test_rule",
    )
    expected_cfg = test_refs.make_cfg(constraints)
    asserts.equals("cfg:linux-x86_64", platform.label)
    asserts.equals(expected_cfg, platform.configuration)

    # Test with aliases
    cli_modifiers = ["linux", "x86_64"]
    platform = _run_cfg_constructor(
        legacy_platform = None,
        package_modifiers = [],
        target_modifiers = [],
        cli_modifiers = cli_modifiers,
        test_refs = test_refs,
        rule_name = "test_rule",
    )
    asserts.equals("cfg:linux-x86_64", platform.label)
    asserts.equals(expected_cfg, platform.configuration)

def test_cfg_constructor_with_legacy_platform_and_cli_modifiers(
        test_refs: TestRefs):
    legacy_platform = PlatformInfo(
        label = "platform",
        configuration = test_refs.make_cfg(["ovr_config//os/constraints:linux", "ovr_config//cpu/constraints:x86_64"]),
    )
    platform = _run_cfg_constructor(
        legacy_platform = legacy_platform,
        package_modifiers = [],
        target_modifiers = [],
        cli_modifiers = ["ovr_config//os/constraints:macos"],
        test_refs = test_refs,
        rule_name = "test_rule",
    )
    expected_cfg = test_refs.make_cfg(
        [
            "ovr_config//os/constraints:macos",
            "ovr_config//cpu/constraints:x86_64",
        ],
    )
    asserts.equals("cfg:macos-x86_64", platform.label)
    asserts.equals(expected_cfg, platform.configuration)

def test_cfg_constructor_with_package_modifiers(
        test_refs: TestRefs):
    platform = _run_cfg_constructor(
        legacy_platform = None,
        package_modifiers = [
            TaggedModifiers(
                modifiers = ["ovr_config//cpu/constraints:x86_64", "ovr_config//os/constraints:linux"],
                location = ModifierPackageLocation(package_path = "fbcode//PACKAGE"),
                rule_name = None,
            ),
        ],
        target_modifiers = [],
        cli_modifiers = ["ovr_config//cpu/constraints:arm64"],
        test_refs = test_refs,
        rule_name = "test_rule",
    )
    expected_cfg = test_refs.make_cfg(
        ["ovr_config//os/constraints:linux", "ovr_config//cpu/constraints:arm64"],
    )
    asserts.equals(expected_cfg, platform.configuration)
    asserts.equals("cfg:linux-arm64", platform.label)

def test_cfg_constructor_with_all_modifiers(
        test_refs: TestRefs):
    platform = _run_cfg_constructor(
        legacy_platform = None,
        package_modifiers = [
            TaggedModifiers(
                modifiers = ["ovr_config//os/constraints:linux"],
                location = ModifierPackageLocation(package_path = "fbcode//PACKAGE"),
                rule_name = None,
            ),
        ],
        target_modifiers = ["ovr_config//cpu/constraints:x86_64", "ovr_config//os/constraints:macos"],
        cli_modifiers = ["ovr_config//cpu/constraints:arm64"],
        test_refs = test_refs,
        rule_name = "test_rule",
    )
    expected_cfg = test_refs.make_cfg(
        [
            "ovr_config//os/constraints:macos",
            "ovr_config//cpu/constraints:arm64",
        ],
    )
    asserts.equals(expected_cfg, platform.configuration)
    asserts.equals("cfg:macos-arm64", platform.label)

def test_cfg_constructor_with_modifiers_match(
        test_refs: TestRefs):
    package_modifiers = [
        TaggedModifiers(
            modifiers = [modifiers.match({
                "ovr_config//os/constraints:macos": "ovr_config//cpu/constraints:arm64",
            }), "ovr_config//os/constraints:linux"],
            location = ModifierPackageLocation(package_path = "fbcode//PACKAGE"),
            rule_name = None,
        ),
    ]
    target_modifiers = [
        modifiers.match({
            "ovr_config//os/constraints:linux": "ovr_config//cpu/constraints:x86_64",
        }),
    ]
    platform = _run_cfg_constructor(
        legacy_platform = None,
        package_modifiers = package_modifiers,
        target_modifiers = target_modifiers,
        cli_modifiers = ["ovr_config//os/constraints:macos"],
        test_refs = test_refs,
        rule_name = "test_rule",
    )
    expected_cfg = test_refs.make_cfg(["ovr_config//os/constraints:macos", "ovr_config//cpu/constraints:arm64"])
    asserts.equals(expected_cfg, platform.configuration)
    asserts.equals("cfg:macos-arm64", platform.label)

    platform = _run_cfg_constructor(
        legacy_platform = None,
        package_modifiers = package_modifiers,
        target_modifiers = target_modifiers,
        cli_modifiers = ["ovr_config//os/constraints:linux"],
        test_refs = test_refs,
        rule_name = "test_rule",
    )
    expected_cfg = test_refs.make_cfg(["ovr_config//os/constraints:linux", "ovr_config//cpu/constraints:x86_64"])
    asserts.equals(expected_cfg, platform.configuration)
    asserts.equals("cfg:linux-x86_64", platform.label)

def test_cfg_constructor_with_modifiers_match_on_legacy_platform(
        test_refs: TestRefs):
    legacy_platform = PlatformInfo(
        label = "platform",
        configuration = test_refs.make_cfg(["ovr_config//os/constraints:linux"]),
    )
    target_modifiers = [
        modifiers.match({
            "ovr_config//os/constraints:linux": "ovr_config//cpu/constraints:x86_64",
        }),
    ]

    platform = _run_cfg_constructor(
        legacy_platform = legacy_platform,
        package_modifiers = [],
        target_modifiers = target_modifiers,
        cli_modifiers = [],
        test_refs = test_refs,
        rule_name = "test_rule",
    )
    expected_cfg = test_refs.make_cfg(["ovr_config//os/constraints:linux", "ovr_config//cpu/constraints:x86_64"])
    asserts.equals(expected_cfg, platform.configuration)
    asserts.equals("cfg:linux-x86_64", platform.label)

    platform = _run_cfg_constructor(
        legacy_platform = legacy_platform,
        package_modifiers = [],
        target_modifiers = target_modifiers,
        cli_modifiers = ["ovr_config//os/constraints:macos"],
        test_refs = test_refs,
        rule_name = "test_rule",
    )
    expected_cfg = test_refs.make_cfg(["ovr_config//os/constraints:macos"])
    asserts.equals(expected_cfg, platform.configuration)
    asserts.equals("cfg:macos", platform.label)

def test_cfg_constructor_with_modifiers_match_ordering(
        test_refs: TestRefs):
    target_modifiers = [
        modifiers.match({
            "ovr_config//cpu/constraints:arm64": "ovr_config//build_mode/constraints:no-san",
            "ovr_config//cpu/constraints:x86_64": "ovr_config//build_mode/constraints:asan",
        }),
        modifiers.match({
            "ovr_config//os/constraints:linux": "ovr_config//cpu/constraints:x86_64",
            "ovr_config//os/constraints:macos": "ovr_config//cpu/constraints:arm64",
        }),
        modifiers.match({
            "DEFAULT": None,
            # Match on a constraint that does not appear in the platform
            "ovr_config//toolchain/clang/constraints:15": "ovr_config//cpu/constraints:x86_64",
        }),
    ]

    platform = _run_cfg_constructor(
        legacy_platform = None,
        package_modifiers = [],
        target_modifiers = target_modifiers,
        cli_modifiers = ["ovr_config//os/constraints:linux"],
        test_refs = test_refs,
        rule_name = "test_rule",
    )
    expected_cfg = test_refs.make_cfg([
        "ovr_config//os/constraints:linux",
        "ovr_config//cpu/constraints:x86_64",
        "ovr_config//build_mode/constraints:asan",
    ])
    asserts.equals(expected_cfg, platform.configuration)
    asserts.equals("cfg:linux-x86_64-asan", platform.label)

    platform = _run_cfg_constructor(
        legacy_platform = None,
        package_modifiers = [],
        target_modifiers = target_modifiers,
        cli_modifiers = ["ovr_config//os/constraints:macos"],
        test_refs = test_refs,
        rule_name = "test_rule",
    )
    expected_cfg = test_refs.make_cfg([
        "ovr_config//os/constraints:macos",
        "ovr_config//cpu/constraints:arm64",
        "ovr_config//build_mode/constraints:no-san",
    ])
    asserts.equals(expected_cfg, platform.configuration)
    asserts.equals("cfg:macos-arm64-no-san", platform.label)

def test_cfg_constructor_with_single_constraint_config_setting_modifier(
        test_refs: TestRefs):
    platform = _run_cfg_constructor(
        legacy_platform = None,
        package_modifiers = [
            TaggedModifiers(
                modifiers = ["ovr_config//os:linux"],
                location = ModifierPackageLocation(package_path = "fbcode//PACKAGE"),
                rule_name = None,
            ),
        ],
        target_modifiers = [],
        cli_modifiers = ["ovr_config//cpu:x86_64"],
        test_refs = test_refs,
        rule_name = "test_rule",
    )
    expected_cfg = test_refs.make_cfg(["ovr_config//os/constraints:linux", "ovr_config//cpu/constraints:x86_64"])
    asserts.equals(expected_cfg, platform.configuration)
    asserts.equals("cfg:linux-x86_64", platform.label)

def test_cfg_constructor_with_tagged_modifiers_per_rule1(
        test_refs: TestRefs):
    platform = _run_cfg_constructor(
        legacy_platform = None,
        package_modifiers = [
            TaggedModifiers(
                modifiers = ["ovr_config//cpu/constraints:arm64"],
                location = ModifierPackageLocation(package_path = "fbcode//PACKAGE"),
                rule_name = None,
            ),
            TaggedModifiers(
                modifiers = ["ovr_config//cpu/constraints:x86_64"],
                location = ModifierPackageLocation(package_path = "fbcode//PACKAGE"),
                rule_name = "python_binary",
            ),
        ],
        target_modifiers = [],
        cli_modifiers = [],
        test_refs = test_refs,
        rule_name = "test_rule",
    )
    expected_cfg = test_refs.make_cfg(
        ["ovr_config//cpu/constraints:arm64"],
    )
    asserts.equals(expected_cfg, platform.configuration)

def test_cfg_constructor_with_tagged_modifiers_per_rule2(
        test_refs: TestRefs):
    platform = _run_cfg_constructor(
        legacy_platform = None,
        package_modifiers = [
            TaggedModifiers(
                modifiers = ["ovr_config//cpu/constraints:arm64"],
                location = ModifierPackageLocation(package_path = "fbcode//PACKAGE"),
                rule_name = None,
            ),
            TaggedModifiers(
                modifiers = ["ovr_config//cpu/constraints:x86_64"],
                location = ModifierPackageLocation(package_path = "fbcode//PACKAGE"),
                rule_name = "python_binary",
            ),
        ],
        target_modifiers = [],
        cli_modifiers = [],
        test_refs = test_refs,
        rule_name = "python_binary",
    )
    expected_cfg = test_refs.make_cfg(
        ["ovr_config//cpu/constraints:x86_64"],
    )
    asserts.equals(expected_cfg, platform.configuration)

def test_cfg_constructor_with_multiple_modifier_alias(test_refs: TestRefs):
    platform = _run_cfg_constructor(
        legacy_platform = None,
        package_modifiers = [
            TaggedModifiers(
                modifiers = ["ovr_config//cpu/constraints:arm64"],
                location = ModifierPackageLocation(package_path = "fbcode//PACKAGE"),
                rule_name = None,
            ),
        ],
        target_modifiers = [],
        cli_modifiers = ["linux_x86_64"],
        test_refs = test_refs,
        rule_name = "python_binary",
    )
    expected_cfg = test_refs.make_cfg(
        ["ovr_config//os/constraints:linux", "ovr_config//cpu/constraints:x86_64"],
    )
    asserts.equals(expected_cfg, platform.configuration)

def _impl(ctx: bxl.Context):
    test_refs = get_test_refs(ctx)

    test_cfg_constructor_returns_legacy_platform_with_no_modifiers(
        test_refs,
    )
    test_cfg_constructor_with_cli_modifiers(test_refs)
    test_cfg_constructor_with_package_modifiers(test_refs)
    test_cfg_constructor_with_all_modifiers(test_refs)
    test_cfg_constructor_with_modifiers_match(test_refs)
    test_cfg_constructor_with_modifiers_match_on_legacy_platform(test_refs)
    test_cfg_constructor_with_modifiers_match_ordering(test_refs)
    test_cfg_constructor_with_single_constraint_config_setting_modifier(test_refs)
    test_cfg_constructor_with_tagged_modifiers_per_rule1(test_refs)
    test_cfg_constructor_with_tagged_modifiers_per_rule2(test_refs)
    test_cfg_constructor_with_multiple_modifier_alias(test_refs)

test = bxl_main(
    cli_args = {},
    impl = _impl,
)
