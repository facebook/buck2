"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[82585],{95563:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>p,contentTitle:()=>f,default:()=>m,frontMatter:()=>b,metadata:()=>t,toc:()=>x});const t=JSON.parse('{"id":"getting_started/tutorial_to_concepts","title":"From Tutorial to Concepts","description":"In the previous tutorials, we\u2019ve created buck files, defined a couple of buck","source":"@site/../docs/getting_started/core_concepts.md","sourceDirName":"getting_started","slug":"/getting_started/tutorial_to_concepts","permalink":"/docs/getting_started/tutorial_to_concepts","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"tutorial_to_concepts","title":"From Tutorial to Concepts"},"sidebar":"main","previous":{"title":"Tutorial: Adding tests","permalink":"/docs/getting_started/tutorial_adding_tests"},"next":{"title":"Key Concepts","permalink":"/docs/concepts/key_concepts"}}');var i=s(74848),r=s(28453),l=s(78191);s(96540);function c({label:e,caption:n,background:s,href:t}){return(0,i.jsxs)("div",{style:{display:"flex",flexDirection:"column",alignItems:"center"},children:[(0,i.jsx)("div",{style:{backgroundColor:s,color:"#000000",height:"2.5rem",lineHeight:"2.5rem",padding:"0 0.75rem",borderRadius:"4px",textAlign:"center",fontSize:"1.5rem"},children:e}),(0,i.jsx)("div",{style:{fontSize:"1rem",color:s,marginTop:"0.5rem",lineHeight:1},children:t?(0,i.jsx)("a",{href:t,style:{color:"inherit",textDecoration:"underline"},children:n}):n})]})}function a({symbol:e}){return(0,i.jsxs)("div",{style:{display:"flex",flexDirection:"column",alignItems:"center"},children:[(0,i.jsx)("div",{style:{marginTop:"0.5rem",fontSize:"1.5rem",lineHeight:1},children:e}),(0,i.jsx)("div",{style:{height:"2rem"}})]})}function o({cell_name:e,pkg_name:n,target_name:s,cell_href:t,pkg_href:r,target_href:l}){return(0,i.jsxs)("div",{style:{display:"flex",fontFamily:"sans-serif",gap:"0.5rem",alignItems:"flex-start"},children:[(0,i.jsx)(c,{label:e,caption:"Cell Name",background:"#9B82E5",href:t}),(0,i.jsx)(a,{symbol:"//"}),(0,i.jsx)(c,{label:n,caption:"Target Package",background:"#FFC74D",href:r}),(0,i.jsx)(a,{symbol:":"}),(0,i.jsx)(c,{label:s,caption:"Target Name",background:"#A0D995",href:l})]})}var d=s(8532),u=s(4386);function h({children:e}){const{colorMode:n}=(0,d.G)(),s="%%{init: {'theme':'default'}}%% \n\n"+e+("dark"===n?"\n\nlinkStyle default stroke:#ffffff":"");return(0,i.jsx)(u.A,{value:s})}const b={id:"tutorial_to_concepts",title:"From Tutorial to Concepts"},f=void 0,p={},x=[{value:"Understanding Target Labels",id:"understanding-target-labels",level:2},{value:"Cell",id:"cell",level:2},{value:"Tips:",id:"tips",level:4},{value:"Package",id:"package",level:2},{value:"Target name",id:"target-name",level:2},{value:"Buck File",id:"buck-file",level:2},{value:"Tips:",id:"tips-1",level:4},{value:"Visualizing Your Tutorial Project",id:"visualizing-your-tutorial-project",level:2},{value:"File Structure Overview",id:"file-structure-overview",level:3},{value:"From Files to Targets",id:"from-files-to-targets",level:3},{value:"The Complete Picture",id:"the-complete-picture",level:3},{value:"Load Function and Attributes",id:"load-function-and-attributes",level:2},{value:"Tips:",id:"tips-2",level:4},{value:"Dependencies and Dependency Graph",id:"dependencies-and-dependency-graph",level:2},{value:"Tips:",id:"tips-3",level:4},{value:"Buck Commands",id:"buck-commands",level:2},{value:"Tips:",id:"tips-4",level:4},{value:"Buck2 Command Flow",id:"buck2-command-flow",level:3},{value:"Console and Output",id:"console-and-output",level:2},{value:"Buck-out",id:"buck-out",level:2},{value:"Tips:",id:"tips-5",level:4},{value:"Buck UI",id:"buck-ui",level:2}];function g(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components},{FBInternalOnly:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("FBInternalOnly",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"In the previous tutorials, we\u2019ve created buck files, defined a couple of buck\ntargets and successfully built and ran the \u201cHello World\u201d rust binary and even\nwrote and ran a test. Great job done! Now, let\u2019s go through the journey again,\nweaving in the core concepts as we go along to see what gets involved during\nthis learning process."}),"\n",(0,i.jsx)(n.h2,{id:"understanding-target-labels",children:"Understanding Target Labels"}),"\n",(0,i.jsx)(n.p,{children:"This is one of the most important concepts to understand when using Buck2. It is\na precise way to identify any buildable unit in your codebase."}),"\n",(0,i.jsxs)(n.p,{children:["In the tutorials, you encoutered the following target label like\n",(0,i.jsxs)(n.a,{href:"../tutorial_adding_dependencies/#step-5-run-the-binary",children:[(0,i.jsxs)(l.FbInternalOnly,{children:[" ",(0,i.jsx)(n.code,{children:"fbcode//scripts/<unixname>/buck2_lab/greeter_bin:main"})," "]})," ",(0,i.jsxs)(l.OssOnly,{children:[" ",(0,i.jsx)(n.code,{children:"root//buck2_lab/greeter_bin:main"})," "]})]}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Here is the anatomy of a target label:"}),"\n",(0,i.jsx)(l.FbInternalOnly,{children:(0,i.jsx)(o,{cell_name:"fbcode",pkg_name:"scripts/<unixname>/buck2_lab/greeter_bin",target_name:"main",cell_href:"#cell",pkg_href:"#package",target_href:"#target-name"})}),"\n",(0,i.jsx)(l.OssOnly,{children:(0,i.jsx)(o,{cell_name:"root",pkg_name:"buck2_lab/greeter_bin",target_name:"main",cell_href:"#cell",pkg_href:"#package",target_href:"#target-name"})}),"\n",(0,i.jsx)(n.h2,{id:"cell",children:"Cell"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"../../concepts/key_concepts/#cells",children:"Cell"})," defines a directory tree of one or\nmore buck ",(0,i.jsx)(n.a,{href:"../../concepts/key_concepts/#packages",children:"packages"}),". The root of a buck\ncell contains a global configuration file called\n",(0,i.jsx)(n.a,{href:"../../concepts/buckconfig",children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:".buckconfig"})})}),"."]}),"\n",(0,i.jsxs)(l.FbInternalOnly,{children:[(0,i.jsx)(n.p,{children:"For the lab you just did, fbcode is the cell root where .buckconfig resides. If\nyou are developing in other projects like ARVR, android and ios, then fbsource\nis the buck cell root."}),(0,i.jsx)(n.h4,{id:"tips",children:"Tips:"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Do not modify .buckconfig and do not create .buckconfig without consulting\nbuck or devx team!"}),"\n",(0,i.jsx)(n.li,{children:"Be aware that buck does enforce package boundaries, so a source file only\nbelongs to its nearest BUCK file."}),"\n"]})]}),"\n",(0,i.jsxs)(n.p,{children:["You can run ",(0,i.jsx)(n.code,{children:"buck2 audit cell"})," to inspect the abs path of each cell root."]}),"\n",(0,i.jsx)(n.h2,{id:"package",children:"Package"}),"\n",(0,i.jsxs)(n.p,{children:["The existence of a ",(0,i.jsx)(n.a,{href:"#buck-file",children:"BUCK file"})," (",(0,l.isInternal)()?(0,i.jsx)("code",{children:"scripts/<unixname>/buck2_lab/greeter_bin/BUCK"}):(0,i.jsx)("code",{children:"buck2_lab/greeter_bin/BUCK"}),") defines a buck\n",(0,i.jsx)(n.a,{href:"../../concepts/key_concepts/#packages",children:"package"})," ",(0,l.isInternal)()?(0,i.jsx)("code",{children:"scripts/<unixname>/buck2_lab/greeter_bin"}):(0,i.jsx)("code",{children:"buck2_lab/greeter_bin"})," isn't just a directory. If a buck target\nuses the source file as input, that target is regarded as the ",(0,i.jsx)(n.strong,{children:"owner"})," of the\nsource."]}),"\n",(0,i.jsx)(n.h2,{id:"target-name",children:"Target name"}),"\n",(0,i.jsx)(n.p,{children:"The name of the target in the package. It is the name we defined in the BUCK\nfile."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'rust_binary(\n    name = "main",\n    srcs = ["main.rs"],\n    ...\n)\n'})}),"\n",(0,i.jsx)(n.p,{children:"It should be unique within the package."}),"\n",(0,i.jsx)(n.h2,{id:"buck-file",children:"Buck File"}),"\n",(0,i.jsxs)(n.p,{children:["In the lab, you\u2019ve already created three\n",(0,i.jsx)(n.a,{href:"../../concepts/build_file/",children:"build files"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"greeter_bin/BUCK"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"greeter_lib/BUCK"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"logging_lib/BUCK"})}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Although configurable, the name of the build file normally is just BUCK.\n",(0,i.jsxs)(l.FbInternalOnly,{children:[" Buck file within Meta could be ",(0,i.jsx)(n.code,{children:"BUCK"})," or ",(0,i.jsx)(n.code,{children:"TARGETS"})," (fbcode\nonly)"]})]}),"\n",(0,i.jsxs)(n.p,{children:["In these BUCK files, you\u2019ve written a couple of\n",(0,i.jsx)(n.a,{href:"../../concepts/build_target/",children:"buck targets"}),", ",(0,i.jsx)(n.code,{children:":main"}),", ",(0,i.jsx)(n.code,{children:":library"}),",\n",(0,i.jsx)(n.code,{children:":logging_lib"})," and ",(0,i.jsx)(n.code,{children:":test"}),". Buck targets are instances of\n",(0,i.jsx)(n.a,{href:"../../concepts/build_rule/",children:"build rules"}),", which defines how the target should\nbe built. For example, target ",":main"," is of rule type\n",(0,i.jsx)(n.a,{href:"../../prelude/rules/rust/rust_binary/",children:"rust_binary"}),", the output artifact will\nbe a binary that\u2019s runnable, while ",(0,i.jsx)(n.code,{children:":library"}),", ",(0,i.jsx)(n.code,{children:":logging_lib"})," are of rule type\n",(0,i.jsx)(n.a,{href:"../../prelude/rules/rust/rust_library/",children:"rust_library"}),", the output of which will\nbe a library that can be linked to the binary."]}),"\n",(0,i.jsxs)(n.p,{children:["Referring to buck targets in BUCK files and CLI commands need to follow a\nspecial ",(0,i.jsx)(n.a,{href:"../../concepts/target_pattern/",children:"target pattern"}),", which looks like:"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)("code",{children:["cell//path/to/dir",":target"]})," or ",(0,i.jsx)("code",{children:"cell//path/to/dir/..."})]}),"\n",(0,i.jsx)(n.p,{children:"you will soon become very familiar with these patterns during daily development."}),"\n",(0,i.jsx)(n.h4,{id:"tips-1",children:"Tips:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Buck targets can be either build rules or\n",(0,i.jsx)(n.a,{href:"https://buck.build/extending/macros.html",children:"macros"}),", which are\nwrappers/extensions around native build rules, macros are usually defined .bzl\nfiles. ",(0,i.jsxs)(l.FbInternalOnly,{children:[" The ",(0,i.jsx)(n.code,{children:"rust_binary"}),", ",(0,i.jsx)(n.code,{children:"rust_library"})," and ",(0,i.jsx)(n.code,{children:"rust_unittest"}),"\nused in the lab are actually fbcode macros, not native rulesas defined in this\ndoc. You may notice that when we run\n",(0,i.jsx)(n.a,{href:"../tutorial_first_build/#step-6-inspecting-your-target-optional",children:(0,i.jsx)(n.code,{children:"buck2 targets"})}),"\nthere are sevaral other targets except ",(0,i.jsx)(n.code,{children:":main"})," in the otuputs. These are\ndefined in macros. "]})]}),"\n",(0,i.jsxs)(n.li,{children:["Buck uses ",(0,i.jsx)(n.a,{href:"../../concepts/glossary/#starlark",children:"starlark"})," language which is a\ndialect of python, to define build rules and macros."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"visualizing-your-tutorial-project",children:"Visualizing Your Tutorial Project"}),"\n",(0,i.jsx)(n.p,{children:"Now that we understand the basic terminology, let's visualize what you built.\nWe'll start with the simple file structure, then explore how Buck2 interprets\nthese files as packages and targets."}),"\n",(0,i.jsx)(n.h3,{id:"file-structure-overview",children:"File Structure Overview"}),"\n",(0,i.jsxs)(n.p,{children:["Here's the complete project structure you built through the tutorials:\n",(0,i.jsxs)(l.FbInternalOnly,{children:[" For simplicity, we show ",(0,i.jsx)(n.code,{children:"logging_lib"})," as a subdirectory of\n",(0,i.jsx)(n.code,{children:"buck2_lab"})," in the diagram below. "]})]}),"\n",(0,i.jsx)(h,{children:"\ngraph TD\n  A[buck2_lab] --\x3e B[greeter_bin/]\n  A --\x3e C[greeter_lib/]\n  A --\x3e D[logging_lib/]\n\n  B --\x3e B1[BUCK]\n  B --\x3e B2[src/]\n  B2 --\x3e B3[main.rs]\n\n  C --\x3e C1[BUCK]\n  C --\x3e C2[src/]\n  C --\x3e C3[tests/]\n  C2 --\x3e C4[lib.rs]\n  C3 --\x3e C5[test.rs]\n\n  D --\x3e D1[BUCK]\n  D --\x3e D2[src/]\n  D2 --\x3e D3[lib.rs]\n\n  style A fill:#e1f5fe\n  style B fill:#f3e5f5\n  style C fill:#e8f5e8\n  style D fill:#fff3e0\n  style B1 fill:#ffcdd2\n  style C1 fill:#ffcdd2\n  style D1 fill:#ffcdd2\n\n"}),"\n",(0,i.jsx)(n.h3,{id:"from-files-to-targets",children:"From Files to Targets"}),"\n",(0,i.jsx)(n.p,{children:"Now that we understand packages and target concepts, let's see how your BUCK\nfiles define targets and their relationships:"}),"\n",(0,i.jsx)(h,{children:'\ngraph TD\n  A["greeter_bin/BUCK"] --\x3e A1@{ shape: circle, label: "**\ud83c\udfaf :main**</br> (rust_binary)"}\n  B["greeter_lib/BUCK"] --\x3e B1@{ shape: circle, label: "**\ud83c\udfaf :library** </br> (rust_library)"}\n  B --\x3e B2@{ shape: circle, label: "**\ud83c\udfaf :test** </br> (rust_test)"}\n  C["logging_lib/BUCK"] --\x3e C1@{ shape: circle, label: "**\ud83c\udfaf :logging_lib** </br> (rust_library)"}\n\n  A1 -.-> A2["srcs: [src/main.rs]"]\n  A1 -.-> A3["deps: [:library, :logging_lib]"]\n\n  B1 -.-> B3["srcs: [src/lib.rs]"]\n  B1 -.-> B4["visibility: [PUBLIC]"]\n  B1 -.-> B5["deps: [:logging_lib]"]\n\n  B2 -.-> B6["srcs: [tests/test.rs]"]\n  B2 -.-> B7["deps: [:library]"]\n\n  C1 -.-> C2["srcs: [src/lib.rs]"]\n  C1 -.-> C3["visibility: [PUBLIC]"]\n\n  style A fill:#f3e5f5\n  style B fill:#f1f8e9\n  style C fill:#fff3e0\n  style A1 fill:#e1bee7\n  style B1 fill:#c8e6c9\n  style B2 fill:#c8e6c9\n  style C1 fill:#ffe0b2\n\n'}),"\n",(0,i.jsx)(n.h3,{id:"the-complete-picture",children:"The Complete Picture"}),"\n",(0,i.jsx)(n.p,{children:"Finally, let's put it all together. This comprehensive diagram shows how your\nfile structure, Buck2 packages, targets, and dependencies all interconnect to\nform a cohesive build system:"}),"\n",(0,i.jsx)(h,{children:'\ngraph TD\n  A["\ud83d\udcc1 buck2_lab"] --\x3e B["\ud83d\udcc1 greeter_bin/<br/>(Package)"]\n  A --\x3e C["\ud83d\udcc1 greeter_lib/<br/>(Package)"]\n  A --\x3e D["\ud83d\udcc1 logging_lib/<br/>(Package)"]\n\n  %% greeter_bin package\n  B --\x3e B1["\ud83d\udcc4 BUCK"]\n  B --\x3e B2["\ud83d\udcc1 src/"]\n  B2 --\x3e B3["\ud83d\udcc4 main.rs"]\n  B1 -.-> B4(("\ud83c\udfaf **:main**<br/>(rust_binary)"))\n  B5@{ shape: braces, label: "srcs: main.rs<br/>deps: :library, :logging_lib"}\n\n\n  %% greeter_lib package\n  C --\x3e C1["\ud83d\udcc4 BUCK"]\n  C --\x3e C2["\ud83d\udcc1 src/"]\n  C --\x3e C3["\ud83d\udcc1 tests/"]\n  C2 --\x3e C4["\ud83d\udcc4 lib.rs"]\n  C3 --\x3e C5["\ud83d\udcc4 test.rs"]\n  C1 -.-> C6(("\ud83c\udfaf **:library**<br/>(rust_library)"))\n  C1 -.-> C7(("\ud83c\udfaf **:test**<br/>(rust_test)"))\n  C8@{ shape: braces, label: "srcs: lib.rs<br/>deps: :logging_lib<br/>visibility: PUBLIC"}\n  C9@{ shape: braces, label: "srcs: test.rs<br/>deps: :library"}\n\n  %% logging_lib package\n  D --\x3e D1["\ud83d\udcc4 BUCK"]\n  D --\x3e D2["\ud83d\udcc1 src/"]\n  D2 --\x3e D3["\ud83d\udcc4 lib.rs"]\n  D1 -.-> D4(("\ud83c\udfaf **:logging_lib**<br/>(rust_library)"))\n  D5@{ shape: braces, label: "srcs: lib.rs<br/>visibility: PUBLIC"}\n\n  %% Dependencies (shown with solid arrows)\n  B4 ==> C6\n  B4 ==> D4\n  C6 ==> D4\n  C7 ==> C6\n\n  subgraph SG1[" "]\n    B4\n    B5\n    B4 ~~~ B5\n  end\n\n  subgraph SG2[" "]\n    C6\n    C8\n    C6 ~~~ C8\n  end\n\n  subgraph SG3[" "]\n    C7\n    C9\n    C7 ~~~ C9\n  end\n\n  subgraph SG4[" "]\n    D4\n    D5\n    D4 ~~~ D5\n  end\n\n  %% Styling\n  style A fill:#e1f5fe,stroke:#01579b,stroke-width:3px\n  style B fill:#f3e5f5,stroke:#4a148c,stroke-width:2px\n  style C fill:#e8f5e8,stroke:#1b5e20,stroke-width:2px\n  style D fill:#fff3e0,stroke:#e65100,stroke-width:2px\n\n  style B1 fill:#ffcdd2,stroke:#c62828\n  style C1 fill:#ffcdd2,stroke:#c62828\n  style D1 fill:#ffcdd2,stroke:#c62828\n\n  style B4 fill:#bbdefb,stroke:#1565c0,stroke-width:2px\n  style C6 fill:#c8e6c9,stroke:#2e7d32,stroke-width:2px\n  style C7 fill:#c8e6c9,stroke:#2e7d32,stroke-width:2px\n  style D4 fill:#ffe0b2,stroke:#ef6c00,stroke-width:2px\n\n  classDef fileNode fill:#f5f5f5,stroke:#757575\n  classDef targetInfo fill:#fff9c4,stroke:#f57f17,stroke-width:1px\n  classDef mainSubgraph fill:#e3f2fd,stroke:#90caf9,stroke-width:1px\n  classDef librarySubgraph fill:#f1f8e9,stroke:#a5d6a7,stroke-width:1px\n  classDef testSubgraph fill:#f9fbe7,stroke:#c5e1a5,stroke-width:1px\n  classDef loggingSubgraph fill:#fff8e1,stroke:#ffcc80,stroke-width:1px\n\n  class B3,C4,C5,D3 fileNode\n  class B5,C8,C9,D5 targetInfo\n\n  %% Apply lighter colors to subgraphs corresponding to targets\n  style SG1 fill:#e3f2fd,stroke:#90caf9,stroke-width:1px\n  style SG2 fill:#f1f8e9,stroke:#a5d6a7,stroke-width:1px\n  style SG3 fill:#f9fbe7,stroke:#c5e1a5,stroke-width:1px\n  style SG4 fill:#fff8e1,stroke:#ffcc80,stroke-width:1px\n\n'}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Diagram Legend:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Dotted arrows"}),": Show how BUCK files define targets"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Thick arrows"}),": Show dependency relationships between targets"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Double circles"}),": Represent Buck2 targets with \ud83c\udfaf icon"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Curly braces"}),": Contain target attributes and configurations"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Subgraphs"}),": Group targets with their attributes"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"\ud83d\udcc1 Icons"}),": Represent directories and packages"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"\ud83d\udcc4 Icons"}),": Represent files (BUCK files and source files)"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"load-function-and-attributes",children:"Load Function and Attributes"}),"\n",(0,i.jsxs)(l.FbInternalOnly,{children:[(0,i.jsx)(n.p,{children:"You might have noticed  that the first line in the main BUCK file is a load function:"}),(0,i.jsxs)("code",{children:['load("@fbsource//tools/build_defs',":rust_binary",'.bzl", "rust_binary")']}),(0,i.jsxs)(n.p,{children:["Load imports the ",(0,i.jsx)("code",{children:"rust_binary"})," macro from a rust_binary.bzl file. You\ncan inspect the content of it under"]}),(0,i.jsx)("code",{children:"fbsource/tools/build_defs/fbcode_macros/build_defs/rust_binary.bzl "}),(0,i.jsx)(n.p,{children:"using the right rule/macro is the first step for a successful build."})]}),"\n",(0,i.jsx)(l.OssOnly,{children:(0,i.jsxs)(n.p,{children:["Some buck file starts with one or more load functions, which load macros from\n.bzl files for this buck file to use, this is similar to load or include\nfunctions in other programming languages, load function takes the following\nsyntax: ",(0,i.jsxs)("code",{children:['load("@cell//path/to/bzl',":some_bzl",'.bzl", "some_macro")']})]})}),"\n",(0,i.jsxs)(n.p,{children:["Each buck target has a set of attributes, which provide powerful ways to define\nand customize how the build should be done, you can inspect the\n",(0,i.jsx)(n.a,{href:"../../prelude/rules/rust/rust_binary/",children:"rule definition"})," to see what these\nattributes are and the syntax to define them. Some attributes are mandatory and\nsome are optional with defaults. Most attributes are rule-specific but there are\ncommon ones such as ",(0,i.jsx)(n.code,{children:"name"}),", ",(0,i.jsx)(n.code,{children:"srcs"}),", ",(0,i.jsx)(n.code,{children:"deps"})," and\n",(0,i.jsx)(n.a,{href:"../../concepts/visibility/",children:"visibility"}),"."]}),"\n",(0,i.jsx)(n.h4,{id:"tips-2",children:"Tips:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Without using load function, buck will default to using native rules with the\nsame name;"}),"\n",(0,i.jsxs)(n.li,{children:["One load function can load multiple macros from the same ",(0,i.jsx)(n.code,{children:".bzl"})," file"]}),"\n",(0,i.jsx)(n.li,{children:"Deps and visibility are important attributes to understand, please read the\ndocs!"}),"\n"]}),"\n",(0,i.jsx)(l.FbInternalOnly,{children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Using macro is mandatory in some repos, like Fbcode."}),"\n"]})}),"\n",(0,i.jsx)(n.h2,{id:"dependencies-and-dependency-graph",children:"Dependencies and Dependency Graph"}),"\n",(0,i.jsx)(h,{children:'\ngraph TD\n  A(("\ud83c\udfaf **:main**<br/>(rust_binary)")) --\x3e B(("\ud83c\udfaf **:library**<br/>(rust_library)"))\n  A --\x3e C(("\ud83c\udfaf **:logging_lib**<br/>(rust_library)"))\n  B --\x3e C\n  D(("\ud83c\udfaf **:test**<br/>(rust_test)")) --\x3e B\n\n  style A fill:#e3f2fd,stroke:#1976d2,stroke-width:1px\n  style B fill:#e8f5e8,stroke:#388e3c,stroke-width:1px\n  style C fill:#fff3e0,stroke:#f57c00,stroke-width:1px\n  style D fill:#fce4ec,stroke:#c2185b,stroke-width:1px\n\n'}),"\n",(0,i.jsxs)(n.p,{children:["As you craft your program, you may need to rely on other targets, known as\n",(0,i.jsx)(n.a,{href:"../../concepts/glossary/#dependency",children:"dependencies"}),'. In the "Hello World"\nexercise, ',(0,i.jsx)("code",{children:":library"})," and ",(0,i.jsx)("code",{children:":logging_lib"})," targets are\ndependencies of the ",(0,i.jsx)("code",{children:":main"})," target. One target can depend on multiple\ndependencies, which in turn can have their own dependencies to form a web of\nconnections, a so-called\n",(0,i.jsx)(n.a,{href:"../../concepts/key_concepts/#buck2s-dependency-graph",children:"dependency graph"}),", our\nlab renders a very simple dependency graph with maximum depth of 2, in real\nworld, the graph will be much bigger and one top level target could have tens of\nthousands dependencies."]}),"\n",(0,i.jsx)(n.p,{children:"Understanding and managing the dependency graph of your buck target is important\nfor effective development. Buck also offers powerful query tools to explore the\ndependency graph."}),"\n",(0,i.jsx)(n.h4,{id:"tips-3",children:"Tips:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Dependency graph size affects build speed and memory usage greatly"}),"\n",(0,i.jsxs)(n.li,{children:["The graph is a DAG graph. So cycles in the dependency graph (circular\ndependency), something like ",(0,i.jsx)(n.code,{children:"A->B->...->X->A"}),", are not allowed, buck will emit\nerror when cycle is detected."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"buck-commands",children:"Buck Commands"}),"\n",(0,i.jsxs)(n.p,{children:["In the lab, once buck and source files are in place, we use\n",(0,i.jsx)(n.code,{children:"buck2 build :main --show-output"})," to build the ",(0,i.jsx)(n.code,{children:":main"})," target. This uses the\n",(0,i.jsx)(n.a,{href:"../../users/commands/build/",children:"buck build command"})," to compile and link your rust\ncode into a binary. Now let\u2019s take a closer look at this command. A buck command\nis usually composed of a command type ( ",(0,i.jsx)(n.code,{children:"build"}),", ",(0,i.jsx)(n.code,{children:"run"}),", ",(0,i.jsx)(n.code,{children:"test"})," ...), some\n",(0,i.jsx)(n.a,{href:"../../concepts/target_pattern/",children:"target pattern"}),", and options. Command options\ncan offer extra configurations to do the build."]}),"\n",(0,i.jsx)(n.p,{children:"Buck accepts multiple targets in one command, such as:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"buck build target1 target2 target3"})," builds 3 targets in one command"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"buck build //path/to/dir/..."})," builds all targets under ",(0,i.jsx)(n.code,{children:"path/to/dir"}),",\nincluding sub-dir"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"buck build //path/to/dir:"})," build all targets under package ",(0,i.jsx)(n.code,{children:"path/to/dir"}),",\nwithout sub packages"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"buck build @a-file"})," builds targets listed in a-file, which is a plain text\nfile"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Buck builds multiple targets in parallel, unless there are dependencies between\nthem."}),"\n",(0,i.jsxs)(n.p,{children:["Once target is built, you can use ",(0,i.jsx)(n.a,{href:"../../users/commands/run/",children:"buck run"}),",\n",(0,i.jsx)(n.a,{href:"../../users/commands/test",children:"buck test"})," and\n",(0,i.jsx)(n.a,{href:"../../users/commands/install",children:"buck install"})," to test the code."]}),"\n",(0,i.jsx)(n.p,{children:"As you become more adept, you can explore other powerful buck commands, such as:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"../../users/commands/query/",children:(0,i.jsx)(n.code,{children:"buck query"})})," with various\n",(0,i.jsx)(n.a,{href:"../../users/query/uquery/",children:"options"})," to analyze the dependency graph, this set\nof commands is by far the most powerful and complicated buck commands to use;"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"../../users/commands/kill/",children:(0,i.jsx)(n.code,{children:"buck kill"})})," to stop running\n",(0,i.jsx)(n.a,{href:"../../concepts/daemon/",children:"buck daemon"}),", this is sometimes needed to recover\nfrom a failed build due to bad daemon state;"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"../../users/commands/clean/",children:(0,i.jsx)(n.code,{children:"buck clean"})})," to remove build artifacts from\n",(0,i.jsx)(n.a,{href:"../../concepts/buck_out/",children:"buck-out"}),",this is a remedy to recover from failed\nbuild due to either bad daemon or bad artifacts in cache;"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"../../users/commands/log/",children:(0,i.jsx)(n.code,{children:"buck log"})})," to see information about previous\nbuilds"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"../../bxl/tutorial/",children:(0,i.jsx)(n.code,{children:"buck bxl"})})," to run bxl scripts. BXL is a buck2 script\nlanguage using starlark syntax to write complex query or build logic."]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"tips-4",children:"Tips:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Buck offers help menus for all commands, try the -h option, you can buck -h or\nbuck build -h to see all available commands and options"}),"\n"]}),"\n",(0,i.jsx)(s,{children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Sometimes you\u2019ll see options like ",(0,i.jsx)(n.code,{children:"@mode/opt"})," in the command, the mode file\n(path is ",(0,i.jsx)(n.code,{children:"cell/mode/opt"}),") contains a set of buck configs that are extensions\nof ",(0,i.jsx)(n.code,{children:".buckconfig"}),", see some examples in\n",(0,i.jsx)(n.a,{href:"https://www.internalfb.com/wiki/Buck/Buck-users/fbcode-repo/C++/running-buck-in-different-modes/",children:"this wiki"}),"\nfor C++ build mode;"]}),"\n"]})}),"\n",(0,i.jsx)(n.h3,{id:"buck2-command-flow",children:"Buck2 Command Flow"}),"\n",(0,i.jsx)(n.p,{children:"Here's how Buck2 commands work in your tutorial workflow:"}),"\n",(0,i.jsx)(h,{children:"\ngraph TD\n  A[User runs buck2 command] --\x3e B{Command Type}\n\n  B --\x3e|build| C[buck2 build :main]\n  B --\x3e|run| D[buck2 run :main]\n  B --\x3e|test| E[buck2 test :test]\n\n  C --\x3e F[Parse BUCK files]\n  D --\x3e F\n  E --\x3e F\n\n  F --\x3e G[Resolve dependencies]\n  G --\x3e H[Execute build actions]\n  H --\x3e I[Generate outputs in </br> buck-out/]\n\n  I --\x3e J{Command specific behavior}\n  J --\x3e|build| K[Show output path </br> if --show-output available]\n  J --\x3e|run| L[Execute binary]\n  J --\x3e|test| M[Run tests & show results]\n\n  style A fill:#e1f5fe\n  style F fill:#f3e5f5\n  style G fill:#e8f5e8\n  style H fill:#fff3e0\n  style I fill:#fce4ec\n\n"}),"\n",(0,i.jsx)(n.h2,{id:"console-and-output",children:"Console and Output"}),"\n",(0,i.jsxs)(n.p,{children:["During the lab, you\u2019ve seen the console output during build and test process,\nthese outputs give information about the execution progress and state. Buck\noffers different kinds of\n",(0,i.jsx)(n.a,{href:"../../users/build_observability/interactive_console/",children:"consoles"})," for various\npurposes, and the interactive feature helps during debugging."]}),"\n",(0,i.jsx)(n.h2,{id:"buck-out",children:"Buck-out"}),"\n",(0,i.jsxs)(n.p,{children:["So you\u2019ve successfully built the target and run it. Finally, let\u2019s briefly talk\nabout ",(0,i.jsx)(n.a,{href:"../../concepts/buck_out/",children:"buck-out"}),", which is an important concept yet\nhard to understand initially. We know that buck builds complicated targets with\nbig dependency graphs and generates tons of outputs for test and run. Where\nshould these output artifacts be stored at? The outputs should not be stored at\nthe source directory which is tracked by the source control system. The outputs\nalso need to be reused/cached for later builds to save build time. So here comes\nbuck-out,it has the following characteristics:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"It\u2019s under repo root;"}),"\n",(0,i.jsx)(n.li,{children:"It has a unique file structure, some directories are hashed for caching\npurpose;"}),"\n",(0,i.jsx)(n.li,{children:"It stores a lot of data including output artifacts, buck log files, tmp data,\netc;"}),"\n",(0,i.jsx)(n.li,{children:"It is managed by buck and developers normally should not manipulate;"}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"tips-5",children:"Tips:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Do NOT"})," delete artifacts manually from buck-out directory and expect buck\nto rebuild them, buck doesn\u2019t track things under buck-out, use buck clean\ninstead;"]}),"\n"]}),"\n",(0,i.jsxs)(l.FbInternalOnly,{children:[(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Do NOT"})," use buck-out directory path in your source or BUCK file, you should\nnot assume where artifacts will be stored, see more information in\n",(0,i.jsx)(n.a,{href:"https://www.internalfb.com/wiki/Buck/Buck-users/faq_trick_tip/Dealing_with_buck-out/",children:"this wiki"}),";"]}),"\n",(0,i.jsxs)(n.li,{children:["Buck-out can grow very big and consumes your disk space, you can run buck\nclean or ",(0,i.jsx)(n.a,{href:"../../users/commands/clean/",children:"buck clean --stale"})," as the remedy"]}),"\n"]}),(0,i.jsx)(n.h2,{id:"buck-ui",children:"Buck UI"}),(0,i.jsxs)(n.p,{children:["Buck is mostly a command line tool but buck team does offer a\n",(0,i.jsx)(n.a,{href:"../../users/build_observability/observability/#buck2s-web-ui",children:"web-based UI"})," for\nusers to inspect the build afterwards. To access the UI, the simplest way is to\ntype \u201cbuck2\u201d in the browser URL and it should bring you to your latest build\nhistory. Clicking on the uuid of the build will take you to the individual\nbuild."]})]})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(g,{...e})}):g(e)}}}]);