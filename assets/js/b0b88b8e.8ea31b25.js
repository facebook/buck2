"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[54328],{15454:(e,n,d)=>{d.r(n),d.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"api/build/Dependency","title":"Dependency","description":"Dependency type. In Starlark typing it can be represented with Dependency global.","source":"@site/../docs/api/build/Dependency.md","sourceDirName":"api/build","slug":"/api/build/Dependency","permalink":"/docs/api/build/Dependency","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"apiSidebar","previous":{"title":"DepOnlyIncompatibleRollout","permalink":"/docs/api/build/DepOnlyIncompatibleRollout"},"next":{"title":"DigestConfig","permalink":"/docs/api/build/DigestConfig"}}');var r=d(74848),c=d(28453),s=d(56289);const i={},l="Dependency",o={},a=[{value:"Dependency.get",id:"dependencyget",level:2},{value:"Dependency.label",id:"dependencylabel",level:2},{value:"Dependency.providers",id:"dependencyproviders",level:2},{value:"Dependency.sub_target",id:"dependencysub_target",level:2}];function p(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",hr:"hr",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"dependency",children:"Dependency"})}),"\n",(0,r.jsxs)(n.p,{children:["Dependency type. In Starlark typing it can be represented with ",(0,r.jsx)(n.code,{children:"Dependency"})," global."]}),"\n",(0,r.jsx)(n.h2,{id:"dependencyget",children:"Dependency.get"}),"\n",(0,r.jsx)("pre",{class:"language-python",children:(0,r.jsx)("code",{children:"def Dependency.get(index) -> None | Provider"})}),"\n",(0,r.jsxs)(n.p,{children:["Gets a provider by indexing on a ",(0,r.jsx)(n.code,{children:"ProviderCallable"})," object."]}),"\n",(0,r.jsx)(n.p,{children:"e.g."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ignore",children:'FooInfo = provider(fields=["bar"])\n....\ncollection.get(FooInfo) # None if absent, a FooInfo instance if present\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"dependencylabel",children:"Dependency.label"}),"\n",(0,r.jsx)("pre",{class:"language-python",children:(0,r.jsxs)("code",{children:["Dependency.label: ",(0,r.jsx)(s.default,{to:"/docs/api/build/Label",children:"Label"})]})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"dependencyproviders",children:"Dependency.providers"}),"\n",(0,r.jsx)("pre",{class:"language-python",children:(0,r.jsx)("code",{children:"Dependency.providers: list"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"dependencysub_target",children:"Dependency.sub_target"}),"\n",(0,r.jsx)("pre",{class:"language-python",children:(0,r.jsxs)("code",{children:["def Dependency.sub_target(\nsubtarget: ",(0,r.jsx)(s.default,{to:"/docs/api/starlark/str",children:"str"}),",\n/,\n) -> ",(0,r.jsx)(s.default,{to:"/docs/api/build/Dependency",children:"Dependency"})]})}),"\n",(0,r.jsxs)(n.p,{children:["Obtain the dependency representing a subtarget. In most cases you will want to use ",(0,r.jsx)(n.code,{children:'x[DefaultInfo].sub_targets["foo"]'})," to get the ",(0,r.jsx)(n.em,{children:"providers"})," of the subtarget, but if you need a real ",(0,r.jsx)(n.code,{children:"Dependency"})," type (e.g. for use with ",(0,r.jsx)(n.code,{children:"ctx.action.anon_target"}),") then use this method."]})]})}function h(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},28453:(e,n,d)=>{d.d(n,{R:()=>s,x:()=>i});var t=d(96540);const r={},c=t.createContext(r);function s(e){const n=t.useContext(c);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(c.Provider,{value:n},e.children)}}}]);