"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[91669],{28453:(e,s,n)=>{n.d(s,{R:()=>o,x:()=>l});var t=n(96540);const i={},r=t.createContext(i);function o(e){const s=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(r.Provider,{value:s},e.children)}},39611:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"prelude/rules/apple/apple_test","title":"apple_test","description":"An apple_test() rule contains Objective-C/C++ code which can be built and used to test code contained in other rules. The tests can be executed by running buck test.","source":"@site/../docs/prelude/rules/apple/apple_test.md","sourceDirName":"prelude/rules/apple","slug":"/prelude/rules/apple/apple_test","permalink":"/docs/prelude/rules/apple/apple_test","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"ruleSidebar","previous":{"title":"apple_static_archive","permalink":"/docs/prelude/rules/apple/apple_static_archive"},"next":{"title":"apple_toolchain","permalink":"/docs/prelude/rules/apple/apple_toolchain"}}');var i=n(74848),r=n(28453);n(56289);const o={},l="apple_test",a={},d=[{value:"Function Signature",id:"function-signature",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Examples",id:"examples",level:3}];function c(e){const s={a:"a",code:"code",h1:"h1",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"apple_test",children:"apple_test"})}),"\n",(0,i.jsxs)(s.p,{children:["An ",(0,i.jsx)(s.code,{children:"apple_test()"})," rule contains Objective-C/C++ code which can be built and used to test code contained in other rules. The tests can be executed by running ",(0,i.jsx)(s.code,{children:"buck test"}),"."]}),"\n",(0,i.jsx)(s.h3,{id:"function-signature",children:"Function Signature"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:'def apple_test(\n    *,\n    name: str,\n    default_target_platform: None | str = None,\n    target_compatible_with: list[str] = [],\n    compatible_with: list[str] = [],\n    exec_compatible_with: list[str] = [],\n    visibility: list[str] = [],\n    within_view: list[str] = ["PUBLIC"],\n    metadata: OpaqueMetadata = {},\n    tests: list[str] = [],\n    modifiers: OpaqueMetadata = [],\n    _apple_platforms: dict[str, str] = {},\n    _apple_toolchain: str = "gh_facebook_buck2_shims_meta//:apple-default",\n    _apple_tools: str = "prelude//apple/tools:apple-tools",\n    _apple_xctoolchain: str = "gh_facebook_buck2_shims_meta//:apple-xctoolchain",\n    _apple_xctoolchain_bundle_id: str = "gh_facebook_buck2_shims_meta//:apple-xctoolchain-bundle-id",\n    _bundling_cache_buster: None | str = None,\n    _bundling_log_file_enabled: bool = False,\n    _bundling_log_file_level: None | str = None,\n    _code_signing_configuration: None | str = None,\n    _codesign_command_override: None | str = None,\n    _codesign_identities_command_override: None | str = None,\n    _codesign_type: None | str = None,\n    _compile_resources_locally_override: None | bool = None,\n    _dsymutil_extra_flags: list[str],\n    _dsymutil_verify_dwarf: str,\n    _embed_provisioning_profile_when_adhoc_code_signing: None | bool = None,\n    _enable_library_evolution: bool = select({"prelude//features/apple:swift_library_evolution_enabled": True, "DEFAULT": False}),\n    _fast_adhoc_signing_enabled_default: bool = select({"prelude//features/apple:fast_adhoc_signing_disabled": False, "prelude//features/apple:fast_adhoc_signing_enabled": True, "DEFAULT": True}),\n    _fast_provisioning_profile_parsing_enabled: bool = False,\n    _incremental_bundling_enabled: bool = False,\n    _info_plist_identify_build_system_default: bool = False,\n    _inject_test_env: str = "prelude//test/tools:inject_test_env",\n    _ipad_simulator: str | (str, str) = gh_facebook_buck2_shims_meta//xplat/buck2/platform/apple:ipad_simulator,\n    _iphone_booted_simulator: str | (str, str) = gh_facebook_buck2_shims_meta//xplat/buck2/platform/apple:iphone_booted_simulator,\n    _iphone_unbooted_simulator: str | (str, str) = gh_facebook_buck2_shims_meta//xplat/buck2/platform/apple:iphone_unbooted_simulator,\n    _profile_bundling_enabled: bool = False,\n    _provisioning_profiles: str = "gh_facebook_buck2_shims_meta//xplat/buck2/platform/apple:provisioning_profiles",\n    _resource_bundle: None | str = None,\n    _skip_adhoc_resigning_scrubbed_frameworks_default: bool = select({"prelude//features/apple/constraints:skip_adhoc_resigning_scrubbed_frameworks_disabled": False, "prelude//features/apple/constraints:skip_adhoc_resigning_scrubbed_frameworks_enabled": True, "DEFAULT": False}),\n    _skip_adhoc_resigning_scrubbed_frameworks_override: None | bool = None,\n    _skip_swift_incremental_outputs: bool = False,\n    _strict_provisioning_profile_search_default: bool = select({"prelude//features/apple:strict_provisioning_profile_search_enabled": True, "DEFAULT": True}),\n    _swift_enable_testing: bool = True,\n    _test_toolchain: str = "gh_facebook_buck2_shims_meta//:test",\n    _use_entitlements_when_adhoc_code_signing: None | bool = None,\n    _watch_simulator: str | (str, str) = gh_facebook_buck2_shims_meta//xplat/buck2/platform/apple:watch_simulator,\n    allow_cache_upload: None | bool = None,\n    asset_catalogs_compilation_options: dict[str, typing.Any] = {},\n    attrs_validators: None | list[str] = None,\n    binary: None | str = None,\n    bridging_header: None | str = None,\n    can_be_asset: None | bool = None,\n    code_signing_configuration: None | str = None,\n    codesign_flags: list[str] = [],\n    codesign_identity: None | str = None,\n    codesign_type: None | str = None,\n    compiler_flags: list[str] = [],\n    constraint_overrides: list[None | str] = [],\n    contacts: list[str] = [],\n    cxx_runtime_type: None | str = None,\n    default_host_platform: None | str = None,\n    default_platform: None | str = None,\n    defaults: dict[str, str] = {},\n    deps: list[str] = [],\n    destination_specifier: dict[str, str] = {},\n    devirt_enabled: bool = False,\n    diagnostics: dict[str, str] = {},\n    dsym_uses_parallel_linker: bool = select({"prelude//features/apple:dsym_uses_parallel_linker_enabled": True, "DEFAULT": False}),\n    embed_provisioning_profile_when_adhoc_code_signing: bool = False,\n    embed_xctest_frameworks_in_test_host_app: None | bool = None,\n    enable_cxx_interop: bool = False,\n    enable_library_evolution: None | bool = None,\n    enforce_minimum_os_plist_key: bool = False,\n    entitlements_file: None | str = None,\n    env: None | dict[str, str] = None,\n    executable_name: None | str = None,\n    exported_header_style: str = "local",\n    exported_headers: list[str] | dict[str, str] = [],\n    exported_lang_platform_preprocessor_flags: dict[str, list[(str, list[str])]] = {},\n    exported_lang_preprocessor_flags: dict[str, list[str]] = {},\n    exported_linker_flags: list[str] = [],\n    exported_platform_deps: list[(str, list[str])] = [],\n    exported_platform_headers: list[(str, list[str] | dict[str, str])] = [],\n    exported_platform_linker_flags: list[(str, list[str])] = [],\n    exported_platform_preprocessor_flags: list[(str, list[str])] = [],\n    exported_post_linker_flags: list[str] = [],\n    exported_post_platform_linker_flags: list[(str, list[str])] = [],\n    exported_preprocessor_flags: list[str] = [],\n    extension: str,\n    extra_xcode_files: list[str] = [],\n    extra_xcode_sources: list[str] = [],\n    fast_adhoc_signing_enabled: None | bool = None,\n    fat_lto: bool = False,\n    focused_list_target: None | str = None,\n    force_static: None | bool = None,\n    frameworks: list[str] = [],\n    header_namespace: None | str = None,\n    header_path_prefix: None | str = None,\n    headers: list[str] | dict[str, str] = [],\n    headers_as_raw_headers_mode: None | str = None,\n    include_directories: list[str] = [],\n    incremental_bundling_enabled: None | bool = None,\n    info_plist: str,\n    info_plist_identify_build_system: None | bool = None,\n    info_plist_substitutions: dict[str, str] = {},\n    is_ui_test: bool = False,\n    labels: list[str] = [],\n    lang_compiler_flags: dict[str, list[str]] = {},\n    lang_platform_compiler_flags: dict[str, list[(str, list[str])]] = {},\n    lang_platform_preprocessor_flags: dict[str, list[(str, list[str])]] = {},\n    lang_preprocessor_flags: dict[str, list[str]] = {},\n    libraries: list[str] = [],\n    licenses: list[str] = [],\n    link_execution_preference: None | str = None,\n    link_group: None | str = None,\n    link_group_map: None | str | list[(str, list[(None | str | list[None | str], str, None | str | list[str], None | str)], None | dict[str, typing.Any])] = None,\n    link_ordering: None | str = None,\n    link_style: str = "static",\n    link_whole: None | bool = None,\n    linker_extra_outputs: list[str] = [],\n    linker_flags: list[str] = [],\n    modular: bool = False,\n    module_name: None | str = None,\n    module_requires_cxx: bool = False,\n    platform_compiler_flags: list[(str, list[str])] = [],\n    platform_deps: list[(str, list[str])] = [],\n    platform_headers: list[(str, list[str] | dict[str, str])] = [],\n    platform_linker_flags: list[(str, list[str])] = [],\n    platform_override: None | str = None,\n    platform_preprocessor_flags: list[(str, list[str])] = [],\n    platform_srcs: list[(str, list[str | (str, list[str])])] = [],\n    post_linker_flags: list[str] = [],\n    post_platform_linker_flags: list[(str, list[str])] = [],\n    precompiled_header: None | str = None,\n    preferred_linkage: str = "shared",\n    prefix_header: None | str = None,\n    preprocessor_flags: list[str] = [],\n    propagated_target_sdk_version: None | str = None,\n    provisioning_profile_filter: None | str = None,\n    public_include_directories: list[str] = [],\n    public_system_include_directories: list[str] = [],\n    raw_headers: list[str] = [],\n    reexport_all_header_dependencies: None | bool = None,\n    resource_group: None | str = None,\n    resource_group_map: None | str = None,\n    run_test_separately: bool = False,\n    runner: None | str = None,\n    sanitizer_runtime_enabled: None | bool = None,\n    sdk_modules: list[str] = [],\n    serialize_debugging_options: None | bool = None,\n    skip_adhoc_resigning_scrubbed_frameworks: None | bool = None,\n    skip_copying_swift_stdlib: None | bool = None,\n    snapshot_reference_images_path: None | str = None,\n    soname: None | str = None,\n    specs: None | str = None,\n    srcs: list[str | (str, list[str])] = [],\n    static_library_basename: None | str = None,\n    strict_provisioning_profile_search: None | bool = None,\n    stripped: bool = False,\n    supported_platforms_regex: None | str = None,\n    supports_merged_linking: None | bool = None,\n    swift_compilation_mode: str = "wmo",\n    swift_compiler_flags: list[str] = [],\n    swift_incremental_file_hashing: bool = False,\n    swift_interface_compilation_enabled: bool = False,\n    swift_module_skip_function_bodies: bool = True,\n    swift_package_name: None | str = None,\n    swift_version: None | str = None,\n    target_sdk_version: None | str = None,\n    test_device_type: str = "default",\n    test_host_app: None | str | (str, str) = None,\n    test_re_capabilities: None | dict[str, str] = None,\n    test_re_use_case: None | str = None,\n    test_rule_timeout_ms: None | int = None,\n    thin_lto: bool = False,\n    try_skip_code_signing: None | bool = None,\n    ui_test_target_app: None | str = None,\n    use_entitlements_when_adhoc_code_signing: bool = False,\n    use_submodules: bool = True,\n    uses_cxx_explicit_modules: bool = False,\n    uses_explicit_modules: bool = False,\n    uses_modules: bool = False,\n    validation_deps: list[str] = [],\n    versioned_macos_bundle: bool = select({"prelude//features/apple/constraints:versioned_macos_bundle_false": False, "prelude//features/apple/constraints:versioned_macos_bundle_true": True, "DEFAULT": False}),\n    xcode_product_type: None | str = None,\n    xcode_scheme_settings: None | str = None,\n) -> None\n'})}),"\n",(0,i.jsx)(s.h3,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"name"}),": (required)"]}),"\n",(0,i.jsx)(s.p,{children:"name of the target"}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"default_target_platform"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"None"}),")"]}),"\n",(0,i.jsx)(s.p,{children:"specifies the default target platform, used when no platforms are specified on the command line"}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"target_compatible_with"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(s.p,{children:"a list of constraints that are required to be satisfied for this target to be compatible with a configuration"}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"compatible_with"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(s.p,{children:"a list of constraints that are required to be satisfied for this target to be compatible with a configuration"}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"exec_compatible_with"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(s.p,{children:"a list of constraints that are required to be satisfied for this target to be compatible with an execution platform"}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"visibility"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(s.p,{children:"a list of visibility patterns restricting what targets can depend on this one"}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"within_view"}),": (defaults to: ",(0,i.jsx)(s.code,{children:'["PUBLIC"]'}),")"]}),"\n",(0,i.jsx)(s.p,{children:"a list of visibility patterns restricting what this target can depend on"}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"metadata"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"{}"}),")"]}),"\n",(0,i.jsx)(s.p,{children:"a key-value map of metadata associated with this target"}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"tests"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(s.p,{children:"a list of targets that provide tests for this one"}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"modifiers"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(s.p,{children:"an array of modifiers associated with this target"}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"allow_cache_upload"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"None"}),")"]}),"\n",(0,i.jsx)(s.p,{children:"Whether to allow uploading the output of this rule to be uploaded to cache when the action is executed locally if the configuration allows (i.e. there is a cache configured and the client has permission to write to it)."}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"asset_catalogs_compilation_options"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"{}"}),")"]}),"\n",(0,i.jsx)(s.p,{children:"A dict holding parameters for asset catalogs compiler (actool). Its options include:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"notices"})," (defaults to ",(0,i.jsx)(s.code,{children:"True"}),")"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"warnings"})," (defaults to ",(0,i.jsx)(s.code,{children:"True"}),")"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"errors"})," (defaults to ",(0,i.jsx)(s.code,{children:"True"}),")"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"compress_pngs"})," (defaults to ",(0,i.jsx)(s.code,{children:"True"}),")"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"optimization"})," (defaults to ",(0,i.jsx)(s.code,{children:"'space'"}),")"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"output_format"})," (defaults to ",(0,i.jsx)(s.code,{children:"'human-readable-text'"}),")"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"extra_flags"})," (defaults to ",(0,i.jsx)(s.code,{children:"[]"}),")"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"compiler_flags"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(s.p,{children:"Flags to use when compiling any of the above sources (which require compilation)."}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"embed_xctest_frameworks_in_test_host_app"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"None"}),")"]}),"\n",(0,i.jsxs)(s.p,{children:["Controls whether a marker constraint is added to the ",(0,i.jsx)(s.code,{children:"test_host_app"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"extra_xcode_files"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(s.p,{children:'When the project is generated, this is the list of files that will added to the project. Those files won\'t be added to the build phase "Compile Sources".'}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"extra_xcode_sources"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(s.p,{children:'When the project is generated, this is the list of files that will added to the build phase "Compile Sources" of the given target.'}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"frameworks"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,i.jsxs)(s.p,{children:["A list of system frameworks that the code in this target uses. Each entry should be a path starting with ",(0,i.jsx)(s.code,{children:"$SDKROOT"})," or ",(0,i.jsx)(s.code,{children:"$PLATFORM_DIR"})," to denote that the rest of the path is relative to the root of the SDK used for the build or to the platform toolchain directory."]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"header_path_prefix"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"None"}),")"]}),"\n",(0,i.jsx)(s.p,{children:"A path prefix when including headers of this target. For example, headers from a library defined using"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:'apple_library(\n    name = "Library",\n    headers = glob(["**/*.h"]),\n    header_path_prefix = "Lib",\n)\n'})}),"\n",(0,i.jsx)(s.p,{children:"can be imported using following mapping"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:"Library/SubDir/Header1.h -> Lib/Header1.h\nLibrary/Header2.h -> Lib/Header2.h\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Defaults to the short name of the target. Can contain forward slashes (",(0,i.jsx)(s.code,{children:"/"}),"), but\ncannot start with one. See ",(0,i.jsx)(s.code,{children:"headers"})," for more information."]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"headers"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,i.jsxs)(s.p,{children:["The set of header files that are made available for inclusion to the source files in this target. These should be specified as either a list of header files or a dictionary of header names to header files. The header names can contain forward slashes (",(0,i.jsx)(s.code,{children:"/"}),"). If a list of header files is specified, the headers can be imported with ",(0,i.jsx)(s.code,{children:'#import "$HEADER_PATH_PREFIX/$HEADER_NAME"'})," or ",(0,i.jsx)(s.code,{children:'#import "$HEADER_NAME"'}),", where ",(0,i.jsx)(s.code,{children:"$HEADER_PATH_PREFIX"})," is the value of the target's ",(0,i.jsx)(s.code,{children:"header_path_prefix"})," attribute, and ",(0,i.jsx)(s.code,{children:"$HEADER_NAME"})," is the filename of the header file. If a dictionary is specified, each header can be imported with ",(0,i.jsx)(s.code,{children:'#import "$HEADER_NAME"'}),", where ",(0,i.jsx)(s.code,{children:"$HEADER_NAME"})," is the key corresponding to this file. In this case, the ",(0,i.jsx)(s.code,{children:"header_path_prefix"})," attribute is ignored. In either case, quotes in the import statements can be replaced with angle brackets."]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"info_plist"}),": (required)"]}),"\n",(0,i.jsxs)(s.p,{children:["A path to an ",(0,i.jsx)(s.code,{children:"Info.plist"})," file that will be placed in the bundle. The specified file will be processed by substituting variable names with their values (see ",(0,i.jsx)(s.code,{children:"info_plist_substitutions"})," for more information)."]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"info_plist_substitutions"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"{}"}),")"]}),"\n",(0,i.jsxs)(s.p,{children:["A dictionary that assigns variable names to their values. It is used for variable substitution when processing the file specified in ",(0,i.jsx)(s.code,{children:"info_plist"}),". For example if this argument is set to ",(0,i.jsx)(s.code,{children:"{'VAR': 'MyValue'}"}),", then each occurrence of ",(0,i.jsx)(s.code,{children:"$(VAR)"})," or ",(0,i.jsx)(s.code,{children:"${VAR}"})," in the file will be replaced by ",(0,i.jsx)(s.code,{children:"MyValue"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"labels"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,i.jsxs)(s.p,{children:["A list of labels to be applied to these tests. These labels are arbitrary text strings and have no meaning within buck itself. They can, however, have meaning for you as a test author (e.g., ",(0,i.jsx)(s.code,{children:"smoke"})," or ",(0,i.jsx)(s.code,{children:"fast"}),"). A label can be used to filter or include a specific test rule when executing ",(0,i.jsx)(s.code,{children:"buck test"})]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"link_execution_preference"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"None"}),")"]}),"\n",(0,i.jsx)(s.p,{children:"The execution preference for linking. Options are:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"any : No preference is set, and the link action will be performed based on buck2's executor configuration."}),"\n",(0,i.jsx)(s.li,{children:"full_hybrid : The link action will execute both locally and remotely, regardless of buck2's executor configuration (if\nthe executor is capable of hybrid execution). The use_limited_hybrid setting of the hybrid executor is ignored."}),"\n",(0,i.jsx)(s.li,{children:"local : The link action will execute locally if compatible on current host platform."}),"\n",(0,i.jsx)(s.li,{children:"local_only : The link action will execute locally, and error if the current platform is not compatible."}),"\n",(0,i.jsx)(s.li,{children:"remote : The link action will execute remotely if a compatible remote platform exists, otherwise locally."}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:"The default is None, expressing that no preference has been set on the target itself."}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"linker_flags"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(s.p,{children:"Flags to add to the linker command line whenever the output from this rule is used in a link operation, such as linked into an executable or a shared library."}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"platform_compiler_flags"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,i.jsxs)(s.p,{children:["Platform specific compiler flags. These should be specified as a list of pairs where the first element is an un-anchored regex (in java.util.regex.Pattern syntax) against which the platform name is matched, and the second element is a list of flags to use when compiling the target's sources. See ",(0,i.jsx)(s.code,{children:"compiler_flags"})," for more information."]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"platform_srcs"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,i.jsxs)(s.p,{children:["Platform specific source files. These should be specified as a list of pairs where the first element is an un-anchored regex (in java.util.regex.Pattern syntax) against which the platform name is matched, and the second element is either a list of source files or a list of tuples of source files and a list of compilation flags to be preprocessed, compiled and assembled if the platform matches the regex. See ",(0,i.jsx)(s.code,{children:"srcs"})," for more information."]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"preprocessor_flags"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,i.jsx)(s.p,{children:"Flags to use when preprocessing any of the above sources (which require preprocessing)."}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"srcs"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"[]"}),")"]}),"\n",(0,i.jsxs)(s.p,{children:["The set of C, C++, Objective-C, Objective-C++, or assembly source files to be preprocessed, compiled, and assembled by this rule. We determine which stages to run on each input source based on its file extension. See the ",(0,i.jsx)(s.a,{href:"https://gcc.gnu.org/onlinedocs/gcc/Overall-Options.html",children:"GCC documentation"})," for more detail on how file extensions are interpreted. Each element can be either a string specifying a source file (e.g. ",(0,i.jsx)(s.code,{children:"''"}),") or a tuple of a string specifying a source file and a list of compilation flags (e.g. ",(0,i.jsx)(s.code,{children:"('', ['-Wall', '-Werror'])"})," ). In the latter case the specified flags will be used in addition to the rule's other flags when preprocessing and compiling that file (if applicable)."]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"supported_platforms_regex"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"None"}),")"]}),"\n",(0,i.jsx)(s.p,{children:"If present, an un-anchored regex (in java.util.regex.Pattern syntax) that matches all platforms that this library supports. It will not be built for other platforms."}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"target_sdk_version"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"None"}),")"]}),"\n",(0,i.jsxs)(s.p,{children:["The minimum OS version that the library target should support, overriding the minimum set in ",(0,i.jsx)(s.code,{children:".buckconfig"}),". When set, Buck will automatically add flags to both Objective-C and Swift compilation that will allow the use of the new APIs without guarding code inside availability checks."]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"test_host_app"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"None"}),")"]}),"\n",(0,i.jsxs)(s.p,{children:["A build target identifying an ",(0,i.jsx)(s.code,{children:"apple_bundle()"})," rule that builds an application bundle. Output of the specified rule will be used as a test host of this test. This implies ",(0,i.jsx)(s.code,{children:"run_test_separately"}),". Since symbols that are defined in the test host application and its dependencies will not be linked into the test binary, to make those symbols accessible to the test target they need to be specified as a dependency of this target and ",(0,i.jsx)(s.code,{children:"['-undefined', 'dynamic_lookup']"}),"  needs to be added to this target's ",(0,i.jsx)(s.code,{children:"linker_flags"})," (this will suppress undefined reference errors during compilation, but if the symbols do not exist, it might result in runtime crashes)."]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"test_re_capabilities"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"None"}),")"]}),"\n",(0,i.jsx)(s.p,{children:"An optional dictionary with the RE capabilities for the test execution. Overrides a default selection mechanism."}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"test_re_use_case"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"None"}),")"]}),"\n",(0,i.jsx)(s.p,{children:"An optional name of the RE use case for the test execution. Overrides a default selection mechanism."}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"xcode_scheme_settings"}),": (defaults to: ",(0,i.jsx)(s.code,{children:"None"}),")"]}),"\n",(0,i.jsx)(s.p,{children:"Optional settings to set on schemes when this target is represented in Xcode."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:"\n\napple_test(\n  name = 'MyTest',\n  info_plist = 'MyTest-Info.plist',\n  preprocessor_flags = ['-fobjc-arc'],\n  srcs = [\n    'MyTest.m',\n  ],\n  deps = [\n    ':MyLibrary',\n  ],\n  frameworks = [\n    '$SDKROOT/System/Library/Frameworks/Foundation.framework',\n    '$SDKROOT/System/Library/Frameworks/UIKit.framework',\n    '$PLATFORM_DIR/Developer/Library/Frameworks/XCTest.framework',\n  ],\n)\n\n\n"})})]})}function h(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);