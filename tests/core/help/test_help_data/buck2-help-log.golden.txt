# This file is @generated, regenerate by re-running test with `-- --env BUCK2_UPDATE_GOLDEN=1` appended to the test command

Commands for interacting with buck2 logs

Usage: buck2 log [OPTIONS] <COMMAND>

Commands:
  what-ran           Output everything Buck2 ran from selected invocation
  what-failed        Outputs every command that failed in the selected invocation
  path               Output the path to the selected log
  show               Outputs the log in JSON format from selected invocation
  cmd                Show buck command line arguments from selected invocation
  what-up            Show the spans that were open when the log ended
  what-materialized  Outputs materializations from selected invocation
  what-uploaded      Outputs stats about uploads to RE from the selected invocation
  critical-path      Show the critical path for a selected build
  replay             Replay an event log
  show-user          Converts the event log from a selected invocation into a user event log, in
                     JSONL format
  summary            Outputs high level statistics about the build
  diff               Subcommands for diff'ing two buck2 commands
  external-configs   Display the values and origins of external configs for a selected command
  help               Print this message or the help of the given subcommand(s)

Options:
  -h, --help
          Print help (see a summary with '-h')

Universal Options:
  -v, --verbose <VERBOSITY>
          How verbose buck should be while logging.

          Values: 0 = Quiet, errors only; 1 = Show status. Default; 2 = more info about errors; 3 =
          more info about everything; 4 = more info about everything + stderr;

          It can be combined with specific log items (stderr, full_failed_command, commands,
          actions, status, stats, success) to fine-tune the verbosity of the log. Example usage
          "-v=1,stderr"

          [default: 1]

      --oncall <ONCALL>
          The oncall executing this command

      --client-metadata <CLIENT_METADATA>
          Metadata key-value pairs to inject into Buck2's logging. Client metadata must be of the
          form `key=value`, where `key` is a snake_case identifier, and will be sent to backend
          datasets
