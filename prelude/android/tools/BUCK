load("@prelude//utils:source_listing.bzl", "source_listing")

oncall("build_infra")

source_listing()

prelude = native  # Avoid warnings and auto-formatters

prelude.python_bootstrap_binary(
    name = "unpack_aar",
    main = "unpack_aar.py",
    visibility = ["PUBLIC"],
    deps = [
        "prelude//java/tools:utils_lib",
        ":unpack_aar_lib",
    ],
)

prelude.python_bootstrap_library(
    name = "unpack_aar_lib",
    srcs = [
        "unpack_aar.py",
    ],
)

prelude.python_bootstrap_binary(
    name = "filter_dex",
    main = "filter_dex.py",
    visibility = ["PUBLIC"],
    deps = [
        ":filter_dex_lib",
    ],
)

prelude.python_bootstrap_library(
    name = "filter_dex_lib",
    srcs = [
        "filter_dex.py",
    ],
)

prelude.python_bootstrap_binary(
    name = "combine_native_library_dirs",
    main = "combine_native_library_dirs.py",
    visibility = ["PUBLIC"],
    deps = [
        ":combine_native_library_dirs_lib",
    ],
)

prelude.python_bootstrap_library(
    name = "combine_native_library_dirs_lib",
    srcs = [
        "combine_native_library_dirs.py",
    ],
)

prelude.python_bootstrap_binary(
    name = "filter_prebuilt_native_library_dir",
    main = "filter_prebuilt_native_library_dir.py",
    visibility = ["PUBLIC"],
    deps = [
        ":filter_prebuilt_native_library_dir_lib",
    ],
)

prelude.python_bootstrap_library(
    name = "filter_prebuilt_native_library_dir_lib",
    srcs = [
        "filter_prebuilt_native_library_dir.py",
    ],
)

prelude.python_bootstrap_binary(
    name = "native_libs_as_assets_metadata",
    main = "native_libs_as_assets_metadata.py",
    visibility = ["PUBLIC"],
    deps = [
        ":native_libs_as_assets_metadata_lib",
    ],
)

prelude.python_bootstrap_library(
    name = "native_libs_as_assets_metadata_lib",
    srcs = [
        "native_libs_as_assets_metadata.py",
    ],
)

prelude.python_bootstrap_binary(
    name = "compute_merge_sequence",
    main = "merge_sequence.py",
    visibility = ["PUBLIC"],
)

prelude.python_bootstrap_binary(
    name = "filter_extra_resources",
    main = "filter_extra_resources.py",
    visibility = ["PUBLIC"],
    deps = [
        "prelude//java/tools:utils_lib",
    ],
)

prelude.zip_file(
    name = "app_without_resources_stub",
    srcs = ["com/facebook/buck_generated/AppWithoutResourcesStub.java"],
    out = "app_without_resources_stub.src.zip",
    visibility = ["PUBLIC"],
)
