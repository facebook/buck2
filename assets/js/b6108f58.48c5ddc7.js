"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[16325],{28453:(e,s,r)=>{r.d(s,{R:()=>l,x:()=>a});var n=r(96540);const t={},i=n.createContext(t);function l(e){const s=n.useContext(i);return n.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),n.createElement(i.Provider,{value:s},e.children)}},48436:(e,s,r)=>{r.r(s),r.d(s,{assets:()=>o,contentTitle:()=>d,default:()=>p,frontMatter:()=>a,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"api/starlark/str","title":"str","description":"def str(a, /) -> str","source":"@site/../docs/api/starlark/str.md","sourceDirName":"api/starlark","slug":"/api/starlark/str","permalink":"/docs/api/starlark/str","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"apiSidebar","previous":{"title":"set","permalink":"/docs/api/starlark/set"},"next":{"title":"struct","permalink":"/docs/api/starlark/struct"}}');var t=r(74848),i=r(28453),l=r(56289);const a={},d="str",o={},c=[{value:"str.capitalize",id:"strcapitalize",level:2},{value:"str.codepoints",id:"strcodepoints",level:2},{value:"str.count",id:"strcount",level:2},{value:"str.elems",id:"strelems",level:2},{value:"str.endswith",id:"strendswith",level:2},{value:"str.find",id:"strfind",level:2},{value:"str.format",id:"strformat",level:2},{value:"str.index",id:"strindex",level:2},{value:"str.isalnum",id:"strisalnum",level:2},{value:"str.isalpha",id:"strisalpha",level:2},{value:"str.isdigit",id:"strisdigit",level:2},{value:"str.islower",id:"strislower",level:2},{value:"str.isspace",id:"strisspace",level:2},{value:"str.istitle",id:"stristitle",level:2},{value:"str.isupper",id:"strisupper",level:2},{value:"str.join",id:"strjoin",level:2},{value:"str.lower",id:"strlower",level:2},{value:"str.lstrip",id:"strlstrip",level:2},{value:"str.partition",id:"strpartition",level:2},{value:"str.removeprefix",id:"strremoveprefix",level:2},{value:"str.removesuffix",id:"strremovesuffix",level:2},{value:"str.replace",id:"strreplace",level:2},{value:"str.rfind",id:"strrfind",level:2},{value:"str.rindex",id:"strrindex",level:2},{value:"str.rpartition",id:"strrpartition",level:2},{value:"str.rsplit",id:"strrsplit",level:2},{value:"str.rstrip",id:"strrstrip",level:2},{value:"str.split",id:"strsplit",level:2},{value:"str.splitlines",id:"strsplitlines",level:2},{value:"str.startswith",id:"strstartswith",level:2},{value:"str.strip",id:"strstrip",level:2},{value:"str.title",id:"strtitle",level:2},{value:"str.upper",id:"strupper",level:2}];function h(e){const s={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",hr:"hr",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"str",children:"str"})}),"\n",(0,t.jsx)("pre",{class:"language-python",children:(0,t.jsxs)("code",{children:["def str(a, /) -> ",(0,t.jsx)(l.default,{to:"/docs/api/starlark/str",children:"str"})]})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.a,{href:"https://github.com/bazelbuild/starlark/blob/master/spec.md#str",children:"str"}),": formats its argument as a string."]}),"\n",(0,t.jsx)(s.p,{children:"If x is a string, the result is x (without quotation).\nAll other strings, such as elements of a list of strings, are\ndouble-quoted."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:'str(1)                          == \'1\'\nstr("x")                        == \'x\'\nstr([1, "x"])                   == "[1, \\"x\\"]"\n'})}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"strcapitalize",children:"str.capitalize"}),"\n",(0,t.jsx)("pre",{class:"language-python",children:(0,t.jsxs)("code",{children:["def str.capitalize() -> ",(0,t.jsx)(l.default,{to:"/docs/api/starlark/str",children:"str"})]})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.a,{href:"https://github.com/bazelbuild/starlark/blob/master/spec.md#string%C2%B7capitalize",children:"string.capitalize"}),": returns a copy of string S, where the first character (if any) is converted to uppercase; all other characters are converted to lowercase."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:'"hello, world!".capitalize() == "Hello, world!"\n"Hello, World!".capitalize() == "Hello, world!"\n"".capitalize() == ""\n'})}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"strcodepoints",children:"str.codepoints"}),"\n",(0,t.jsx)("pre",{class:"language-python",children:(0,t.jsxs)("code",{children:["def str.codepoints(\n) -> typing.Iterable[",(0,t.jsx)(l.default,{to:"/docs/api/starlark/str",children:"str"}),"]"]})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.a,{href:"https://github.com/bazelbuild/starlark/blob/master/spec.md#string%C2%B7codepoints",children:"string.codepoints"}),": returns an iterable of the unicode codepoint of a string."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"S.codepoints()"})," returns an iterable value containing the\nsequence of integer Unicode code points encoded by the string S.\nEach invalid code within the string is treated as if it encodes the\nUnicode replacement character, U+FFFD."]}),"\n",(0,t.jsxs)(s.p,{children:["By returning an iterable, not a list, the cost of decoding the string\nis deferred until actually needed; apply ",(0,t.jsx)(s.code,{children:"list(...)"})," to the result to\nmaterialize the entire sequence."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:'list("Hello, \u4e16\u754c".codepoints()) == [72, 101, 108, 108, 111, 44, 32, 19990, 30028]\n'})}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"strcount",children:"str.count"}),"\n",(0,t.jsx)("pre",{class:"language-python",children:(0,t.jsxs)("code",{children:["def str.count(\nneedle: ",(0,t.jsx)(l.default,{to:"/docs/api/starlark/str",children:"str"}),",\nstart: None | ",(0,t.jsx)(l.default,{to:"/docs/api/starlark/int",children:"int"})," = None,\nend: None | ",(0,t.jsx)(l.default,{to:"/docs/api/starlark/int",children:"int"})," = None,\n/,\n) -> ",(0,t.jsx)(l.default,{to:"/docs/api/starlark/int",children:"int"})]})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.a,{href:"https://github.com/bazelbuild/starlark/blob/master/spec.md#string%C2%B7count",children:"string.count"}),": count the number of occurrences of a string in another string."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"S.count(sub[, start[, end]])"})," returns the number of occurrences of\n",(0,t.jsx)(s.code,{children:"sub"})," within the string S, or, if the optional substring indices\n",(0,t.jsx)(s.code,{children:"start"})," and ",(0,t.jsx)(s.code,{children:"end"})," are provided, within the designated substring of S.\nThey are interpreted according to Skylark's ",(0,t.jsx)(s.a,{href:"https://github.com/bazelbuild/starlark/blob/master/spec.md#indexing",children:"indexing conventions"}),"."]}),"\n",(0,t.jsxs)(s.p,{children:["This implementation does not count occurrence of ",(0,t.jsx)(s.code,{children:"sub"})," in the string ",(0,t.jsx)(s.code,{children:"S"}),"\nthat overlap other occurrence of S (which can happen if some suffix of S\nis a prefix of S). For instance, ",(0,t.jsx)(s.code,{children:'"abababa".count("aba")'})," returns 2\nfor ",(0,t.jsx)(s.code,{children:"[aba]a[aba]"}),", not counting the middle occurrence: ",(0,t.jsx)(s.code,{children:"ab[aba]ba"}),"\n(this is following Python behavior)."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:'"hello, world!".count("o") == 2\n"abababa".count("aba") == 2\n"hello, world!".count("o", 7, 12) == 1  # in "world"\n'})}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"strelems",children:"str.elems"}),"\n",(0,t.jsx)("pre",{class:"language-python",children:(0,t.jsxs)("code",{children:["def str.elems() -> typing.Iterable[",(0,t.jsx)(l.default,{to:"/docs/api/starlark/str",children:"str"}),"]"]})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.a,{href:"https://github.com/bazelbuild/starlark/blob/master/spec.md#string%C2%B7elems",children:"string.elems"}),": returns an iterable of the bytes values of a string."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"S.elems()"})," returns an iterable value containing the\nsequence of numeric bytes values in the string S."]}),"\n",(0,t.jsxs)(s.p,{children:["To materialize the entire sequence of bytes, apply ",(0,t.jsx)(s.code,{children:"list(...)"})," to the\nresult."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:'list("Hello, \u4e16\u754c".elems()) == ["H", "e", "l", "l", "o", ",", " ", "\u4e16", "\u754c"]\n'})}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"strendswith",children:"str.endswith"}),"\n",(0,t.jsx)("pre",{class:"language-python",children:(0,t.jsxs)("code",{children:["def str.endswith(\nsuffix: ",(0,t.jsx)(l.default,{to:"/docs/api/starlark/str",children:"str"})," | tuple[",(0,t.jsx)(l.default,{to:"/docs/api/starlark/str",children:"str"}),", ...],\n/,\n) -> ",(0,t.jsx)(l.default,{to:"/docs/api/starlark/bool",children:"bool"})]})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.a,{href:"https://github.com/bazelbuild/starlark/blob/master/spec.md#string%C2%B7endswith",children:"string.endswith"}),": determine if a string ends with a given suffix."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"S.endswith(suffix)"})," reports whether the string S has the specified\nsuffix."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:'"filename.sky".endswith(".sky") == True\n'})}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"strfind",children:"str.find"}),"\n",(0,t.jsx)("pre",{class:"language-python",children:(0,t.jsxs)("code",{children:["def str.find(\nneedle: ",(0,t.jsx)(l.default,{to:"/docs/api/starlark/str",children:"str"}),",\nstart: None | ",(0,t.jsx)(l.default,{to:"/docs/api/starlark/int",children:"int"})," = None,\nend: None | ",(0,t.jsx)(l.default,{to:"/docs/api/starlark/int",children:"int"})," = None,\n/,\n) -> ",(0,t.jsx)(l.default,{to:"/docs/api/starlark/int",children:"int"})]})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.a,{href:"https://github.com/bazelbuild/starlark/blob/master/spec.md#string%C2%B7find",children:"string.find"}),": find a substring in a string."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"S.find(sub[, start[, end]])"})," returns the index of the first\noccurrence of the substring ",(0,t.jsx)(s.code,{children:"sub"})," within S."]}),"\n",(0,t.jsxs)(s.p,{children:["If either or both of ",(0,t.jsx)(s.code,{children:"start"})," or ",(0,t.jsx)(s.code,{children:"end"})," are specified,\nthey specify a subrange of S to which the search should be restricted.\nThey are interpreted according to Skylark's ",(0,t.jsx)(s.a,{href:"#indexing",children:"indexing\nconventions"}),"."]}),"\n",(0,t.jsxs)(s.p,{children:["If no occurrence is found, ",(0,t.jsx)(s.code,{children:"found"})," returns -1."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:'"bonbon".find("on") == 1\n"bonbon".find("on", 2) == 4\n"bonbon".find("on", 2, 5) == -1\n'})}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"strformat",children:"str.format"}),"\n",(0,t.jsx)("pre",{class:"language-python",children:(0,t.jsxs)("code",{children:["def str.format(\n*args,\n**kwargs,\n) -> ",(0,t.jsx)(l.default,{to:"/docs/api/starlark/str",children:"str"})]})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.a,{href:"https://github.com/bazelbuild/starlark/blob/master/spec.md#string%C2%B7format",children:"string.format"}),": format a string."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"S.format(*args, **kwargs)"})," returns a version of the format string S\nin which bracketed portions ",(0,t.jsx)(s.code,{children:"{...}"})," are replaced\nby arguments from ",(0,t.jsx)(s.code,{children:"args"})," and ",(0,t.jsx)(s.code,{children:"kwargs"}),"."]}),"\n",(0,t.jsxs)(s.p,{children:["Within the format string, a pair of braces ",(0,t.jsx)(s.code,{children:"{{"})," or ",(0,t.jsx)(s.code,{children:"}}"})," is treated as\na literal open or close brace.\nEach unpaired open brace must be matched by a close brace ",(0,t.jsx)(s.code,{children:"}"}),".\nThe optional text between corresponding open and close braces\nspecifies which argument to use and how to format it, and consists of\nthree components, all optional:\na field name, a conversion preceded by '",(0,t.jsx)(s.code,{children:"!"}),"', and a format specifier\npreceded by '",(0,t.jsx)(s.code,{children:":"}),"'."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-text",children:"{field}\n{field:spec}\n{field!conv}\n{field!conv:spec}\n"})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.em,{children:"field name"})," may be either a decimal number or a keyword.\nA number is interpreted as the index of a positional argument;\na keyword specifies the value of a keyword argument.\nIf all the numeric field names form the sequence 0, 1, 2, and so on,\nthey may be omitted and those values will be implied; however,\nthe explicit and implicit forms may not be mixed."]}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.em,{children:"conversion"})," specifies how to convert an argument value ",(0,t.jsx)(s.code,{children:"x"})," to a\nstring. It may be either ",(0,t.jsx)(s.code,{children:"!r"}),", which converts the value using\n",(0,t.jsx)(s.code,{children:"repr(x)"}),", or ",(0,t.jsx)(s.code,{children:"!s"}),", which converts the value using ",(0,t.jsx)(s.code,{children:"str(x)"})," and is\nthe default."]}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.em,{children:"format specifier"}),", after a colon, specifies field width,\nalignment, padding, and numeric precision.\nCurrently it must be empty, but it is reserved for future use."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-rust",children:'"a {} c".format(3) == "a 3 c"\n"a{x}b{y}c{}".format(1, x=2, y=3) == "a2b3c1"\n"a{}b{}c".format(1, 2) == "a1b2c"\n"({1}, {0})".format("zero", "one") == "(one, zero)"\n"Is {0!r} {0!s}?".format("heterological") == "Is \\"heterological\\" heterological?"\n'})}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"strindex",children:"str.index"}),"\n",(0,t.jsx)("pre",{class:"language-python",children:(0,t.jsxs)("code",{children:["def str.index(\nneedle: ",(0,t.jsx)(l.default,{to:"/docs/api/starlark/str",children:"str"}),",\nstart: None | ",(0,t.jsx)(l.default,{to:"/docs/api/starlark/int",children:"int"})," = None,\nend: None | ",(0,t.jsx)(l.default,{to:"/docs/api/starlark/int",children:"int"})," = None,\n/,\n) -> ",(0,t.jsx)(l.default,{to:"/docs/api/starlark/int",children:"int"})]})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.a,{href:"https://github.com/bazelbuild/starlark/blob/master/spec.md#string%C2%B7index",children:"string.index"}),": search a substring inside a string, failing on not found."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"S.index(sub[, start[, end]])"})," returns the index of the first\noccurrence of the substring ",(0,t.jsx)(s.code,{children:"sub"})," within S, like ",(0,t.jsx)(s.code,{children:"S.find"}),", except\nthat if the substring is not found, the operation fails."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:'"bonbon".index("on") == 1\n"bonbon".index("on", 2) == 4\n"bonbon".index("on", 2, 5)    # error: not found\n'})}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"strisalnum",children:"str.isalnum"}),"\n",(0,t.jsx)("pre",{class:"language-python",children:(0,t.jsxs)("code",{children:["def str.isalnum() -> ",(0,t.jsx)(l.default,{to:"/docs/api/starlark/bool",children:"bool"})]})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.a,{href:"https://github.com/bazelbuild/starlark/blob/master/spec.md#string%C2%B7isalnum",children:"string.isalnum"}),": test if a string is composed only of letters and digits."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"S.isalnum()"})," reports whether the string S is non-empty and consists\nonly Unicode letters and digits."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:'"base64".isalnum() == True\n"Catch-22".isalnum() == False\n'})}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"strisalpha",children:"str.isalpha"}),"\n",(0,t.jsx)("pre",{class:"language-python",children:(0,t.jsxs)("code",{children:["def str.isalpha() -> ",(0,t.jsx)(l.default,{to:"/docs/api/starlark/bool",children:"bool"})]})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.a,{href:"https://github.com/bazelbuild/starlark/blob/master/spec.md#string%C2%B7isalpha",children:"string.isalpha"}),": test if a string is composed only of letters."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"S.isalpha()"})," reports whether the string S is non-empty and consists\nonly of Unicode letters."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:'"ABC".isalpha() == True\n"Catch-22".isalpha() == False\n"".isalpha() == False\n'})}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"strisdigit",children:"str.isdigit"}),"\n",(0,t.jsx)("pre",{class:"language-python",children:(0,t.jsxs)("code",{children:["def str.isdigit() -> ",(0,t.jsx)(l.default,{to:"/docs/api/starlark/bool",children:"bool"})]})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.a,{href:"https://github.com/bazelbuild/starlark/blob/master/spec.md#string%C2%B7isdigit",children:"string.isdigit"}),": test if a string is composed only of digits."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"S.isdigit()"})," reports whether the string S is non-empty and consists\nonly of Unicode digits."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:'"123".isdigit() == True\n"Catch-22".isdigit() == False\n"".isdigit() == False\n'})}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"strislower",children:"str.islower"}),"\n",(0,t.jsx)("pre",{class:"language-python",children:(0,t.jsxs)("code",{children:["def str.islower() -> ",(0,t.jsx)(l.default,{to:"/docs/api/starlark/bool",children:"bool"})]})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.a,{href:"https://github.com/bazelbuild/starlark/blob/master/spec.md#string%C2%B7islower",children:"string.islower"}),": test if all letters of a string are lowercase."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"S.islower()"})," reports whether the string S contains at least one cased\nUnicode letter, and all such letters are lowercase."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:'"hello, world".islower() == True\n"Catch-22".islower() == False\n"123".islower() == False\n'})}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"strisspace",children:"str.isspace"}),"\n",(0,t.jsx)("pre",{class:"language-python",children:(0,t.jsxs)("code",{children:["def str.isspace() -> ",(0,t.jsx)(l.default,{to:"/docs/api/starlark/bool",children:"bool"})]})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.a,{href:"https://github.com/bazelbuild/starlark/blob/master/spec.md#string%C2%B7isspace",children:"string.isspace"}),": test if all characters of a string are whitespaces."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"S.isspace()"})," reports whether the string S is non-empty and consists\nonly of Unicode spaces."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:'"    ".isspace() == True\n"\\r\\t\\n".isspace() == True\n"".isspace() == False\n'})}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"stristitle",children:"str.istitle"}),"\n",(0,t.jsx)("pre",{class:"language-python",children:(0,t.jsxs)("code",{children:["def str.istitle() -> ",(0,t.jsx)(l.default,{to:"/docs/api/starlark/bool",children:"bool"})]})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.a,{href:"https://github.com/bazelbuild/starlark/blob/master/spec.md#string%C2%B7istitle",children:"string.istitle"}),": test if the string is title cased."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"S.istitle()"})," reports whether the string S contains at least one cased\nUnicode letter, and all such letters that begin a word are in title\ncase."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:'"Hello, World!".istitle() == True\n"Catch-22".istitle() == True\n"HAL-9000".istitle() == False\n"123".istitle() == False\n'})}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"strisupper",children:"str.isupper"}),"\n",(0,t.jsx)("pre",{class:"language-python",children:(0,t.jsxs)("code",{children:["def str.isupper() -> ",(0,t.jsx)(l.default,{to:"/docs/api/starlark/bool",children:"bool"})]})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.a,{href:"https://github.com/bazelbuild/starlark/blob/master/spec.md#string%C2%B7isupper",children:"string.isupper"}),": test if all letters of a string are uppercase."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"S.isupper()"})," reports whether the string S contains at least one cased\nUnicode letter, and all such letters are uppercase."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:'"HAL-9000".isupper() == True\n"Catch-22".isupper() == False\n"123".isupper() == False\n'})}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"strjoin",children:"str.join"}),"\n",(0,t.jsx)("pre",{class:"language-python",children:(0,t.jsxs)("code",{children:["def str.join(\nto_join: typing.Iterable[",(0,t.jsx)(l.default,{to:"/docs/api/starlark/str",children:"str"}),"],\n/,\n) -> ",(0,t.jsx)(l.default,{to:"/docs/api/starlark/str",children:"str"})]})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.a,{href:"https://github.com/bazelbuild/starlark/blob/master/spec.md#string%C2%B7join",children:"string.join"}),": join elements with a separator."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"S.join(iterable)"})," returns the string formed by concatenating each\nelement of its argument, with a copy of the string S between\nsuccessive elements. The argument must be an iterable whose elements\nare strings."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:'", ".join([]) == ""\n", ".join(("x", )) == "x"\n", ".join(["one", "two", "three"]) == "one, two, three"\n"a".join("ctmrn".elems()) == "catamaran"\n'})}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"strlower",children:"str.lower"}),"\n",(0,t.jsx)("pre",{class:"language-python",children:(0,t.jsxs)("code",{children:["def str.lower() -> ",(0,t.jsx)(l.default,{to:"/docs/api/starlark/str",children:"str"})]})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.a,{href:"https://github.com/bazelbuild/starlark/blob/master/spec.md#string%C2%B7lower",children:"string.lower"}),": convert a string to all lowercase."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"S.lower()"})," returns a copy of the string S with letters converted to\nlowercase."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:'"Hello, World!".lower() == "hello, world!"\n'})}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"strlstrip",children:"str.lstrip"}),"\n",(0,t.jsx)("pre",{class:"language-python",children:(0,t.jsxs)("code",{children:["def str.lstrip(\nchars: ",(0,t.jsx)(l.default,{to:"/docs/api/starlark/str",children:"str"})," = ...,\n/,\n) -> ",(0,t.jsx)(l.default,{to:"/docs/api/starlark/str",children:"str"})]})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.a,{href:"https://github.com/bazelbuild/starlark/blob/master/spec.md#string%C2%B7lstrip",children:"string.lstrip"}),": trim leading whitespaces."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"S.lstrip()"})," returns a copy of the string S with leading whitespace removed.\nIn most cases instead of passing an argument you should use ",(0,t.jsx)(s.code,{children:"removeprefix"}),"."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:'"  hello  ".lstrip() == "hello  "\n"x!hello  ".lstrip("!x ") == "hello  "\n'})}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"strpartition",children:"str.partition"}),"\n",(0,t.jsx)("pre",{class:"language-python",children:(0,t.jsxs)("code",{children:["def str.partition(\nneedle: ",(0,t.jsx)(l.default,{to:"/docs/api/starlark/str",children:"str"}),",\n/,\n) -> (",(0,t.jsx)(l.default,{to:"/docs/api/starlark/str",children:"str"}),", ",(0,t.jsx)(l.default,{to:"/docs/api/starlark/str",children:"str"}),", ",(0,t.jsx)(l.default,{to:"/docs/api/starlark/str",children:"str"}),")"]})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.a,{href:"https://github.com/bazelbuild/starlark/blob/master/spec.md#string%C2%B7partition",children:"string.partition"}),": partition a string in 3 components"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:'S.partition(x = " ")'})," splits string S into three parts and returns them\nas a tuple: the portion before the first occurrence of string ",(0,t.jsx)(s.code,{children:"x"}),",\n",(0,t.jsx)(s.code,{children:"x"})," itself, and the portion following it.\nIf S does not contain ",(0,t.jsx)(s.code,{children:"x"}),", ",(0,t.jsx)(s.code,{children:"partition"})," returns ",(0,t.jsx)(s.code,{children:'(S, "", "")'}),"."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"partition"})," fails if ",(0,t.jsx)(s.code,{children:"x"})," is not a string, or is the empty string."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:'"one/two/three".partition("/") == ("one", "/", "two/three")\n"one".partition("/") == ("one", "", "")\n'})}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"strremoveprefix",children:"str.removeprefix"}),"\n",(0,t.jsx)("pre",{class:"language-python",children:(0,t.jsxs)("code",{children:["def str.removeprefix(\nprefix: ",(0,t.jsx)(l.default,{to:"/docs/api/starlark/str",children:"str"}),",\n/,\n) -> ",(0,t.jsx)(l.default,{to:"/docs/api/starlark/str",children:"str"})]})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.a,{href:"https://docs.python.org/3.9/library/stdtypes.html#str.removeprefix",children:"string.removeprefix"}),": remove a prefix from a string. ",(0,t.jsx)(s.em,{children:"Not part of standard Starlark."})]}),"\n",(0,t.jsxs)(s.p,{children:["If the string starts with the prefix string, return ",(0,t.jsx)(s.code,{children:"string[len(prefix):]"}),".\nOtherwise, return a copy of the original string:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:'"Hello, World!".removeprefix("Hello") == ", World!"\n"Hello, World!".removeprefix("Goodbye") == "Hello, World!"\n"Hello".removeprefix("Hello") == ""\n'})}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"strremovesuffix",children:"str.removesuffix"}),"\n",(0,t.jsx)("pre",{class:"language-python",children:(0,t.jsxs)("code",{children:["def str.removesuffix(\nsuffix: ",(0,t.jsx)(l.default,{to:"/docs/api/starlark/str",children:"str"}),",\n/,\n) -> ",(0,t.jsx)(l.default,{to:"/docs/api/starlark/str",children:"str"})]})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.a,{href:"https://docs.python.org/3.9/library/stdtypes.html#str.removesuffix",children:"string.removesuffix"}),": remove a prefix from a string. ",(0,t.jsx)(s.em,{children:"Not part of standard Starlark."})]}),"\n",(0,t.jsxs)(s.p,{children:["If the string starts with the prefix string, return ",(0,t.jsx)(s.code,{children:"string[len(prefix):]"}),".\nOtherwise, return a copy of the original string:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:'"Hello, World!".removesuffix("World!") == "Hello, "\n"Hello, World!".removesuffix("World") == "Hello, World!"\n"Hello".removesuffix("Hello") == ""\n'})}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"strreplace",children:"str.replace"}),"\n",(0,t.jsx)("pre",{class:"language-python",children:(0,t.jsxs)("code",{children:["def str.replace(\nold: ",(0,t.jsx)(l.default,{to:"/docs/api/starlark/str",children:"str"}),",\nnew: ",(0,t.jsx)(l.default,{to:"/docs/api/starlark/str",children:"str"}),",\ncount: ",(0,t.jsx)(l.default,{to:"/docs/api/starlark/int",children:"int"})," = ...,\n/,\n) -> ",(0,t.jsx)(l.default,{to:"/docs/api/starlark/str",children:"str"})]})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.a,{href:"https://github.com/bazelbuild/starlark/blob/master/spec.md#string%C2%B7replace",children:"string.replace"}),": replace all occurrences of a substring."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"S.replace(old, new[, count])"})," returns a copy of string S with all\noccurrences of substring ",(0,t.jsx)(s.code,{children:"old"})," replaced by ",(0,t.jsx)(s.code,{children:"new"}),". If the optional\nargument ",(0,t.jsx)(s.code,{children:"count"}),", which must be an ",(0,t.jsx)(s.code,{children:"int"}),", is non-negative, it\nspecifies a maximum number of occurrences to replace."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:'"banana".replace("a", "o") == "bonono"\n"banana".replace("a", "o", 2) == "bonona"\n"banana".replace("z", "x") == "banana"\n"banana".replace("", "x") == "xbxaxnxaxnxax"\n"banana".replace("", "x", 2) == "xbxanana"\n"".replace("", "x") == "x"\n"banana".replace("a", "o", -2)  # error: argument was negative\n'})}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"strrfind",children:"str.rfind"}),"\n",(0,t.jsx)("pre",{class:"language-python",children:(0,t.jsxs)("code",{children:["def str.rfind(\nneedle: ",(0,t.jsx)(l.default,{to:"/docs/api/starlark/str",children:"str"}),",\nstart: None | ",(0,t.jsx)(l.default,{to:"/docs/api/starlark/int",children:"int"})," = None,\nend: None | ",(0,t.jsx)(l.default,{to:"/docs/api/starlark/int",children:"int"})," = None,\n/,\n) -> ",(0,t.jsx)(l.default,{to:"/docs/api/starlark/int",children:"int"})]})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.a,{href:"https://github.com/bazelbuild/starlark/blob/master/spec.md#string%C2%B7rfind",children:"string.rfind"}),": find the last index of a substring."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"S.rfind(sub[, start[, end]])"})," returns the index of the substring ",(0,t.jsx)(s.code,{children:"sub"}),"\nwithin S, like ",(0,t.jsx)(s.code,{children:"S.find"}),", except that ",(0,t.jsx)(s.code,{children:"rfind"})," returns the index of\nthe substring's ",(0,t.jsx)(s.em,{children:"last"})," occurrence."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:'"bonbon".rfind("on") == 4\n"bonbon".rfind("on", None, 5) == 1\n"bonbon".rfind("on", 2, 5) == -1\n'})}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"strrindex",children:"str.rindex"}),"\n",(0,t.jsx)("pre",{class:"language-python",children:(0,t.jsxs)("code",{children:["def str.rindex(\nneedle: ",(0,t.jsx)(l.default,{to:"/docs/api/starlark/str",children:"str"}),",\nstart: None | ",(0,t.jsx)(l.default,{to:"/docs/api/starlark/int",children:"int"})," = None,\nend: None | ",(0,t.jsx)(l.default,{to:"/docs/api/starlark/int",children:"int"})," = None,\n/,\n) -> ",(0,t.jsx)(l.default,{to:"/docs/api/starlark/int",children:"int"})]})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.a,{href:"https://github.com/bazelbuild/starlark/blob/master/spec.md#string%C2%B7rindex",children:"string.rindex"}),": find the last index of a substring, failing on not found."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"S.rindex(sub[, start[, end]])"})," returns the index of the substring ",(0,t.jsx)(s.code,{children:"sub"}),"\nwithin S, like ",(0,t.jsx)(s.code,{children:"S.index"}),", except that ",(0,t.jsx)(s.code,{children:"rindex"})," returns the index of\nthe substring's ",(0,t.jsx)(s.em,{children:"last"})," occurrence."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:'"bonbon".rindex("on") == 4\n"bonbon".rindex("on", None, 5) == 1  # in "bonbo"\n"bonbon".rindex("on", 2, 5) #   error: not found\n'})}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"strrpartition",children:"str.rpartition"}),"\n",(0,t.jsx)("pre",{class:"language-python",children:(0,t.jsxs)("code",{children:["def str.rpartition(\nneedle: ",(0,t.jsx)(l.default,{to:"/docs/api/starlark/str",children:"str"}),",\n/,\n) -> (",(0,t.jsx)(l.default,{to:"/docs/api/starlark/str",children:"str"}),", ",(0,t.jsx)(l.default,{to:"/docs/api/starlark/str",children:"str"}),", ",(0,t.jsx)(l.default,{to:"/docs/api/starlark/str",children:"str"}),")"]})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.a,{href:"https://github.com/bazelbuild/starlark/blob/master/spec.md#string%C2%B7rpartition",children:"string.rpartition"}),": partition a string in 3 elements."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"S.rpartition([x = ' '])"})," is like ",(0,t.jsx)(s.code,{children:"partition"}),", but splits ",(0,t.jsx)(s.code,{children:"S"})," at the\nlast occurrence of ",(0,t.jsx)(s.code,{children:"x"}),"."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:'"one/two/three".rpartition("/") == ("one/two", "/", "three")\n"one".rpartition("/") == ("", "", "one")\n'})}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"strrsplit",children:"str.rsplit"}),"\n",(0,t.jsx)("pre",{class:"language-python",children:(0,t.jsxs)("code",{children:["def str.rsplit(\nsep: None | ",(0,t.jsx)(l.default,{to:"/docs/api/starlark/str",children:"str"})," = None,\nmaxsplit: None | ",(0,t.jsx)(l.default,{to:"/docs/api/starlark/int",children:"int"})," = None,\n/,\n) -> list[",(0,t.jsx)(l.default,{to:"/docs/api/starlark/str",children:"str"}),"]"]})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.a,{href:"https://github.com/bazelbuild/starlark/blob/master/spec.md#string%C2%B7rsplit",children:"string.rsplit"}),": splits a string into substrings."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"S.rsplit([sep[, maxsplit]])"})," splits a string into substrings like\n",(0,t.jsx)(s.code,{children:"S.split"}),", except that when a maximum number of splits is specified,\n",(0,t.jsx)(s.code,{children:"rsplit"})," chooses the rightmost splits."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:'"banana".rsplit("n") == ["ba", "a", "a"]\n"banana".rsplit("n", 1) == ["bana", "a"]\n"one two  three".rsplit(None, 1) == ["one two", "three"]\n'})}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"strrstrip",children:"str.rstrip"}),"\n",(0,t.jsx)("pre",{class:"language-python",children:(0,t.jsxs)("code",{children:["def str.rstrip(\nchars: ",(0,t.jsx)(l.default,{to:"/docs/api/starlark/str",children:"str"})," = ...,\n/,\n) -> ",(0,t.jsx)(l.default,{to:"/docs/api/starlark/str",children:"str"})]})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.a,{href:"https://github.com/bazelbuild/starlark/blob/master/spec.md#string%C2%B7rstrip",children:"string.rstrip"}),": trim trailing whitespace."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"S.rstrip()"})," returns a copy of the string S with trailing whitespace removed.\nIn most cases instead of passing an argument you should use ",(0,t.jsx)(s.code,{children:"removesuffix"}),"."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:'"  hello  ".rstrip() == "  hello"\n"  hello!x".rstrip(" x!") == "  hello"\n'})}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"strsplit",children:"str.split"}),"\n",(0,t.jsx)("pre",{class:"language-python",children:(0,t.jsxs)("code",{children:["def str.split(\nsep: None | ",(0,t.jsx)(l.default,{to:"/docs/api/starlark/str",children:"str"})," = None,\nmaxsplit: None | ",(0,t.jsx)(l.default,{to:"/docs/api/starlark/int",children:"int"})," = None,\n/,\n) -> list[",(0,t.jsx)(l.default,{to:"/docs/api/starlark/str",children:"str"}),"]"]})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.a,{href:"https://github.com/bazelbuild/starlark/blob/master/spec.md#string%C2%B7split",children:"string.split"}),": split a string in substrings."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"S.split([sep [, maxsplit]])"})," returns the list of substrings of S,\nsplitting at occurrences of the delimiter string ",(0,t.jsx)(s.code,{children:"sep"}),"."]}),"\n",(0,t.jsxs)(s.p,{children:["Consecutive occurrences of ",(0,t.jsx)(s.code,{children:"sep"})," are considered to delimit empty\nstrings, so ",(0,t.jsx)(s.code,{children:"'food'.split('o')"})," returns ",(0,t.jsx)(s.code,{children:"['f', '', 'd']"}),".\nSplitting an empty string with a specified separator returns ",(0,t.jsx)(s.code,{children:"['']"}),".\nIf ",(0,t.jsx)(s.code,{children:"sep"})," is the empty string, ",(0,t.jsx)(s.code,{children:"split"})," fails."]}),"\n",(0,t.jsxs)(s.p,{children:["If ",(0,t.jsx)(s.code,{children:"sep"})," is not specified or is ",(0,t.jsx)(s.code,{children:"None"}),", ",(0,t.jsx)(s.code,{children:"split"})," uses a different\nalgorithm: it removes all leading spaces from S\n(or trailing spaces in the case of ",(0,t.jsx)(s.code,{children:"rsplit"}),"),\nthen splits the string around each consecutive non-empty sequence of\nUnicode white space characters."]}),"\n",(0,t.jsxs)(s.p,{children:["If S consists only of white space, ",(0,t.jsx)(s.code,{children:"split"})," returns the empty list."]}),"\n",(0,t.jsxs)(s.p,{children:["If ",(0,t.jsx)(s.code,{children:"maxsplit"})," is given and non-negative, it specifies a maximum number\nof splits."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:'"one two  three".split() == ["one", "two", "three"]\n"one two  three".split(" ") == ["one", "two", "", "three"]\n"one two  three".split(None, 1) == ["one", "two  three"]\n"banana".split("n") == ["ba", "a", "a"]\n"banana".split("n", 1) == ["ba", "ana"]\n'})}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"strsplitlines",children:"str.splitlines"}),"\n",(0,t.jsx)("pre",{class:"language-python",children:(0,t.jsxs)("code",{children:["def str.splitlines(\nkeepends: ",(0,t.jsx)(l.default,{to:"/docs/api/starlark/bool",children:"bool"})," = False,\n/,\n) -> list[",(0,t.jsx)(l.default,{to:"/docs/api/starlark/str",children:"str"}),"]"]})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.a,{href:"https://github.com/bazelbuild/starlark/blob/master/spec.md#string%C2%B7splitlines",children:"string.splitlines"}),": return the list of lines of a string."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"S.splitlines([keepends])"})," returns a list whose elements are the\nsuccessive lines of S, that is, the strings formed by splitting S at\nline terminators ('\\n', '\\r' or '\\r\\n')."]}),"\n",(0,t.jsxs)(s.p,{children:["The optional argument, ",(0,t.jsx)(s.code,{children:"keepends"}),", is interpreted as a Boolean.\nIf true, line terminators are preserved in the result, though\nthe final element does not necessarily end with a line terminator."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:'"one\\n\\ntwo".splitlines() == ["one", "", "two"]\n"one\\n\\ntwo".splitlines(True) == ["one\\n", "\\n", "two"]\n"a\\nb".splitlines() == ["a", "b"]\n'})}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"strstartswith",children:"str.startswith"}),"\n",(0,t.jsx)("pre",{class:"language-python",children:(0,t.jsxs)("code",{children:["def str.startswith(\nprefix: ",(0,t.jsx)(l.default,{to:"/docs/api/starlark/str",children:"str"})," | tuple[",(0,t.jsx)(l.default,{to:"/docs/api/starlark/str",children:"str"}),", ...],\n/,\n) -> ",(0,t.jsx)(l.default,{to:"/docs/api/starlark/bool",children:"bool"})]})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.a,{href:"https://github.com/bazelbuild/starlark/blob/master/spec.md#string%C2%B7startswith",children:"string.startswith"}),": test whether a string starts with a given prefix."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"S.startswith(suffix)"})," reports whether the string S has the specified\nprefix."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"\"filename.sky\".startswith(\"filename\") == True\n\"filename.sky\".startswith(\"sky\") == False\n'abc'.startswith(('a', 'A')) == True\n'ABC'.startswith(('a', 'A')) == True\n'def'.startswith(('a', 'A')) == False\n"})}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"strstrip",children:"str.strip"}),"\n",(0,t.jsx)("pre",{class:"language-python",children:(0,t.jsxs)("code",{children:["def str.strip(\nchars: ",(0,t.jsx)(l.default,{to:"/docs/api/starlark/str",children:"str"})," = ...,\n/,\n) -> ",(0,t.jsx)(l.default,{to:"/docs/api/starlark/str",children:"str"})]})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.a,{href:"https://github.com/bazelbuild/starlark/blob/master/spec.md#string%C2%B7strip",children:"string.strip"}),": trim leading and trailing whitespaces."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"S.strip()"})," returns a copy of the string S with leading and trailing\nwhitespace removed."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:'"  hello  ".strip() == "hello"\n"xxhello!!".strip("x!") == "hello"\n'})}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"strtitle",children:"str.title"}),"\n",(0,t.jsx)("pre",{class:"language-python",children:(0,t.jsxs)("code",{children:["def str.title() -> ",(0,t.jsx)(l.default,{to:"/docs/api/starlark/str",children:"str"})]})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.a,{href:"https://github.com/bazelbuild/starlark/blob/master/spec.md#string%C2%B7title",children:"string.title"}),": convert a string to title case."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"S.title()"})," returns a copy of the string S with letters converted to\ntitlecase."]}),"\n",(0,t.jsx)(s.p,{children:"Letters are converted to uppercase at the start of words, lowercase\nelsewhere."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:'"hElLo, WoRlD!".title() == "Hello, World!"\n'})}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"strupper",children:"str.upper"}),"\n",(0,t.jsx)("pre",{class:"language-python",children:(0,t.jsxs)("code",{children:["def str.upper() -> ",(0,t.jsx)(l.default,{to:"/docs/api/starlark/str",children:"str"})]})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.a,{href:"https://github.com/bazelbuild/starlark/blob/master/spec.md#string%C2%B7upper",children:"string.upper"}),": convert a string to all uppercase."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"S.upper()"})," returns a copy of the string S with letters converted to\nuppercase."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:'"Hello, World!".upper() == "HELLO, WORLD!"\n'})})]})}function p(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}}}]);