load("@fbcode//buck2/prelude/intellij_project:utils.bxl", "get_artifact_path")
load("@fbcode//buck2/prelude/utils:utils.bzl", "expect")

IjLibrary = record(
    jar = "configured_attr_val",
    label = "configured_target_label",
    name = str.type,
    rule_type = str.type,
    source_jar = "configured_attr_val",
)

_PREBUILT_JAR_RULE_TYPE = "fbcode//buck2/prelude/rules.bzl:prebuilt_jar"
_LIBRARY_RULE_TYPES = [
    _PREBUILT_JAR_RULE_TYPE,
]

def get_libraries(all_nodes: "target_set") -> [IjLibrary.type]:
    libraries = []
    for node in all_nodes:
        # TODO(T124404704) find a better way to exclude exec_deps()
        if node.label.cell != "fbsource":
            continue

        rule_type = node.rule_type
        if rule_type not in _LIBRARY_RULE_TYPES:
            continue

        if rule_type == _PREBUILT_JAR_RULE_TYPE:
            libraries.append(_get_prebuilt_jar_ij_library(node))
        else:
            fail("Should add if branch above for rule type: {}".format(rule_type))

    return libraries

def _get_prebuilt_jar_ij_library(node: "target_node") -> IjLibrary.type:
    expect(node.rule_type == _PREBUILT_JAR_RULE_TYPE, "Rule type must be {} but was {}".format(_PREBUILT_JAR_RULE_TYPE, node.rule_type))
    return IjLibrary(
        name = str(node.label.raw_target()),
        jar = node.attrs().binary_jar,
        label = node.label,
        rule_type = _PREBUILT_JAR_RULE_TYPE,
        source_jar = node.attrs().source_jar,
    )

def get_project_library_file_name(library_label: "configured_target_label") -> str.type:
    # TODO(T124405159) this should also include the config
    package_name = library_label.package.replace("/", "_")
    return "libraries/__{}_{}__.xml".format(package_name, library_label.name)

def get_project_library_contents(ij_library: IjLibrary.type) -> str.type:
    # TODO(T124405159) name should also include the config
    # TODO(T124404955) add sources tag
    return """\
<component name="libraryTable">{library_xml}
</component>
""".format(library_xml = get_library_xml(ij_library, "  "))

def get_library_xml(ij_library: IjLibrary.type, base_indentation: str.type) -> str.type:
    return """
{base_indentation}<library name="{name}">
{base_indentation}  <CLASSES>
{base_indentation}    <root url="jar://$PROJECT_DIR$/{jar}!/" />
{base_indentation}  </CLASSES>{sources}
{base_indentation}  <JAVADOC />
{base_indentation}</library>""".format(
        base_indentation = base_indentation,
        name = ij_library.name,
        jar = get_artifact_path(ij_library.jar.value()),
        sources = _get_sources_xml(ij_library, base_indentation + "  "),
    )

def _get_sources_xml(ij_library: IjLibrary.type, base_indentation: str.type) -> str.type:
    source_jar = ij_library.source_jar.value()
    if not source_jar:
        return ""

    source_jar_path = get_artifact_path(source_jar)
    return """
{base_indentation}<SOURCES>
{base_indentation}  <root url="jar://$PROJECT_DIR$/{source_jar}!/" />
{base_indentation}</SOURCES>""".format(base_indentation = base_indentation, source_jar = source_jar_path)
