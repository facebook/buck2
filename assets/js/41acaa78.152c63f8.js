"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[25293],{28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>l});var i=t(96540);const a={},r=i.createContext(a);function s(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),i.createElement(r.Provider,{value:n},e.children)}},66500:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"users/advanced/deferred_materialization","title":"Deferred Materialization","description":"When using Remote Execution, Buck2 operates with","source":"@site/../docs/users/advanced/deferred_materialization.md","sourceDirName":"users/advanced","slug":"/users/advanced/deferred_materialization","permalink":"/docs/users/advanced/deferred_materialization","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"deferred_materialization","title":"Deferred Materialization"},"sidebar":"main","previous":{"title":"Uquery Environment","permalink":"/docs/users/query/uquery"},"next":{"title":"Restarter","permalink":"/docs/users/advanced/restarter"}}');var a=t(74848),r=t(28453),s=t(78191);const l={id:"deferred_materialization",title:"Deferred Materialization"},c=void 0,o={},d=[{value:"Pitfalls",id:"pitfalls",level:2},{value:"On-disk state",id:"on-disk-state",level:2},{value:"Deferring Write Actions",id:"deferring-write-actions",level:2},{value:"<code>buck2 clean --stale</code>",id:"buck2-clean---stale",level:2}];function u(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:["When using ",(0,a.jsx)(n.a,{href:"/docs/users/remote_execution",children:"Remote Execution"}),", Buck2 operates with\nDeferred Materialization, which means that Buck2 will avoid downloading outputs\nuntil they are required by a local action."]}),"\n",(0,a.jsx)(n.p,{children:"This can provide very substantial performance savings on builds that execute\nprimarily on Remote Execution, since those builds become able to proceed without\never downloading any intermediary outputs."}),"\n",(0,a.jsx)(n.p,{children:"At Meta, despite very fast networks being used internally, this was was observed\nto make real-world builds finish approximately 2.5 times faster."}),"\n",(0,a.jsx)(n.h2,{id:"pitfalls",children:"Pitfalls"}),"\n",(0,a.jsx)(n.p,{children:"Buck2's deferred materialization makes assumptions about your Remote Execution\nbackend. In particular, it expects that the TTL returned from action cache\nentries by your Remote Execution backend always exceeds the TTL of all output\nartifacts it references."}),"\n",(0,a.jsx)(n.p,{children:"Nonetheless, artifacts may also eventually expire from your Remote Execution\nbackend. When that happens, builds using Deferred Materialization may fail if\nthose artifacts are needed locally."}),"\n",(0,a.jsxs)(n.p,{children:["A kill is necessary to recover from those builds. However, the\n",(0,a.jsx)(n.a,{href:"/docs/users/advanced/restarter",children:"Restarter"})," can be used to mitigate this issue by restarting Buck2\ndaemon when it encounters an expired artifact."]}),"\n",(0,a.jsx)(s.OssOnly,{children:(0,a.jsx)(n.p,{children:"At Meta, artifacts get periodically refreshed, but open source RE backends do not expose the TTL of artifacts, so this feature does not work outside of Meta."})}),"\n",(0,a.jsx)(n.h2,{id:"on-disk-state",children:"On-disk state"}),"\n",(0,a.jsx)(n.p,{children:"Buck2 can also optionally track its state on disk in a SQLite database. This\nallows Buck2 to remember what files are on disk across restarts."}),"\n",(0,a.jsx)(n.p,{children:"This can allow Buck2 to avoid re-downloading outputs from your Remote Execution\nbackend if they are already on disk."}),"\n",(0,a.jsx)(n.p,{children:"To enable, add this to your Buckconfig:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ini",children:"[buck2]\nsqlite_materializer_state = true\n"})}),"\n",(0,a.jsx)(n.h2,{id:"deferring-write-actions",children:"Deferring Write Actions"}),"\n",(0,a.jsx)(n.p,{children:"To further speedup builds, Buck2 can also be instructed to not execute any\nwrites on the critical path for a build."}),"\n",(0,a.jsx)(n.p,{children:"To enable, add this to your Buckconfig:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ini",children:"[buck2]\ndefer_write_actions = true\n"})}),"\n",(0,a.jsx)(n.p,{children:"This mechanism is recommended if you're using the On-disk State, since it means\nBuck can omit writes entirely if the same content is already on disk."}),"\n",(0,a.jsx)(n.h2,{id:"buck2-clean---stale",children:(0,a.jsx)(n.code,{children:"buck2 clean --stale"})}),"\n",(0,a.jsx)(n.p,{children:"The deferred materializer can be configured to continuously delete stale\nartifacts, that haven't been recently accessed, or untracked artifacts, that\nexist in buck-out but not in the materalizer state."}),"\n",(0,a.jsxs)(n.p,{children:["Unlike ",(0,a.jsx)(n.code,{children:"buck2 clean"})," this does not fully wipe buck-out but it should not\nnegatively impact build performance if you are building and rebasing regularly."]}),"\n",(0,a.jsxs)(n.p,{children:["Enabling this requires enabling ",(0,a.jsx)(n.a,{href:"#on-disk-state",children:"on-disk state"})," and\n",(0,a.jsx)(n.a,{href:"#deferring-write-actions",children:"deferred write actions"}),", and adding this to your\nBuckconfig:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ini",children:"[buck2]\nclean_stale_enabled = true\n"})}),"\n",(0,a.jsx)(n.p,{children:"It can be further configured by changing these default values:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ini",children:"[buck2]\n# one week\nclean_stale_artifact_ttl_hours = 24 * 7\nclean_stale_period_hours = 24\nclean_stale_start_offset_hours = 12\n"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"clean_stale_start_offset_hours"})," determines the time following daemon start up\nbefore the first clean will be scheduled."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"clean_stale_period_hours"})," determines how frequently to schedule recurring\nclean events."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"clean_stale_artifact_ttl_hours"})," determines how long artifacts should be kept\nin buck-out before cleaning them."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"If clean stale is running in the background at the same time that a build begins\nto materialize artifacts, the clean will be interrupted and not run again until\nafter the next scheduled period, but it should be able to make gradual progress\nand prevent long term accumulation of artifacts."}),"\n",(0,a.jsxs)(n.p,{children:["If needed, a clean can be manually triggered by calling ",(0,a.jsx)(n.code,{children:"buck2 clean --stale"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}}}]);