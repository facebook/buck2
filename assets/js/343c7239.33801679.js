"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[89283],{17083:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>h,frontMatter:()=>c,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"api/bxl_utils/lazy","title":"lazy","description":"The following functions are defined in the bxl filelazy.bxl.             You can import them in your bxl file by using load(\\"@prelude//bxl:lazy.bxl\\", \\"function_name\\")","source":"@site/../docs/api/bxl_utils/lazy.md","sourceDirName":"api/bxl_utils","slug":"/api/bxl_utils/lazy","permalink":"/docs/api/bxl_utils/lazy","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"apiSidebar","previous":{"title":"ensure","permalink":"/docs/api/bxl_utils/ensure"}}');var r=l(74848),t=l(28453);const c={},i="lazy",a={},d=[{value:"batch_apply_lazy",id:"batch_apply_lazy",level:2},{value:"batch_apply_lazy_catch_all",id:"batch_apply_lazy_catch_all",level:2},{value:"batch_apply_lazy_catch_each",id:"batch_apply_lazy_catch_each",level:2},{value:"catch_resolve_lazy_dict",id:"catch_resolve_lazy_dict",level:2},{value:"partition_results",id:"partition_results",level:2},{value:"partition_results_dict",id:"partition_results_dict",level:2}];function o(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"lazy",children:"lazy"})}),"\n",(0,r.jsxs)(n.p,{children:["The following functions are defined in the bxl file: ",(0,r.jsx)(n.code,{children:"prelude//bxl:lazy.bxl"}),".             You can import them in your bxl file by using ",(0,r.jsx)(n.code,{children:'load("@prelude//bxl:lazy.bxl", "function_name")'})]}),"\n",(0,r.jsx)(n.p,{children:"Utils functions for working with bxl.Lazy objects."}),"\n",(0,r.jsx)(n.h2,{id:"batch_apply_lazy",children:"batch_apply_lazy"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def batch_apply_lazy(\n    bxl_ctx: bxl.Context,\n    lazy_func: typing.Callable[[typing.Any], bxl.Lazy],\n    args: list,\n) -> list\n"})}),"\n",(0,r.jsx)(n.p,{children:"Applies a lazy function to a list of arguments, resolves them in parallel, and returns raw results. It will cause bxl fail immediately if any operation fails (no error catching)."}),"\n",(0,r.jsx)(n.p,{children:"Parameters:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"bxl_ctx"})," (",(0,r.jsx)(n.code,{children:"bxl.Context"}),"): The BXL context object."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"lazy_func"})," (",(0,r.jsx)(n.code,{children:"typing.Callable[[Any], bxl.Lazy]"}),"): A function that takes a single argument and returns a ",(0,r.jsx)(n.code,{children:"bxl.Lazy"}),"\n(e.g., ",(0,r.jsx)(n.code,{children:"ctx.lazy.analysis"}),", ",(0,r.jsx)(n.code,{children:"ctx.lazy.configured_target_node"}),", or any other functon/lambda you defined)."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"args"})," (",(0,r.jsx)(n.code,{children:"list[typing.Any]"}),"): List of arguments to apply to ",(0,r.jsx)(n.code,{children:"lazy_func"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"A list of resolved values. If any operation fails, the bxl script will fail."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def _impl(ctx):\n    targets = [\n        "cell//:valid_target1",\n        "cell//:valid_target2"\n    ]\n\n    # Resolve to all configured target nodes without error catching\n    nodes = batch_apply_lazy(ctx, ctx.lazy.configured_target_node, targets)\n    ctx.output.print(f"All configured target nodes: {nodes}")\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"batch_apply_lazy_catch_all",children:"batch_apply_lazy_catch_all"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def batch_apply_lazy_catch_all(\n    bxl_ctx: bxl.Context,\n    lazy_func: typing.Callable[[typing.Any], bxl.Lazy],\n    args: list,\n) -> bxl.Result\n"})}),"\n",(0,r.jsx)(n.p,{children:"Applies a lazy function to a list of arguments, joins them into a single batch operation, and resolves with a global error catch. Returns either all successes or the first error encountered."}),"\n",(0,r.jsx)(n.p,{children:"Parameters:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"bxl_ctx"})," (",(0,r.jsx)(n.code,{children:"bxl.Context"}),"): The BXL context object."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"lazy_func"})," (",(0,r.jsx)(n.code,{children:"typing.Callable[[typing.Any], bxl.Lazy]"}),"): A function that returns a ",(0,r.jsx)(n.code,{children:"bxl.Lazy"}),"\n(e.g., ",(0,r.jsx)(n.code,{children:"ctx.lazy.analysis"}),", ",(0,r.jsx)(n.code,{children:"ctx.lazy.configured_target_node"}),", or any other functon/lambda you defined).."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"args"})," (",(0,r.jsx)(n.code,{children:"list[typing.Any]"}),"): List of arguments to apply to ",(0,r.jsx)(n.code,{children:"lazy_func"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"bxl.Result"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Ok(list)"}),": If all operations succeed, returns the list of resolved values."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Err(error)"}),": If any operation fails, returns the first error encountered."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def _impl(ctx):\n    targets = [\n        "cell//:valid_target1",\n        "cell//:valid_target2"\n        "cell//:invalid_target1",\n    ]\n\n    # Resolve as a single batch with global error handling\n    batch_result = batch_apply_lazy_catch_all(ctx, ctx.lazy.configured_target_node, targets)\n\n    if batch_result.is_ok():\n        res = batch_result.unwrap()\n        ctx.output.print(f"All succeeded: {len(res)}")\n    else:\n        error = batch_result.unwrap_err()\n        ctx.output.print(f"Batch failed: {error}")\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"batch_apply_lazy_catch_each",children:"batch_apply_lazy_catch_each"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def batch_apply_lazy_catch_each(\n    bxl_ctx: bxl.Context,\n    lazy_func: typing.Callable[[typing.Any], bxl.Lazy],\n    args: list,\n) -> list[bxl.Result]\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Applies a lazy function to a list of arguments, resolves them in parallel, and returns individual ",(0,r.jsx)(n.code,{children:"Result"})," objects for each operation. Errors are isolated per item."]}),"\n",(0,r.jsx)(n.p,{children:"Parameters:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"bxl_ctx"})," (",(0,r.jsx)(n.code,{children:"bxl.Context"}),"): The BXL context object."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"lazy_func"})," (",(0,r.jsx)(n.code,{children:"typing.Callable[[typing.Any], bxl.Lazy]"}),"): A function that returns a ",(0,r.jsx)(n.code,{children:"bxl.Lazy"}),"\n(e.g., ",(0,r.jsx)(n.code,{children:"ctx.lazy.analysis"}),", ",(0,r.jsx)(n.code,{children:"ctx.lazy.configured_target_node"}),", or any other functon/lambda you defined).."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"args"})," (",(0,r.jsx)(n.code,{children:"list[typing.Any]"}),"): List of arguments to apply to ",(0,r.jsx)(n.code,{children:"lazy_func"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"list[bxl.Result]"}),": A list of ",(0,r.jsx)(n.code,{children:"Result"})," objects in the same order as ",(0,r.jsx)(n.code,{children:"args"}),". Each ",(0,r.jsx)(n.code,{children:"Result"})," can be\n",(0,r.jsx)(n.code,{children:"Ok(value)"})," or ",(0,r.jsx)(n.code,{children:"Err(error)"}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def _impl(ctx):\n    targets = [\n        "cell//:valid_target1",\n        "cell//:valid_target2"\n        "cell//:invalid_target1",\n    ]\n\n    # Resolve analyses with per-item error handling\n    results = batch_apply_lazy_catch_each(ctx, ctx.lazy.configured_target_node, targets)\n\n    for target, res in zip(targets, results):\n        if res.is_ok():\n            node = res.unwrap()\n            ctx.output.print(f"Get configured target node for {target} SUCCESS: {node}")\n        else:\n            error = res.unwrap_err()\n            ctx.output.print(f"Get configured target node for {target} FAILED: {error}")\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"catch_resolve_lazy_dict",children:"catch_resolve_lazy_dict"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def catch_resolve_lazy_dict(\n    bxl_ctx: bxl.Context,\n    lazy_dict: dict[typing.Any, bxl.Lazy],\n) -> dict[typing.Any, bxl.Result]\n"})}),"\n",(0,r.jsx)(n.p,{children:"Resolves a dictionary of bxl.Lazy operations in parallel while capturing errors."}),"\n",(0,r.jsx)(n.p,{children:"Parameters:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"bxl_ctx"}),": BXL context"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"lazy_dict"}),": Dictionary to resolve, where values must be ",(0,r.jsx)(n.code,{children:"bxl.Lazy"})," instances"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["A new dictionary preserving original keys, with values as ",(0,r.jsx)(n.code,{children:"bxl.Result"})," objects."]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def _impl(ctx):\n    lazy_dict = {\n        "app": ctx.lazy.configured_targets("cell//:app"),\n        "lib": ctx.lazy.configured_targets("cell//:lib")\n    }\n\n    # Batch resolve and process\n    results = catch_resolve_lazy_dict(ctx, lazy_dict)\n    for name, res in results.items():\n        if res.is_ok():\n            ctx.output.print(f"{name}: {res.unwrap()}")\n        else:\n            ctx.output.print(f"{name} failed: {res.unwrap_err()}")\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"partition_results",children:"partition_results"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def partition_results(results: list[bxl.Result]) -> (list, list[bxl.Error])\n"})}),"\n",(0,r.jsx)(n.p,{children:"Splits Results into successful values and errors."}),"\n",(0,r.jsx)(n.p,{children:"Parameters:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"results"}),": List of ",(0,r.jsx)(n.code,{children:"bxl.Result"})," objects"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["A tuple of two lists: ",(0,r.jsx)(n.code,{children:"(successes, errors)"})]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'successes, errors = partition_results(results)\nctx.output.print(f"Successes: {len(successes)}, Errors: {len(errors)}")\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"partition_results_dict",children:"partition_results_dict"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def partition_results_dict(\n    results_dict: dict[typing.Any, bxl.Result],\n) -> (dict, dict[typing.Any, bxl.Error])\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Splits a dictionary of ",(0,r.jsx)(n.code,{children:"bxl.Result"})," into two dictionaries: - Successful key-value pairs (unwrapped values) - Errored key-value pairs (error objects)"]}),"\n",(0,r.jsx)(n.p,{children:"Parameters:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"results_dict"}),": Dictionary with values of type ",(0,r.jsx)(n.code,{children:"bxl.Result"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Tuple of ",(0,r.jsx)(n.code,{children:"(success_dict, error_dict)"})," where:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"success_dict"}),": Original keys mapped to unwrapped ",(0,r.jsx)(n.code,{children:"Ok"})," values"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"error_dict"}),": Original keys mapped to ",(0,r.jsx)(n.code,{children:"bxl.Error"})," objects"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'results = {"app": res1, "lib": res2, "test": res3}\nsuccesses, errors = split_results_dict_by_status(results)\n'})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},28453:(e,n,l)=>{l.d(n,{R:()=>c,x:()=>i});var s=l(96540);const r={},t=s.createContext(r);function c(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);