load("@fbcode//buck2/prelude/intellij_project:libraries.bxl", "get_library_xml")
load("@fbcode//buck2/prelude/java:java_providers.bzl", "JavaLibraryIntellijInfo")
load("@fbcode//buck2/prelude/utils:utils.bzl", "expect")

IjModule = record(
    deps = ["label"],
    label = "configured_target_label",
    name = str.type,
    rule_type = str.type,
    # TODO(T124404955) should this be a list of artifacts?
    srcs = "configured_attr_val",
)

IjModuleWithResolvedDeps = record(
    ij_module = IjModule.type,
    module_libraries = ["IjLibrary"],
    project_libraries = ["IjLibrary"],
)

_ANDROID_LIBRARY_RULE_TYPE = "fbcode//buck2/prelude/rules.bzl:android_library"
_JAVA_LIBRARY_RULE_TYPE = "fbcode//buck2/prelude/rules.bzl:java_library"
_MODULE_RULE_TYPES = [
    _ANDROID_LIBRARY_RULE_TYPE,
    _JAVA_LIBRARY_RULE_TYPE,
]

def get_modules(all_nodes: "target_set", analysis: dict.type) -> {"configured_target_label": IjModule.type}:
    modules = {}
    for node in all_nodes:
        # TODO(T124404704) find a better way to exclude exec_deps()
        if node.label.cell != "fbsource":
            continue

        rule_type = node.rule_type
        if rule_type not in _MODULE_RULE_TYPES:
            continue

        if rule_type == _JAVA_LIBRARY_RULE_TYPE:
            providers = analysis[configured_sub_target(node.label)].providers()
            modules[node.label] = _get_java_library_module(node, providers)
        elif rule_type == _ANDROID_LIBRARY_RULE_TYPE:
            providers = analysis[configured_sub_target(node.label)].providers()
            modules[node.label] = _get_android_library_module(node, providers)
        else:
            fail("Should add if branch above for rule type: {}".format(rule_type))

    return modules

def _get_android_library_module(node: "target_node", providers: "provider_collection") -> IjModule.type:
    expect(node.rule_type == _ANDROID_LIBRARY_RULE_TYPE, "Rule type must be {} but was {}".format(_JAVA_LIBRARY_RULE_TYPE, node.rule_type))
    java_library_intellij_info = providers[JavaLibraryIntellijInfo]
    return IjModule(
        deps = [compiling_dep.owner for compiling_dep in java_library_intellij_info.compiling_classpath],
        label = node.label,
        name = _get_name(node.label),
        rule_type = _ANDROID_LIBRARY_RULE_TYPE,
        srcs = node.attrs().srcs,
    )

def _get_java_library_module(node: "target_node", providers: "provider_collection") -> IjModule.type:
    expect(node.rule_type == _JAVA_LIBRARY_RULE_TYPE, "Rule type must be {} but was {}".format(_JAVA_LIBRARY_RULE_TYPE, node.rule_type))
    java_library_intellij_info = providers[JavaLibraryIntellijInfo]
    return IjModule(
        deps = [compiling_dep.owner for compiling_dep in java_library_intellij_info.compiling_classpath],
        label = node.label,
        name = _get_name(node.label),
        rule_type = _JAVA_LIBRARY_RULE_TYPE,
        srcs = node.attrs().srcs,
    )

def _get_name(module_label: "configured_target_label") -> str.type:
    return module_label.package.replace("/", "_")

def get_module_file_name(ij_module: IjModule.type) -> str.type:
    return "modules/{}.iml".format(ij_module.name)

# TODO(T124403530) Fill this in correctly
def get_module_file_contents(ij_module_with_resolved_deps: IjModuleWithResolvedDeps.type) -> str.type:
    return """\
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="false">\
{module_libraries}\
{project_libraries}
  </component>
</project>
""".format(
        module_libraries = _get_module_libraries_xml(ij_module_with_resolved_deps.module_libraries, base_indentation = "    "),
        project_libraries = _get_project_libraries_xml(ij_module_with_resolved_deps.project_libraries, base_indentation = "    "),
    )

def _get_module_libraries_xml(libraries: ["IjLibrary"], base_indentation: str.type) -> str.type:
    xml = ""
    for module_library in libraries:
        xml += _get_module_library_xml(module_library, base_indentation)

    return xml

def _get_module_library_xml(module_library: "IjLibrary", base_indentation: str.type) -> str.type:
    library_xml = get_library_xml(module_library, base_indentation = base_indentation + "  ")
    return """
{base_indentation}<orderEntry type="module-library" scope="COMPILE">{library_xml}
{base_indentation}</orderEntry>""".format(library_xml = library_xml, base_indentation = base_indentation)

def _get_project_libraries_xml(libraries: ["IjLibrary"], base_indentation: str.type) -> str.type:
    xml = ""
    for project_library in libraries:
        xml += _get_project_library_xml(project_library, base_indentation)

    return xml

def _get_project_library_xml(project_library: "IjLibrary", base_indentation: str.type) -> str.type:
    return """
{base_indentation}<orderEntry type="library" name="{name}" scope="COMPILE" level="project" />""".format(
        base_indentation = base_indentation,
        name = project_library.name,
    )
