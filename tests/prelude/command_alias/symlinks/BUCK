load("@fbcode//buck2/tests/prelude:py_assertion.bzl", "py_assertion")
load("@fbsource//tools/build_defs:selects.bzl", "selects")
load(":make_script_link.bzl", "make_script_link")

oncall("build_infra")

make_script_link(
    name = "link_to_parent",
    base = "fbcode//buck2/tests/prelude/command_alias/symlinks/subdir:script",
    via_parent = True,
)

py_assertion(
    name = "check_link_to_parent",
    # FIXME(JakobDegen): Here and below, it's not clear to me why this throws instead of returning a
    # non-zero exit code. But I'm pretty sure the test is correct (I debugged for a long time)
    script = selects.fmt(
        """
import subprocess
import sys

if {}:
    subprocess.check_output([sys.argv[1]])
else:
    try:
        subprocess.run([sys.argv[1]])
        sys.exit(1)
    except FileNotFoundError:
        pass
""",
        select({
            # FIXME(JakobDegen): This should not be inconsistent
            "DEFAULT": "True",
            "ovr_config//os:windows": "False",
        }),
    ),
    script_args = ["$(exe_target :link_to_parent)"],
)

make_script_link(
    name = "link_to_script",
    base = "fbcode//buck2/tests/prelude/command_alias/symlinks/subdir:script",
    via_parent = False,
)

# FIXME(JakobDegen): It would be nice if this worked
py_assertion(
    name = "check_link",
    script = selects.fmt(
        """
import subprocess
import sys

if {}:
    assert (
        subprocess.run([sys.argv[1]]).returncode != 0
    )
else:
    try:
        subprocess.run([sys.argv[1]])
        sys.exit(1)
    except FileNotFoundError:
        pass
""",
        select({
            "DEFAULT": "True",
            "ovr_config//os:windows": "False",
        }),
    ),
    script_args = ["$(exe_target :link_to_script)"],
)
