load("@fbcode//buck2/prelude/intellij_project:libraries.bxl", "get_libraries", "get_project_library_contents", "get_project_library_file_name")
load("@fbcode//buck2/prelude/intellij_project:modules.bxl", "IjModuleWithResolvedDeps", "get_module_file_contents", "get_module_file_name", "get_modules")

def _impl(ctx):
    all_nodes = ctx.cquery().deps(ctx.cli_args.targets, -1)
    all_analysis = ctx.analysis(all_nodes)

    final_output_dir_dict = {}
    action_factory = ctx.bxl_actions.action_factory()

    modules = get_modules(all_nodes, all_analysis)
    libraries = get_libraries(all_nodes)
    project_libraries, ij_modules_with_resolved_deps = _sort_libraries_and_modules(modules, libraries)

    file_names = []
    for ij_module_with_resolved_deps in ij_modules_with_resolved_deps:
        module = ij_module_with_resolved_deps.ij_module
        file_name = get_module_file_name(module)

        # TODO(T124403530) account for multiple copies of the same lib (with different configs)
        if file_name in file_names:
            continue
        file_names.append(file_name)
        module_output = _create_output(action_factory, file_name, final_output_dir_dict)
        action_factory.write(module_output, get_module_file_contents(ij_module_with_resolved_deps))

    file_names = []
    for library in project_libraries:
        file_name = get_project_library_file_name(library.label)

        # TODO(T124405159) once we correct include config in the file name, we don't need to do this check.
        if file_name in file_names:
            continue
        file_names.append(file_name)
        library_output = _create_output(action_factory, file_name, final_output_dir_dict)
        action_factory.write(library_output, get_project_library_contents(library))

    output_module = _create_output(action_factory, "modules.xml", final_output_dir_dict)
    action_factory.write(output_module, """\
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ProjectModuleManager">
    <modules>
    </modules>
  </component>
</project>
""")

    dot_idea_dir = action_factory.symlinked_dir(".idea", final_output_dir_dict)

    ctx.output.print(ctx.output.ensure(dot_idea_dir).abs_path())

def _create_output(
        action_factory: "actions",
        output_path: str.type,
        final_output_dir_dict: dict.type) -> "artifact":
    output = action_factory.declare_output("outputs/{}".format(output_path))
    final_output_dir_dict[output_path] = output

    return output

PROJECT_LIBRARY_THRESHOLD = 1

def _sort_libraries_and_modules(modules: ["IjModule"], libraries: ["IjLibrary"]) -> (["IjLibrary"], [IjModuleWithResolvedDeps.type]):
    # TODO(bobyf) better way to compare "label" and "configured_target_label"?
    libraries_by_stringified_label = {str(ij_library.label): ij_library for ij_library in libraries}

    # First, count the number of times that each library appears as a dependency of a module.
    library_counts = {str(ij_library.label): 0 for ij_library in libraries}
    for module in modules:
        for dep in module.deps:
            stringified_dep = str(dep)
            if stringified_dep in library_counts.keys():
                library_counts[stringified_dep] += 1

    # If a library appears more than PROJECT_LIBRARY_THRESHOLD times, then it is a project library.
    # Otherwise (if it appears at least once), it is a module library (it is inlined into the module's
    # .iml file rather than having its own .iml file).
    project_libraries = {}
    module_libraries = {}
    for stringified_library_label, count in library_counts.items():
        if count > PROJECT_LIBRARY_THRESHOLD:
            project_libraries[stringified_library_label] = libraries_by_stringified_label[stringified_library_label]
        elif count > 0:
            module_libraries[stringified_library_label] = libraries_by_stringified_label[stringified_library_label]

    modules_by_stringified_label = {str(ij_module.label): ij_module for ij_module in modules}
    ij_modules_with_resolved_deps = []
    for module in modules:
        module_dependencies = []
        module_libs = []
        project_libs = []
        for dep in module.deps:
            stringified_dep = str(dep)
            if stringified_dep in module_libraries.keys():
                module_libs.append(module_libraries[stringified_dep])
            elif stringified_dep in project_libraries.keys():
                project_libs.append(project_libraries[stringified_dep])
            elif stringified_dep in modules_by_stringified_label.keys():
                module_dependencies.append(modules_by_stringified_label[stringified_dep])

        ij_modules_with_resolved_deps.append(
            IjModuleWithResolvedDeps(
                ij_module = module,
                module_dependencies = module_dependencies,
                module_libraries = module_libs,
                project_libraries = project_libs,
            ),
        )

    return project_libraries.values(), ij_modules_with_resolved_deps

generate_intellij_project = bxl(
    impl = _impl,
    cli_args = {
        "targets": cli_args.list(cli_args.target_label()),
    },
)
