# This file is @generated, regenerate by re-running test with `-- --env BUCK2_UPDATE_GOLDEN=1` appended to the test command

Replay an event log.

This command allows visualizing an existing event log in a Superconsole.

Usage: buck2 log replay [OPTIONS] [PATH] [OVERRIDE_ARGS]...

Arguments:
  [PATH]
          A path to an event-log file to read from

  [OVERRIDE_ARGS]...
          Override the arguments

Options:
      --recent <NUMBER>
          Open the event-log file from a recent command

      --trace-id <ID>
          Show log by trace id

      --allow-remote
          This option does nothing

      --no-remote
          Do not allow downloading the log from manifold if it's not found locally

      --speed <NUMBER>
          Control the playback speed using a float (i.e. 0.5, 2, etc)

      --preload
          Preload the event log. This is typically only useful for benchmarking

  -h, --help
          Print help (see a summary with '-h')

Console Options:
      --console <super|simple|...>
          Which console to use for this command

          [env: BUCK_CONSOLE=]
          [default: auto]
          [possible values: auto, none, simple, simplenotty, simpletty, super]

      --ui <UI>...
          Configure additional superconsole ui components.

          Accepts a comma-separated list of superconsole components to add. Possible values are:

          dice - shows information about evaluated dice nodes debugevents - shows information about
          the flow of events from buckd

          These components can be turned on/off interactively. Press 'h' for help when superconsole
          is active.

          Possible values:
          - dice
          - debugevents
          - io:          I/O panel
          - re:          RE panel

      --no-interactive-console
          Disable console interactions

          [env: BUCK_NO_INTERACTIVE_CONSOLE=]

Universal Options:
  -v, --verbose <VERBOSITY>
          How verbose buck should be while logging.

          Values: 0 = Quiet, errors only; 1 = Show status. Default; 2 = more info about errors; 3 =
          more info about everything; 4 = more info about everything + stderr;

          It can be combined with specific log items (stderr, full_failed_command, commands,
          actions, status, stats, success) to fine-tune the verbosity of the log. Example usage
          "-v=1,stderr"

          [default: 1]

      --oncall <ONCALL>
          The oncall executing this command

      --client-metadata <CLIENT_METADATA>
          Metadata key-value pairs to inject into Buck2's logging. Client metadata must be of the
          form `key=value`, where `key` is a snake_case identifier, and will be sent to backend
          datasets
